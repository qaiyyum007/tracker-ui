/**-----------------------------------------------------------------------------------------
* Copyright © 2025 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { ChangeDetectorRef, ElementRef, EventEmitter, NgZone, OnChanges, OnInit, Renderer2, SimpleChanges } from '@angular/core';
import { TreeViewComponent } from '@progress/kendo-angular-treeview';
import { BaseCheckDirective } from './base-check.directive';
import { CheckedItem } from './checked-item';
import * as i0 from "@angular/core";
/**
 * @hidden
 *
 * A directive which manages the in-memory checked state of the MultiSelectTree nodes.
 */
export declare class CheckAllDirective extends BaseCheckDirective implements OnChanges, OnInit {
    private element;
    private zone;
    cdr: ChangeDetectorRef;
    renderer: Renderer2;
    lastAction: 'check' | 'uncheck';
    treeview: TreeViewComponent;
    /**
     * Sets the collection that stores all checked items.
     */
    checkedItems: CheckedItem[];
    /**
     * Sets the item key or keys to compare data items.
     */
    valueField: string | string[];
    focused: boolean;
    /**
     * Fires when the `checkedItems` collection updates.
     */
    checkedItemsChange: EventEmitter<CheckedItem[]>;
    /**
     * Holds a `Set` with only the checked item keys. Updates this set each time the `checkedItems` value or content changes and uses it for fast look-up to check if an item is checked.
     */
    checkedKeys: Set<any>;
    private currentCheckedState;
    private currentIndeterminateState;
    handleChange(event: any): void;
    get isIndeterminate(): boolean;
    get isChecked(): boolean;
    constructor(element: ElementRef, zone: NgZone, cdr: ChangeDetectorRef, renderer: Renderer2);
    ngOnChanges(changes: SimpleChanges): void;
    ngOnInit(): void;
    private nextTick;
    private checkNode;
    private allChecked;
    private someChecked;
    static ɵfac: i0.ɵɵFactoryDeclaration<CheckAllDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<CheckAllDirective, "[checkAll]", never, { "lastAction": { "alias": "lastAction"; "required": false; }; "treeview": { "alias": "treeview"; "required": false; }; "checkedItems": { "alias": "checkedItems"; "required": false; }; "valueField": { "alias": "valueField"; "required": false; }; "focused": { "alias": "checkAll"; "required": false; }; }, { "checkedItemsChange": "checkedItemsChange"; }, never, never, true, never>;
}
