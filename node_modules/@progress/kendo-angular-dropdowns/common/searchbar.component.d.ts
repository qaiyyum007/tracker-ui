/**-----------------------------------------------------------------------------------------
* Copyright © 2025 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { Renderer2, EventEmitter, ElementRef, OnChanges, OnInit, OnDestroy, Injector, NgZone } from '@angular/core';
import { Direction } from './models/direction';
import { LocalizationService } from '@progress/kendo-angular-l10n';
import { FormControl } from '@angular/forms';
import * as i0 from "@angular/core";
/**
 * @hidden
 */
export declare class SearchBarComponent implements OnChanges, OnInit, OnDestroy {
    private localization;
    private injector;
    input: ElementRef<HTMLInputElement>;
    private ngZone;
    direction: Direction;
    tagListId: string;
    set readonly(readonly: boolean);
    get readonly(): boolean;
    set disabled(disabled: boolean);
    get disabled(): boolean;
    set isRequired(isRequired: boolean);
    get isRequired(): boolean;
    set isSuggestable(isSuggestable: boolean);
    get isSuggestable(): boolean;
    set isFilterable(isFilterable: boolean);
    get isFilterable(): boolean;
    get userInput(): string;
    set userInput(userInput: string);
    /**
     * @hidden
     */
    get formControl(): FormControl;
    suggestedText: string;
    /**
     * @hidden
     */
    set inputAttributes(attributes: {
        [key: string]: string;
    });
    get inputAttributes(): {
        [key: string]: string;
    };
    id: string;
    activeDescendant: string;
    tabIndex: number;
    isLoading: boolean;
    ariaControls: string;
    ariaExpanded: boolean | null;
    get attrAriaInvalid(): boolean | null;
    set placeholder(text: string);
    get placeholder(): string;
    role: string;
    get dir(): string;
    valueChange: EventEmitter<any>;
    onBlur: EventEmitter<any>;
    onFocus: EventEmitter<any>;
    onClick: EventEmitter<any>;
    onNavigate: EventEmitter<any>;
    get value(): string;
    private _isRequired;
    private _readonly;
    private _disabled;
    private _userInput;
    private _previousValue;
    private _placeholder;
    private _isSuggestable;
    private _isFilterable;
    private renderer;
    private subs;
    private _inputAttributes;
    private parsedAttributes;
    private get defaultAttributes();
    private get mutableAttributes();
    constructor(localization: LocalizationService, renderer: Renderer2, injector: Injector, input: ElementRef<HTMLInputElement>, ngZone: NgZone);
    ngOnInit(): void;
    ngOnChanges(changes: any): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    private writeInputValue;
    private setInputSelection;
    private setAriaAutocomplete;
    handleInput(event: any): void;
    handleFocus(event: any): void;
    handleBlur(event: any): void;
    handleKeydown(event: any): void;
    focus(): void;
    blur(): void;
    setInputSize(): void;
    private setInputAttributes;
    static ɵfac: i0.ɵɵFactoryDeclaration<SearchBarComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<SearchBarComponent, "input[kendoSearchbar]", never, { "tagListId": { "alias": "tagListId"; "required": false; }; "readonly": { "alias": "readonly"; "required": false; }; "disabled": { "alias": "disabled"; "required": false; }; "isRequired": { "alias": "isRequired"; "required": false; }; "isSuggestable": { "alias": "isSuggestable"; "required": false; }; "isFilterable": { "alias": "isFilterable"; "required": false; }; "userInput": { "alias": "userInput"; "required": false; }; "suggestedText": { "alias": "suggestedText"; "required": false; }; "inputAttributes": { "alias": "inputAttributes"; "required": false; }; "id": { "alias": "id"; "required": false; }; "activeDescendant": { "alias": "activeDescendant"; "required": false; }; "tabIndex": { "alias": "tabIndex"; "required": false; }; "isLoading": { "alias": "isLoading"; "required": false; }; "ariaControls": { "alias": "ariaControls"; "required": false; }; "ariaExpanded": { "alias": "ariaExpanded"; "required": false; }; "placeholder": { "alias": "placeholder"; "required": false; }; }, { "valueChange": "valueChange"; "onBlur": "onBlur"; "onFocus": "onFocus"; "onClick": "onClick"; "onNavigate": "onNavigate"; }, never, never, true, never>;
}
