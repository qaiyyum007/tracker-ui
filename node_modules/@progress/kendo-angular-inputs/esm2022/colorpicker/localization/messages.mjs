/**-----------------------------------------------------------------------------------------
* Copyright © 2025 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { Directive, Input } from '@angular/core';
import { ComponentMessages } from '@progress/kendo-angular-l10n';
import * as i0 from "@angular/core";
/**
 * @hidden
 */
export class ColorPickerMessages extends ComponentMessages {
    /**
     * Sets the `aria-label` for the ColorPalette component when the value is empty.
     */
    colorPaletteNoColor;
    /**
     * Sets the `aria-label` for the ColorGradient component when the value is empty.
     */
    colorGradientNoColor;
    /**
     * Sets the `aria-label` for the FlatColorPicker component when the value is empty.
     */
    flatColorPickerNoColor;
    /**
     * Sets the `aria-label` for the ColorPicker component when the value is empty.
     */
    colorPickerNoColor;
    /**
     * Sets the title for the gradient color drag handle chooser.
     */
    colorGradientHandle;
    /**
     * Sets the title for the clear button.
     */
    clearButton;
    /**
     * Sets the title for the hue slider handle.
     */
    hueSliderHandle;
    /**
     * Sets the title for the opacity slider handle.
     */
    opacitySliderHandle;
    /**
     * Sets the placeholder for the HEX color input.
     */
    hexInputPlaceholder;
    /**
     * Sets the placeholder for the red color input.
     */
    redInputPlaceholder;
    /**
     * Sets the placeholder for the green color input.
     */
    greenInputPlaceholder;
    /**
     * Sets the placeholder for the blue color input.
     */
    blueInputPlaceholder;
    /**
     * Sets the placeholder for the alpha input.
     */
    alphaInputPlaceholder;
    /**
     * Sets the `aria-label` for the red color input.
     */
    redChannelLabel;
    /**
     * Sets the `aria-label` for the green color input.
     */
    greenChannelLabel;
    /**
     * Sets the `aria-label` for the blue color input.
     */
    blueChannelLabel;
    /**
     * Sets the `aria-label` for the alpha color input.
     */
    alphaChannelLabel;
    /**
     * Sets the "Pass" message for the contrast tool.
     */
    passContrast;
    /**
     * Sets the "Fail" message for the contrast tool.
     */
    failContrast;
    /**
     * Sets the "Contrast ratio" message for the contrast tool.
     */
    contrastRatio;
    /**
     * Sets the message for the color preview pane.
     */
    previewColor;
    /**
     * Sets the message for the selected color pane.
     */
    revertSelection;
    /**
     * Sets the message for the gradient view button.
     */
    gradientView;
    /**
     * Sets the message for the palette view button.
     */
    paletteView;
    /**
     * Sets the message for the input format toggle button.
     */
    formatButton;
    /**
     * Sets the message for the **Apply** action button.
     */
    applyButton;
    /**
     * Sets the message for the **Cancel** action button.
     */
    cancelButton;
    /**
     * Sets the title of the **Close** button for the ActionSheet in adaptive mode.
     */
    adaptiveCloseButtonTitle;
    /**
     * Sets the title for the ActionSheet in adaptive mode.
     */
    adaptiveTitle;
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: ColorPickerMessages, deps: null, target: i0.ɵɵFactoryTarget.Directive });
    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.2.12", type: ColorPickerMessages, selector: "kendo-colorpicker-messages-base", inputs: { colorPaletteNoColor: "colorPaletteNoColor", colorGradientNoColor: "colorGradientNoColor", flatColorPickerNoColor: "flatColorPickerNoColor", colorPickerNoColor: "colorPickerNoColor", colorGradientHandle: "colorGradientHandle", clearButton: "clearButton", hueSliderHandle: "hueSliderHandle", opacitySliderHandle: "opacitySliderHandle", hexInputPlaceholder: "hexInputPlaceholder", redInputPlaceholder: "redInputPlaceholder", greenInputPlaceholder: "greenInputPlaceholder", blueInputPlaceholder: "blueInputPlaceholder", alphaInputPlaceholder: "alphaInputPlaceholder", redChannelLabel: "redChannelLabel", greenChannelLabel: "greenChannelLabel", blueChannelLabel: "blueChannelLabel", alphaChannelLabel: "alphaChannelLabel", passContrast: "passContrast", failContrast: "failContrast", contrastRatio: "contrastRatio", previewColor: "previewColor", revertSelection: "revertSelection", gradientView: "gradientView", paletteView: "paletteView", formatButton: "formatButton", applyButton: "applyButton", cancelButton: "cancelButton", adaptiveCloseButtonTitle: "adaptiveCloseButtonTitle", adaptiveTitle: "adaptiveTitle" }, usesInheritance: true, ngImport: i0 });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: ColorPickerMessages, decorators: [{
            type: Directive,
            args: [{
                    // eslint-disable-next-line @angular-eslint/directive-selector
                    selector: 'kendo-colorpicker-messages-base'
                }]
        }], propDecorators: { colorPaletteNoColor: [{
                type: Input
            }], colorGradientNoColor: [{
                type: Input
            }], flatColorPickerNoColor: [{
                type: Input
            }], colorPickerNoColor: [{
                type: Input
            }], colorGradientHandle: [{
                type: Input
            }], clearButton: [{
                type: Input
            }], hueSliderHandle: [{
                type: Input
            }], opacitySliderHandle: [{
                type: Input
            }], hexInputPlaceholder: [{
                type: Input
            }], redInputPlaceholder: [{
                type: Input
            }], greenInputPlaceholder: [{
                type: Input
            }], blueInputPlaceholder: [{
                type: Input
            }], alphaInputPlaceholder: [{
                type: Input
            }], redChannelLabel: [{
                type: Input
            }], greenChannelLabel: [{
                type: Input
            }], blueChannelLabel: [{
                type: Input
            }], alphaChannelLabel: [{
                type: Input
            }], passContrast: [{
                type: Input
            }], failContrast: [{
                type: Input
            }], contrastRatio: [{
                type: Input
            }], previewColor: [{
                type: Input
            }], revertSelection: [{
                type: Input
            }], gradientView: [{
                type: Input
            }], paletteView: [{
                type: Input
            }], formatButton: [{
                type: Input
            }], applyButton: [{
                type: Input
            }], cancelButton: [{
                type: Input
            }], adaptiveCloseButtonTitle: [{
                type: Input
            }], adaptiveTitle: [{
                type: Input
            }] } });
