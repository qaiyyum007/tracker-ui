/**-----------------------------------------------------------------------------------------
* Copyright © 2025 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { Component, HostBinding, Input } from "@angular/core";
import { NgClass, NgIf } from "@angular/common";
import { IconWrapperComponent } from "@progress/kendo-angular-icons";
import { isPresent } from "@progress/kendo-angular-common";
import * as i0 from "@angular/core";
/**
 * @hidden
 */
export class OTPInputSeparatorComponent {
    set separator(otpSeparator) {
        this._separator = otpSeparator;
        this.clearSeparator();
        if (!isPresent(otpSeparator)) {
            return;
        }
        if (typeof otpSeparator === 'string') {
            this.hasText = true;
            return;
        }
        if (typeof otpSeparator.value !== 'string') {
            this.hasSVGIcon = otpSeparator?.type === 'svgIcon';
            this.separatorSVGIcon = otpSeparator.value;
            return;
        }
        this.hasIconClass = otpSeparator?.type === 'iconClass';
        this.hasFontIcon = otpSeparator?.type === 'fontIcon';
        this.separatorIconString = otpSeparator.value;
    }
    get separator() {
        return this._separator;
    }
    wrapperClass = true;
    hasText;
    hasIconClass;
    hasSVGIcon;
    hasFontIcon;
    separatorIconString;
    separatorSVGIcon;
    _separator;
    clearSeparator() {
        this.hasText = false;
        this.hasFontIcon = false;
        this.hasIconClass = false;
        this.hasSVGIcon = false;
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: OTPInputSeparatorComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: OTPInputSeparatorComponent, isStandalone: true, selector: "kendo-otpinput-separator", inputs: { separator: "separator" }, host: { properties: { "class.k-otp-separator": "this.wrapperClass" } }, exportAs: ["kendoOTPInputSeparator"], ngImport: i0, template: `
        <ng-container *ngIf="hasText">{{this.separator}}</ng-container>
        <span *ngIf="hasIconClass" [ngClass]="separatorIconString"></span>
        <kendo-icon-wrapper
            *ngIf="hasFontIcon || hasSVGIcon"
            [name]="separatorIconString"
            [svgIcon]="separatorSVGIcon"
        ></kendo-icon-wrapper>
    `, isInline: true, dependencies: [{ kind: "directive", type: NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "component", type: IconWrapperComponent, selector: "kendo-icon-wrapper", inputs: ["name", "svgIcon", "innerCssClass", "customFontClass", "size"], exportAs: ["kendoIconWrapper"] }] });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: OTPInputSeparatorComponent, decorators: [{
            type: Component,
            args: [{
                    exportAs: 'kendoOTPInputSeparator',
                    selector: 'kendo-otpinput-separator',
                    template: `
        <ng-container *ngIf="hasText">{{this.separator}}</ng-container>
        <span *ngIf="hasIconClass" [ngClass]="separatorIconString"></span>
        <kendo-icon-wrapper
            *ngIf="hasFontIcon || hasSVGIcon"
            [name]="separatorIconString"
            [svgIcon]="separatorSVGIcon"
        ></kendo-icon-wrapper>
    `,
                    standalone: true,
                    imports: [NgIf, NgClass, IconWrapperComponent]
                }]
        }], propDecorators: { separator: [{
                type: Input
            }], wrapperClass: [{
                type: HostBinding,
                args: ['class.k-otp-separator']
            }] } });
