/**-----------------------------------------------------------------------------------------
* Copyright © 2025 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { AfterViewInit, ChangeDetectorRef, EventEmitter, NgZone, OnDestroy, Renderer2 } from '@angular/core';
import { Subscription } from 'rxjs';
import * as i0 from "@angular/core";
/**
 * @hidden
 */
export declare class SharedInputEventsDirective implements AfterViewInit, OnDestroy {
    private ngZone;
    protected renderer: Renderer2;
    cdr: ChangeDetectorRef;
    hostElement: any;
    clearButtonClicked: boolean;
    isFocused: boolean;
    isFocusedChange: EventEmitter<boolean>;
    onFocus: EventEmitter<any>;
    handleBlur: EventEmitter<any>;
    protected subscriptions: Subscription;
    constructor(ngZone: NgZone, renderer: Renderer2, cdr: ChangeDetectorRef);
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<SharedInputEventsDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<SharedInputEventsDirective, "[kendoInputSharedEvents]", never, { "hostElement": { "alias": "hostElement"; "required": false; }; "clearButtonClicked": { "alias": "clearButtonClicked"; "required": false; }; "isFocused": { "alias": "isFocused"; "required": false; }; }, { "isFocusedChange": "isFocusedChange"; "onFocus": "onFocus"; "handleBlur": "handleBlur"; }, never, never, true, never>;
}
