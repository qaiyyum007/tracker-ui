/**-----------------------------------------------------------------------------------------
* Copyright © 2025 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { Directive, TemplateRef, Optional } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * Selects a [template](link:site.data.urls.angular['templatesyntax'])
 * within the `<kendo-sankey-tooltip>` component for the
 * [series tooltip](slug:tooltip_sankey#toc-specifying-a-node-tooltip-template).
 * The following context fields are frequently utilized:
 * - `let-color="color"`&mdash;The node color.
 * - `let-label="label"`&mdash;The node label data.
 * - `let-value="value"`&mdash;The node value.
 * Refer to the [`SankeyNodeTooltipTemplateContext`](slug:api_charts_sankeynodetooltiptemplatecontext) for the full list of available fields.
 *
 * @example
 * ```ts
 * import { Component } from '@angular/core';
 * import { SankeyData } from '@progress/kendo-angular-charts';
 *
 * _@Component({
 *   selector: 'my-app',
 *   template: `
 *       <kendo-sankey [data]="data">
 *           <ng-template kendoSankeyNodeTooltipTemplate let-color="color" let-label="label" let-value="value">
 *               {{ label.text }}: {{ value }}
 *           </ng-template>
 *       </kendo-sankey>
 *   `,
 * })
 * export class AppComponent {
 *     public data: SankeyData = {
 *         nodes: [
 *           { id: 1, label: { text: 'Linux' } },
 *           { id: 0, label: { text: 'iOS'} },
 *           { id: 2, label: { text: 'Mobile' } },
 *           { id: 3, label: { text: 'Desktop' } },
 *         ],
 *         links: [
 *           { sourceId: 0, targetId: 2, value: 1 },
 *           { sourceId: 1, targetId: 2, value: 2 },
 *           { sourceId: 1, targetId: 3, value: 3 },
 *         ],
 *     };
 * }
 *
 * ```
 */
export class SankeyNodeTooltipTemplateDirective {
    templateRef;
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: SankeyNodeTooltipTemplateDirective, deps: [{ token: i0.TemplateRef, optional: true }], target: i0.ɵɵFactoryTarget.Directive });
    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.2.12", type: SankeyNodeTooltipTemplateDirective, isStandalone: true, selector: "[kendoSankeyNodeTooltipTemplate]", ngImport: i0 });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: SankeyNodeTooltipTemplateDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[kendoSankeyNodeTooltipTemplate]',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: i0.TemplateRef, decorators: [{
                    type: Optional
                }] }]; } });
