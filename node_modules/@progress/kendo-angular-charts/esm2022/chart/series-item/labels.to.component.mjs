/**-----------------------------------------------------------------------------------------
* Copyright © 2025 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { ChangeDetectionStrategy, Component, Input } from '@angular/core';
import { ConfigurationService } from '../../common/configuration.service';
import { SettingsComponent } from '../../common/settings.component';
import * as i0 from "@angular/core";
import * as i1 from "../../common/configuration.service";
/**
 * Represents the `to` labels configuration of the Chart series.
 */
export class SeriesLabelsToComponent extends SettingsComponent {
    configurationService;
    /**
     * Specifies the background color of the `to` labels.
     */
    background;
    /**
     * Specifies the border configuration of the `to` labels.
     */
    border;
    /**
     * Specifies the text color of the `to` labels.
     */
    color;
    /**
     * Specifies a function that returns the content of the `to` labels.
     */
    content;
    /**
     * Specifies the font style of the `to` labels.
     * @default '12px sans-serif'
     */
    font;
    /**
     * Specifies the format of the `to` labels. Uses [IntlService format]({% slug api_intl_intlservice %}#toc-format).
     * @default '{0}'
     */
    format;
    /**
     * Specifies the margin of the `to` labels. A numeric value sets all margins.
     * @default 5
     */
    margin;
    /**
     * Specifies the padding of the `to` labels. A numeric value sets all paddings.
     * @default 0
     */
    padding;
    /**
     * Specifies the position of the `to` labels.
     */
    position;
    /**
     * Determines whether the Chart displays the series `to` labels.
     * @default false
     */
    visible;
    constructor(configurationService) {
        super('labels.to', configurationService);
        this.configurationService = configurationService;
        this.markAsVisible();
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: SeriesLabelsToComponent, deps: [{ token: i1.ConfigurationService }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: SeriesLabelsToComponent, isStandalone: true, selector: "kendo-chart-series-item-labels-to", inputs: { background: "background", border: "border", color: "color", content: "content", font: "font", format: "format", margin: "margin", padding: "padding", position: "position", visible: "visible" }, usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: SeriesLabelsToComponent, decorators: [{
            type: Component,
            args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    selector: 'kendo-chart-series-item-labels-to',
                    template: '',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: i1.ConfigurationService }]; }, propDecorators: { background: [{
                type: Input
            }], border: [{
                type: Input
            }], color: [{
                type: Input
            }], content: [{
                type: Input
            }], font: [{
                type: Input
            }], format: [{
                type: Input
            }], margin: [{
                type: Input
            }], padding: [{
                type: Input
            }], position: [{
                type: Input
            }], visible: [{
                type: Input
            }] } });
