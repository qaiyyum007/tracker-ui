/**-----------------------------------------------------------------------------------------
* Copyright © 2025 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { ChangeDetectionStrategy, Component, Input } from '@angular/core';
import { ConfigurationService } from '../../common/configuration.service';
import { SettingsComponent } from '../../common/settings.component';
import * as i0 from "@angular/core";
import * as i1 from "../../common/configuration.service";
/**
 * Represents the configuration options of the Chart trendline series
 * ([see example]({% slug trendlines_chart_charts %})).
 *
 * @example
 * ```html
 * <kendo-chart [pannable]="{ lock: 'y' }" [zoomable]="{ mousewheel: { lock: 'y' } }">
 *   <kendo-chart-series>
 *     <kendo-chart-series-item
 *       name="Sales By Quarter"
 *       type="line"
 *       [data]="salesByQuarter"
 *       field="count"
 *       categoryField="date">
 *     </kendo-chart-series-item>
 *     <kendo-chart-series-item
 *       name="Sales Forecast"
 *       type="linearTrendline"
 *       for="Sales By Quarter">
 *       <kendo-chart-series-item-trendline [forecast]="{ after: 10 }">
 *       </kendo-chart-series-item-trendline>
 *     </kendo-chart-series-item>
 *   </kendo-chart-series>
 * </kendo-chart>
 * ```
 *
 * @remarks
 * Supported children components are: {@link TrendlineForecastComponent}.
 */
export class SeriesTrendlineComponent extends SettingsComponent {
    configurationService;
    /**
     * Specifies the period for the trendline.
     */
    period;
    /**
     * Specifies the order for the trendline.
     */
    order;
    // These options are also available as child components
    /**
     * Specifies the forecast configuration for the trendline.
     */
    forecast;
    constructor(configurationService) {
        super('trendline', configurationService);
        this.configurationService = configurationService;
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: SeriesTrendlineComponent, deps: [{ token: i1.ConfigurationService }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: SeriesTrendlineComponent, isStandalone: true, selector: "kendo-chart-series-item-trendline", inputs: { period: "period", order: "order", forecast: "forecast" }, usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: SeriesTrendlineComponent, decorators: [{
            type: Component,
            args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    selector: 'kendo-chart-series-item-trendline',
                    template: '',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: i1.ConfigurationService }]; }, propDecorators: { period: [{
                type: Input
            }], order: [{
                type: Input
            }], forecast: [{
                type: Input
            }] } });
