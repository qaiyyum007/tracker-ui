/**-----------------------------------------------------------------------------------------
* Copyright © 2025 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { ChangeDetectionStrategy, Component, ViewContainerRef } from '@angular/core';
import { ContentChildren, QueryList } from '@angular/core';
import { CollectionComponent } from '../common/collection.component';
import { CollectionService } from '../common/collection.service';
import { ConfigurationService } from '../common/configuration.service';
import { TooltipTemplateService } from '../common/tooltip-template.service';
import { SeriesItemComponent } from './series-item.component';
import * as i0 from "@angular/core";
import * as i1 from "../common/configuration.service";
import * as i2 from "../common/collection.service";
import * as i3 from "../common/tooltip-template.service";
/**
 * Represents collection of one or more series items ([see example](slug:series_chart_charts)).
 *
 * @example
 * ```html
 * <kendo-chart>
 *   <kendo-chart-series>
 *     <kendo-chart-series-item type="line" [data]="[1, 2, 3]">
 *     </kendo-chart-series-item>
 *   </kendo-chart-series>
 * </kendo-chart>
 * ```
 *
 * @remarks
 * Supported children components are: {@link SeriesItemComponent}.
 */
export class SeriesComponent extends CollectionComponent {
    configurationService;
    collectionService;
    tooltipTemplateService;
    viewContainer;
    children;
    constructor(configurationService, collectionService, tooltipTemplateService, viewContainer) {
        super('series', configurationService, collectionService);
        this.configurationService = configurationService;
        this.collectionService = collectionService;
        this.tooltipTemplateService = tooltipTemplateService;
        this.viewContainer = viewContainer;
    }
    ngAfterContentChecked() {
        this.readTooltipTemplates();
    }
    readTooltipTemplates() {
        const templates = this.children.map((item) => item.seriesTooltipTemplateRef);
        this.tooltipTemplateService.setSeriesTemplates(templates);
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: SeriesComponent, deps: [{ token: i1.ConfigurationService }, { token: i2.CollectionService }, { token: i3.TooltipTemplateService }, { token: i0.ViewContainerRef }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: SeriesComponent, isStandalone: true, selector: "kendo-chart-series", providers: [CollectionService], queries: [{ propertyName: "children", predicate: SeriesItemComponent, descendants: true }], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: SeriesComponent, decorators: [{
            type: Component,
            args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [CollectionService],
                    selector: 'kendo-chart-series',
                    template: '',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: i1.ConfigurationService }, { type: i2.CollectionService }, { type: i3.TooltipTemplateService }, { type: i0.ViewContainerRef }]; }, propDecorators: { children: [{
                type: ContentChildren,
                args: [SeriesItemComponent, { descendants: true }]
            }] } });
