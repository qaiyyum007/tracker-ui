/**-----------------------------------------------------------------------------------------
* Copyright © 2025 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { ChangeDetectionStrategy, Component, Input } from '@angular/core';
import { ConfigurationService } from '../../common/configuration.service';
import { SettingsComponent } from '../../common/settings.component';
import * as i0 from "@angular/core";
import * as i1 from "../../common/configuration.service";
/**
 * Represents the Y-axis labels configuration.
 */
export class YAxisLabelsComponent extends SettingsComponent {
    configurationService;
    /**
     * Specifies the background color of the labels.
     */
    background;
    /**
     * Specifies the border configuration of the labels.
     */
    border;
    /**
     * Specifies the text color of the labels.
     */
    color;
    /**
     * Specifies a function that returns the content of the labels.
     */
    content;
    /**
     * Specifies the culture used for formatting the labels.
     */
    culture;
    /**
     * Specifies the date formats for displaying the labels.
     */
    dateFormats;
    /**
     * Specifies the font style of the labels.
     * @default '12px sans-serif'
     */
    font;
    /**
     * Specifies the format for displaying the labels. Uses the [`format`]({% slug api_intl_intlservice %}#toc-format) method of `IntlService`.
     * Contains one placeholder (`"{0}"`) which represents the category value.
     * @default '{0}'
     */
    format;
    /**
     * Specifies the margin of the labels. A numeric value sets all margins.
     * @default 0
     */
    margin;
    /**
     * Determines whether the Chart mirrors the axis labels and ticks. If the labels are normally on the
     * left side of the axis, the mirroring of the axis renders them to the right.
     * @default false
     */
    mirror;
    /**
     * Specifies the padding of the labels. A numeric value sets all paddings.
     * @default 0
     */
    padding;
    /**
     * Specifies the position of the axis labels. By default, labels are positioned next to the axis.
     * @default 'onAxis'
     */
    position;
    /**
     * Specifies the rotation angle of the labels. By default, the labels are not rotated.
     * @default 0
     */
    rotation;
    /**
     * Specifies the number of labels to skip.
     * @default 0
     */
    skip;
    /**
     * Specifies the label rendering step&mdash;renders every `n`<sup>th</sup> label. By default, every label is rendered.
     * @default 1
     */
    step;
    /**
     * Determines whether the Chart displays the Y-axis labels. By default, the Y-axis labels are visible.
     * @default true
     */
    visible;
    /**
     * Specifies a function that returns a custom visual for the labels.
     */
    visual;
    constructor(configurationService) {
        super('labels', configurationService);
        this.configurationService = configurationService;
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: YAxisLabelsComponent, deps: [{ token: i1.ConfigurationService }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: YAxisLabelsComponent, isStandalone: true, selector: "kendo-chart-y-axis-item-labels", inputs: { background: "background", border: "border", color: "color", content: "content", culture: "culture", dateFormats: "dateFormats", font: "font", format: "format", margin: "margin", mirror: "mirror", padding: "padding", position: "position", rotation: "rotation", skip: "skip", step: "step", visible: "visible", visual: "visual" }, usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: YAxisLabelsComponent, decorators: [{
            type: Component,
            args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    selector: 'kendo-chart-y-axis-item-labels',
                    template: '',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: i1.ConfigurationService }]; }, propDecorators: { background: [{
                type: Input
            }], border: [{
                type: Input
            }], color: [{
                type: Input
            }], content: [{
                type: Input
            }], culture: [{
                type: Input
            }], dateFormats: [{
                type: Input
            }], font: [{
                type: Input
            }], format: [{
                type: Input
            }], margin: [{
                type: Input
            }], mirror: [{
                type: Input
            }], padding: [{
                type: Input
            }], position: [{
                type: Input
            }], rotation: [{
                type: Input
            }], skip: [{
                type: Input
            }], step: [{
                type: Input
            }], visible: [{
                type: Input
            }], visual: [{
                type: Input
            }] } });
