/**-----------------------------------------------------------------------------------------
* Copyright © 2025 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { ChangeDetectionStrategy, Component } from '@angular/core';
import { Input } from '@angular/core';
import { ConfigurationService } from '../../common/configuration.service';
import { SettingsComponent } from '../../common/settings.component';
import * as i0 from "@angular/core";
import * as i1 from "../../common/configuration.service";
/**
 * Represents the configuration of the axis labels ([see example](slug:axes_chart_charts#toc-default-axis-configuration)).
 */
export class AxisDefaultsLabelsComponent extends SettingsComponent {
    configurationService;
    /**
     * Specifies a `content` function that customizes the appearance of the labels.
     */
    content;
    /**
     * Specifies the font style of the labels.
     * @default '12px sans-serif'
     */
    font;
    /**
     * Specifies the format for displaying the labels. Uses the [`format`]({% slug api_intl_intlservice %}#toc-format) method of `IntlService`.
     * Contains one placeholder (`"{0}"`) which represents the category value.
     * @default '{0}'
     */
    format;
    /**
     * Specifies the margin of the labels. A numeric value sets all margins.
     * @default 0
     */
    margin;
    /**
     * Determines whether the Chart mirrors the axis labels and ticks.
     * If the labels are normally on the left side of the axis,
     * the mirroring of the axis renders them to the right.
     * @default false
     */
    mirror;
    /**
     * Sets the padding of the labels. A numeric value sets all paddings.
     * @default 0
     */
    padding;
    /**
     * Specifies the rotation angle of the labels. By default, the labels are not rotated.
     *
     * If the axis is horizontal, can be set to `"auto"`. In this case, the labels are rotated only if the slot size is not sufficient for the entire labels.
     * @default 0
     */
    rotation;
    /**
     * Specifies the number of labels to skip. By default, no labels are skipped.
     * @default 0
     */
    skip;
    /**
     * Specifies the step for rendering the labels&mdash;renders every n<sup>th</sup> label. By default, each label is rendered.
     * @default 1
     */
    step;
    /**
     * Determines whether the Chart displays the axis labels. By default, the axis labels are visible.
     * @default true
     */
    visible;
    /**
     * Specifies a `visual` function that customizes the appearance of the labels.
     */
    visual;
    constructor(configurationService) {
        super('axisDefaults.labels', configurationService);
        this.configurationService = configurationService;
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: AxisDefaultsLabelsComponent, deps: [{ token: i1.ConfigurationService }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: AxisDefaultsLabelsComponent, isStandalone: true, selector: "kendo-chart-axis-defaults-labels", inputs: { content: "content", font: "font", format: "format", margin: "margin", mirror: "mirror", padding: "padding", rotation: "rotation", skip: "skip", step: "step", visible: "visible", visual: "visual" }, usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: AxisDefaultsLabelsComponent, decorators: [{
            type: Component,
            args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    selector: 'kendo-chart-axis-defaults-labels',
                    template: '',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: i1.ConfigurationService }]; }, propDecorators: { content: [{
                type: Input
            }], font: [{
                type: Input
            }], format: [{
                type: Input
            }], margin: [{
                type: Input
            }], mirror: [{
                type: Input
            }], padding: [{
                type: Input
            }], rotation: [{
                type: Input
            }], skip: [{
                type: Input
            }], step: [{
                type: Input
            }], visible: [{
                type: Input
            }], visual: [{
                type: Input
            }] } });
