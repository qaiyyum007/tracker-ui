/**-----------------------------------------------------------------------------------------
* Copyright Â© 2025 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { ChangeDetectionStrategy, Component, ContentChild, Input } from '@angular/core';
import { CollectionItemComponent } from '../common/collection-item.component';
import { CollectionService } from '../common/collection.service';
import { ConfigurationService } from '../common/configuration.service';
import { SeriesTooltipComponent } from './series-item/tooltip.component';
import { SeriesDrilldownTemplateDirective } from './series-drilldown-template.directive';
import * as i0 from "@angular/core";
import * as i1 from "../common/configuration.service";
import * as i2 from "../common/collection.service";
const toggle = (flag) => flag === undefined ? false : !flag;
/**
 * Represents the Kendo UI for Angular Chart Series Item component.
 *
 * @example
 * ```html
 * <kendo-chart ...>
 *   <kendo-chart-series>
 *     <kendo-chart-series-item type="line" ...> </kendo-chart-series-item>
 *   </kendo-chart-series>
 * </kendo-chart>
 * ```
 *
 * @remarks
 * Supported children components are: {@link SeriesErrorBarsComponent}, {@link SeriesExtremesComponent},
 * {@link SeriesHighlightComponent}, {@link SeriesLabelsComponent}, {@link SeriesMarkersComponent},
 * {@link SeriesNotesComponent}, {@link SeriesOutliersComponent}, {@link SeriesTooltipComponent}, and {@link SeriesTrendlineComponent}.
 */
export class SeriesItemComponent extends CollectionItemComponent {
    configurationService;
    collectionService;
    /**
     * Specifies the aggregate function for the date series.
     * Use this function when a category (year, month, or other) contains two or more points.
     * The Chart displays the return value of the function instead of the individual points.
     * Use the `aggregate` option with categorical chart axis only.
     *
     * The supported values are:
     * - `"avg"`&mdash;The average of all values for the date period.
     * - `"count"`&mdash;The number of values for the date period.
     * - `"max"`&mdash;The highest value for the date period.
     * - `"min"`&mdash;The lowest value for the date period.
     * - `"sum"`&mdash;The sum of all values for the date period. Defaults to `0` if no data points are defined.
     * - `"sumOrNull"`&mdash;The sum of all values for the date period. Defaults to `null` if no data points are defined.
     * - `"first"`&mdash;The first value.
     * - function (values, series, dataItems, category)&mdash;A user-defined aggregate function. Returns a single value or a data item.
     * - object (compound aggregate)&mdash;Applicable to the Candlestick, Box Plot, and OHLC series. Specifies the aggregate for each data item field.
     *
     * @default 'max'
     */
    aggregate;
    /**
     * Determines whether the Chart automatically scales down to fit the content area.
     * Applicable for the Pie and Donut series. ([See example](slug:donut_seriestypes_charts#displaying-labels-in-angular-donut-chart)).
     * @default false
     */
    autoFit;
    /**
     * Specifies the name of the value axis.
     * Use this option for Scatter plots. For more information on Scatter plots, refer to
     * [`xAxis`]({% slug api_charts_xaxis %}) and [`yAxis`]({% slug api_charts_yaxis %}).
     * @default 'primary'
     */
    axis;
    /**
     * Specifies the border configuration of the series.
     */
    border;
    /**
     * Specifies the name of the category axis.
     */
    categoryAxis;
    /**
     * Specifies the data item field which contains the category name or date.
     * If the category is a date, the points are rendered in chronological order.
     * @default 'category'
     */
    categoryField;
    /**
     * Specifies the data field that contains the `close` value.
     * Use the `closeField` option when [`series.type`]({% slug api_charts_series %}#toc-type) is set to `"candlestick"` or `"ohlc"`.
     * @default 'close'
     */
    closeField;
    /**
     * Specifies the color of the series.
     */
    color;
    /**
    * Specifies the data item field which contains the series color.
    * Use the `colorField` option when [`series.type`]({% slug api_charts_series %}#toc-type)
    * is set to `"bar"`, `"column"`, `"rangeBar"`, `"rangeColumn"`, `"bubble"`, `"donut"`, `"pie"`, `"candlestick"`,
    * `"ohlc"`, or `"waterfall"`.
    * @default 'color'
    */
    colorField;
    /**
     * Specifies the connectors configuration for the labels.
     */
    connectors;
    /**
     * Specifies the data item field which contains the current value.
     * Use the `currentField` option when [`series.type`]({% slug api_charts_series %}#toc-type) is set to `"bullet"` or `"verticalBullet"`.
     * @default 'current'
     */
    currentField;
    /**
     * Specifies the dash type of line Chart.
     * Use the `dashType` option only if the [`series.type`]({% slug api_charts_series %}#toc-type) option is set to `"line"`.
     * @default 'solid'
     */
    dashType;
    /**
     * Specifies the data source for the series.
     */
    data;
    /**
     * Specifies the color that is applied when the `close` value is less than the `open` value.
     */
    downColor;
    /**
     * Specifies the data field which contains the color that is applied when the `open` value is greater than the `close` value.
     * Use the `downColorField` option when [`series.type`]({% slug api_charts_series %}#toc-type) is set to `"candlestick"`.
     * @default 'downColor'
     */
    downColorField;
    /**
     * Specifies the field for the drilldown functionality.
     */
    drilldownField;
    /**
     * Use the `dynamicHeight` option when [`series.type`]({% slug api_charts_series %}#toc-type) is set to `"funnel"` or `"pyramid"`.
     * Determines whether all segments become with the same height.
     * When set to `false`, all segments have the same height. Otherwise, the height of each segment is based on its value.
     * @default true
     */
    dynamicHeight;
    /**
     * Use this option when [`series.type`]({% slug api_charts_series %}#toc-type) is set to `"funnel"`.
     * Determines whether the ratio of the bases of each segment is calculated based on the ratio of
     * `currentDataItem.value`/`nextDataItem.value`.
     * The last element is always created like a rectangle since there is no following element.
     * @default false
     */
    dynamicSlope;
    /**
     * Specifies the data item field which contains the [`series.errorBars`]({% slug api_charts_series %}#toc-errorbars) `high` value.
     * Use the `errorHighField` option when [`series.type`]({% slug api_charts_series %}#toc-type) is set to `"bar"`, `"column"`, `"line"`, or `"area"`.
     * @default 'errorHigh'
     */
    errorHighField;
    /**
     * Specifies the data item field which contains the [`series.errorBars`]({% slug api_charts_series %}#toc-errorbars) `low` value.
     * Use the `errorLowField` option when [`series.type`]({% slug api_charts_series %}#toc-type) is set to `"bar"`, `"column"`, `"line"`, or `"area"`.
     * @default 'errorLow'
     */
    errorLowField;
    /**
     * Specifies the data item field which contains a Boolean value indicating whether the sector is exploded.
     * Use the `explodeField` option when [`series.type`]({% slug api_charts_series %}#toc-type) is set to `"donut"` or `"pie"`.
     * @default 'explode'
     */
    explodeField;
    /**
     * Specifies the data item field which contains the series value.
     * @default 'value'
     */
    field;
    /**
     * Specifies the data item field which contains the series `from` value.
     * @default 'min'
     */
    fromField;
    /**
     * Specifies the distance between the categories expressed as a percentage of the bar width.
     * See the related `spacing` setting.
     * Use the `gap` option when [`series.type`]({% slug api_charts_series %}#toc-type) is set to `"bar"`, `"column"`, `"candlestick"`, `"ohlc"`,
     * `"radarColumn"`, or `"waterfall"`.
     * @default 1.5
     */
    gap;
    /**
     * Specifies the data field which contains the `high` value.
     * Use the `highField` option when [`series.type`]({% slug api_charts_series %}#toc-type) is set to `"candlestick"` or `"ohlc"`.
     * @default 'high'
     */
    highField;
    /**
     * Specifies the size of the hole in donut charts.
     */
    holeSize;
    /**
     * Specifies the line configuration of the series.
     */
    line;
    /**
     * Specifies the data field containing the `low` value.
     * Use the `lowField` option when [`series.type`]({% slug api_charts_series %}#toc-type) is set to `"candlestick"` or `"ohlc"`.
     * @default 'low'
     */
    lowField;
    /**
     * Specifies the data item field which contains the series `lower` value.
     * Use the `lowerField` option when [`series.type`]({% slug api_charts_series %}#toc-type) is set to `"boxPlot"`.
     * @default 'lower'
     */
    lowerField;
    /**
     * Specifies the margin around each donut series (ring). A numeric value sets all margins.
     * @default 1
     */
    margin;
    /**
     * Specifies the maximum size of the Chart bubble series marker.
     * @default 100
     */
    maxSize;
    /**
     * Specifies the mean configuration of the series.
     */
    mean;
    /**
     * Specifies the data item field which contains the series `mean` value.
     * Use the `meanField` option when [`series.type`]({% slug api_charts_series %}#toc-type) is set to `"boxPlot"`.
     * @default 'mean'
     */
    meanField;
    /**
     * Specifies the median configuration of the series.
     */
    median;
    /**
     * Specifies the data item field which contains the series `median` value.
     * Use the `medianField` option when [`series.type`]({% slug api_charts_series %}#toc-type) is set to `"boxPlot"`.
     * @default 'median'
     */
    medianField;
    /**
     * Specifies the minimum size of the Chart bubble series marker.
    * @default 5
     */
    minSize;
    /**
     * Specifies how to handle missing values in the series.
     */
    missingValues;
    /**
     * Specifies the name of the series.
     */
    name;
    /**
     * Specifies the top-base/bottom-base ratio of the whole Funnel Chart. If the `neckRatio` is set to `3`,
     * it means the top base is three times smaller than the bottom base.
     * Use the `neckRatio` option when [`series.type`]({% slug api_charts_series %}#toc-type) is set to `"funnel"` and `dynamicSlope` is set to `false`.
     * @default 0.3
     */
    neckRatio;
    /**
     * Specifies the color for negative values.
     */
    negativeColor;
    /**
     * Specifies the configuration for negative bubble values.
     */
    negativeValues;
    /**
     * Specifies the data item field which contains the series note text.
     * @default 'noteText'
     */
    noteTextField;
    /**
     * Specifies the opacity of the series. By default, the series are opaque.
     * @default 1
     */
    opacity;
    /**
     * Specifies the data field that contains the `open` value.
     */
    openField;
    /**
     * Specifies the data item field which contains the series `outliers` value.
     * Use the `outliersField` option when [`series.type`]({% slug api_charts_series %}#toc-type) is set to `"boxPlot"`.
     * @default 'outliers'
     */
    outliersField;
    /**
     * Specifies the overlay configuration of the series.
     */
    overlay;
    /**
     * Specifies the padding of the series.
     */
    padding;
    /**
     * Specifies the data item field which contains the series `q1` value.
     * Use the `q1Field` option when [`series.type`]({% slug api_charts_series %}#toc-type) is set to `"boxPlot"`.
     * @default 'q1'
     */
    q1Field;
    /**
     * Specifies the data item field which contains the series `q3` value.
     * Use the `q3Field` option when [`series.type`]({% slug api_charts_series %}#toc-type) is set to `"boxPlot"`.
     * @default 'q3'
     */
    q3Field;
    /**
     * Specifies the space in pixels between the different segments of the Funnel or Pyramid Chart.
     * Use the `segmentSpacing` option when [`series.type`]({% slug api_charts_series %}#toc-type) is set to `"funnel"` or `"pyramid"`.
     * @default 0
     */
    segmentSpacing;
    /**
     * Specifies the size of the series.
     */
    size;
    /**
     * Specifies the data field which contains the bubble size value.
     * @default 'size'
     */
    sizeField;
    /**
     * Specifies the distance between series points within a category. Expressed as a percentage of the bar width.
     * See the related `gap` setting.
     * Use the `spacing` option when [`series.type`]({% slug api_charts_series %}#toc-type) is set to `"bar"`, `"column"`, `"candlestick"`, `"ohlc"`, or
     * `"radarColumn"`.
     * @default 0.4
     */
    spacing;
    /**
     * Determines whether the series have to be stacked.
     * A string value is interpreted as [`series.stack.group`]({% slug api_charts_seriesstack %}#toc-group).
     *
     * Use the `stack` option when [`series.type`]({% slug api_charts_series %}#toc-type) is set to `"bar"`, `"column"`, `"line"`, `"area"`,
     * `"verticalLine"`, `"verticalArea"`, `"radarLine"`, `"radarArea"`, and `"radarColumn"`.
     * If not overridden, the stack settings of the first series are inherited as a default value by the rest of the series.
     * @default false
     */
    stack;
    /**
     * Specifies the start angle (in degrees) of the first Donut or Pie segment.
     * Use positive values to increase angles clockwise with zero to the left. Negative values are acceptable.
     * @default 90
     */
    startAngle;
    /**
     * Specifies the line style configuration of the series.
     * Use the `style` option when [`series.type`]({% slug api_charts_series %}#toc-type) is set to
     * `"line"`, `"scatterLine"`, `"radarLine"`, or `"polarLine"`.
     * @default 'normal'
     */
    style;
    /**
     * Specifies the data item field which contains the summary type for the Waterfall series.
     * The value (if any) of a data item marked as a summary point will be discarded.
     *
     * Summary columns are optional and can be one of two types:
     *
     * `"runningTotal"`&mdash;Displays the sum of all items since the last `"runningTotal"` point.
     * `"total"`&mdash;Displays the sum of all previous items.
     * @default 'summary'
     */
    summaryField;
    /**
     * Specifies the bullet target configuration.
     */
    target;
    /**
     * Specifies the data item field which contains the series `to` value.
     * @default 'max'
     */
    toField;
    /**
     * Specifies the type of the series.
     * @default 'column'
     */
    type;
    /**
     * Specifies the data item field which contains the series `upper` value.
     * Use the `upperField` option when [`series.type`]({% slug api_charts_series %}#toc-type) is set to `"boxPlot"`.
     * @default 'upper'
     */
    upperField;
    /**
     * Determines whether the Chart series is visible.
     * @default true
     */
    visible;
    /**
     * Determines whether to show the point category (for Funnel, Pyramid, Donut, and Pie series)
     * or the series name (for other available series types) in the legend.
     * @default true
     */
    visibleInLegend;
    /**
     * Specifies the data item field which contains the visibility state in the legend.
     */
    visibleInLegendField;
    /**
     * Specifies a function that returns a custom visual for the series.
     */
    visual;
    /**
     * Specifies the width of the series.
     */
    width;
    /**
     * Specifies the whiskers configuration of the series.
     */
    whiskers;
    /**
     * Specifies the name of the X axis.
     * Use the [`xAxis`]({% slug api_charts_xaxis %}) option when [`series.type`]({% slug api_charts_series %}#toc-type) is set to `"bubble"`, `"scatter"`, `"scatterLine"`, or `"polar"` series.
     * For the Polar series, the [`xAxis`]({% slug api_charts_xaxis %}) range is expressed in degrees.
     * @default 'primary'
     */
    xAxis;
    /**
     * Specifies the data item field which contains the [`series.errorBars`]({% slug api_charts_series %}#toc-errorbars) xAxis `high` value.
     * Use the `xErrorHighField` option when [`series.type`]({% slug api_charts_series %}#toc-type) is set to `"scatter"`, `"scatterLine"`, or
     * `"bubble"`.
     * @default 'xErrorHigh'
     */
    xErrorHighField;
    /**
     * Specifies the data item field which contains the [`series.errorBars`]({% slug api_charts_series %}#toc-errorbars) xAxis `low` value.
     * Use the `xErrorLowField` option when [`series.type`]({% slug api_charts_series %}#toc-type) is set to `"scatter"`, `"scatterLine"`, or
     * `"bubble"`.
     * @default 'xErrorLow'
     */
    xErrorLowField;
    /**
     * Specifies the data item field containing the `x` value.
     * Use the `xField` option when [`series.type`]({% slug api_charts_series %}#toc-type) is set to `"bubble"`, `"scatter"`, `"scatterLine"`, or
     * `"polar"` series.
     * @default 'x'
     */
    xField;
    /**
     * Specifies the name of the Y axis to use.
     * Available for the Bubble, Scatter, Scatter Line, and Polar series.
     * @default 'primary'
     */
    yAxis;
    /**
      * Specifies the data item field that contains the [`series.errorBars`]({% slug api_charts_series %}#toc-errorbars) yAxis `high` value.
      * The `yErrorHighField` option is supported when [`series.type`]({% slug api_charts_series %}#toc-type) is set to `"scatter"`, `"scatterLine"`, or
      * `"bubble"`.
      * @default 'yErrorHigh'
      */
    yErrorHighField;
    /**
     * Specifies the data item field that contains the [`series.errorBars`]({% slug api_charts_series %}#toc-errorbars) yAxis `low` value.
     * The `yErrorLowField` option is supported when [`series.type`]({% slug api_charts_series %}#toc-type) is set to `"scatter"`, `"scatterLine"`, or
     * `"bubble"`.
     * @default 'yErrorLow'
     */
    yErrorLowField;
    /**
     * Specifies the data item field that contains the `y` value.
     * The `yField` option is supported when [`series.type`]({% slug api_charts_series %}#toc-type) is set to `"bubble"`, `"scatter"`, or `"scatterLine"`.
     * @default 'y'
     */
    yField;
    /**
     * Specifies the z-index of the series.
     */
    zIndex;
    /**
     * Specifies the configuration options of the trendline series.
     *
     * The `trendline` option is supported  when [`series.type`]({% slug api_charts_series %}#toc-type) is set to
     * "`linearTrendline`", "`exponentialTrendline`", "`logarithmicTrendline`", "`powerTrendline`", "`polynomialTrendline`" or "`movingAverageTrendline`".
     */
    trendline;
    /**
     * Specifies the name of the series for which the current series serves as a trendline.
     */
    for;
    /**
     * Specifies the configuration options of the series legend item.
     */
    legendItem;
    /**
     * Specifies the configuration options of the series pattern.
     */
    pattern;
    /**
     * Specifies the data item field that contains the series pattern.
     * The `patternField` option is supported when [`series.type`]({% slug api_charts_series %}#toc-type) is set to `"pie"`, `"donut"`, `"funnel"`, `"heatmap"`, or `"pyramid"`.
     */
    patternField;
    // These options are also available as child components
    /**
     * Specifies the configuration options of the series error bars.
     */
    errorBars;
    /**
     * Specifies the configuration options of the series extremes.
     */
    extremes;
    /**
     * Specifies the configuration options of the series highlight.
     */
    highlight;
    /**
     * Specifies the configuration options of the series labels.
     */
    labels;
    /**
     * Specifies the configuration options of the series markers.
     */
    markers;
    /**
     * Specifies the configuration options of the series notes.
     */
    notes;
    /**
     * Specifies the configuration options of the series outliers.
     */
    outliers;
    /**
     * Specifies the configuration options of the series tooltip.
     */
    tooltip;
    seriesTooltip;
    drilldownTemplate;
    constructor(configurationService, collectionService) {
        super(configurationService, collectionService);
        this.configurationService = configurationService;
        this.collectionService = collectionService;
    }
    /**
     * Toggles the series visibility and updates the parent Chart without animated transitions.
     */
    toggleVisibility() {
        this.options.visible = toggle(this.options.visible);
        this.notify();
    }
    /**
     * Toggles the visibility of a point with the given index.
     * Applicable for the Pie, Donut, Funnel and Pyramid series.
     *
     * @param pointIndex - The zero-based index of the point to toggle.
     */
    togglePointVisibility(pointIndex) {
        const pv = this.options.pointVisibility = this.options.pointVisibility || {};
        pv[pointIndex] = toggle(pv[pointIndex]);
        this.notify();
    }
    get seriesTooltipTemplateRef() {
        if (this.seriesTooltip) {
            return this.seriesTooltip.seriesTooltipTemplateRef;
        }
    }
    static Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: SeriesItemComponent, deps: [{ token: i1.ConfigurationService }, { token: i2.CollectionService }], target: i0.ÉµÉµFactoryTarget.Component });
    static Éµcmp = i0.ÉµÉµngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: SeriesItemComponent, isStandalone: true, selector: "kendo-chart-series-item", inputs: { aggregate: "aggregate", autoFit: "autoFit", axis: "axis", border: "border", categoryAxis: "categoryAxis", categoryField: "categoryField", closeField: "closeField", color: "color", colorField: "colorField", connectors: "connectors", currentField: "currentField", dashType: "dashType", data: "data", downColor: "downColor", downColorField: "downColorField", drilldownField: "drilldownField", dynamicHeight: "dynamicHeight", dynamicSlope: "dynamicSlope", errorHighField: "errorHighField", errorLowField: "errorLowField", explodeField: "explodeField", field: "field", fromField: "fromField", gap: "gap", highField: "highField", holeSize: "holeSize", line: "line", lowField: "lowField", lowerField: "lowerField", margin: "margin", maxSize: "maxSize", mean: "mean", meanField: "meanField", median: "median", medianField: "medianField", minSize: "minSize", missingValues: "missingValues", name: "name", neckRatio: "neckRatio", negativeColor: "negativeColor", negativeValues: "negativeValues", noteTextField: "noteTextField", opacity: "opacity", openField: "openField", outliersField: "outliersField", overlay: "overlay", padding: "padding", q1Field: "q1Field", q3Field: "q3Field", segmentSpacing: "segmentSpacing", size: "size", sizeField: "sizeField", spacing: "spacing", stack: "stack", startAngle: "startAngle", style: "style", summaryField: "summaryField", target: "target", toField: "toField", type: "type", upperField: "upperField", visible: "visible", visibleInLegend: "visibleInLegend", visibleInLegendField: "visibleInLegendField", visual: "visual", width: "width", whiskers: "whiskers", xAxis: "xAxis", xErrorHighField: "xErrorHighField", xErrorLowField: "xErrorLowField", xField: "xField", yAxis: "yAxis", yErrorHighField: "yErrorHighField", yErrorLowField: "yErrorLowField", yField: "yField", zIndex: "zIndex", trendline: "trendline", for: "for", legendItem: "legendItem", pattern: "pattern", patternField: "patternField", errorBars: "errorBars", extremes: "extremes", highlight: "highlight", labels: "labels", markers: "markers", notes: "notes", outliers: "outliers", tooltip: "tooltip" }, providers: [ConfigurationService], queries: [{ propertyName: "seriesTooltip", first: true, predicate: SeriesTooltipComponent, descendants: true }, { propertyName: "drilldownTemplate", first: true, predicate: SeriesDrilldownTemplateDirective, descendants: true }], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ÉµÉµngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: SeriesItemComponent, decorators: [{
            type: Component,
            args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [ConfigurationService],
                    selector: 'kendo-chart-series-item',
                    template: '',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: i1.ConfigurationService }, { type: i2.CollectionService }]; }, propDecorators: { aggregate: [{
                type: Input
            }], autoFit: [{
                type: Input
            }], axis: [{
                type: Input
            }], border: [{
                type: Input
            }], categoryAxis: [{
                type: Input
            }], categoryField: [{
                type: Input
            }], closeField: [{
                type: Input
            }], color: [{
                type: Input
            }], colorField: [{
                type: Input
            }], connectors: [{
                type: Input
            }], currentField: [{
                type: Input
            }], dashType: [{
                type: Input
            }], data: [{
                type: Input
            }], downColor: [{
                type: Input
            }], downColorField: [{
                type: Input
            }], drilldownField: [{
                type: Input
            }], dynamicHeight: [{
                type: Input
            }], dynamicSlope: [{
                type: Input
            }], errorHighField: [{
                type: Input
            }], errorLowField: [{
                type: Input
            }], explodeField: [{
                type: Input
            }], field: [{
                type: Input
            }], fromField: [{
                type: Input
            }], gap: [{
                type: Input
            }], highField: [{
                type: Input
            }], holeSize: [{
                type: Input
            }], line: [{
                type: Input
            }], lowField: [{
                type: Input
            }], lowerField: [{
                type: Input
            }], margin: [{
                type: Input
            }], maxSize: [{
                type: Input
            }], mean: [{
                type: Input
            }], meanField: [{
                type: Input
            }], median: [{
                type: Input
            }], medianField: [{
                type: Input
            }], minSize: [{
                type: Input
            }], missingValues: [{
                type: Input
            }], name: [{
                type: Input
            }], neckRatio: [{
                type: Input
            }], negativeColor: [{
                type: Input
            }], negativeValues: [{
                type: Input
            }], noteTextField: [{
                type: Input
            }], opacity: [{
                type: Input
            }], openField: [{
                type: Input
            }], outliersField: [{
                type: Input
            }], overlay: [{
                type: Input
            }], padding: [{
                type: Input
            }], q1Field: [{
                type: Input
            }], q3Field: [{
                type: Input
            }], segmentSpacing: [{
                type: Input
            }], size: [{
                type: Input
            }], sizeField: [{
                type: Input
            }], spacing: [{
                type: Input
            }], stack: [{
                type: Input
            }], startAngle: [{
                type: Input
            }], style: [{
                type: Input
            }], summaryField: [{
                type: Input
            }], target: [{
                type: Input
            }], toField: [{
                type: Input
            }], type: [{
                type: Input
            }], upperField: [{
                type: Input
            }], visible: [{
                type: Input
            }], visibleInLegend: [{
                type: Input
            }], visibleInLegendField: [{
                type: Input
            }], visual: [{
                type: Input
            }], width: [{
                type: Input
            }], whiskers: [{
                type: Input
            }], xAxis: [{
                type: Input
            }], xErrorHighField: [{
                type: Input
            }], xErrorLowField: [{
                type: Input
            }], xField: [{
                type: Input
            }], yAxis: [{
                type: Input
            }], yErrorHighField: [{
                type: Input
            }], yErrorLowField: [{
                type: Input
            }], yField: [{
                type: Input
            }], zIndex: [{
                type: Input
            }], trendline: [{
                type: Input
            }], for: [{
                type: Input
            }], legendItem: [{
                type: Input
            }], pattern: [{
                type: Input
            }], patternField: [{
                type: Input
            }], errorBars: [{
                type: Input
            }], extremes: [{
                type: Input
            }], highlight: [{
                type: Input
            }], labels: [{
                type: Input
            }], markers: [{
                type: Input
            }], notes: [{
                type: Input
            }], outliers: [{
                type: Input
            }], tooltip: [{
                type: Input
            }], seriesTooltip: [{
                type: ContentChild,
                args: [SeriesTooltipComponent, { static: false }]
            }], drilldownTemplate: [{
                type: ContentChild,
                args: [SeriesDrilldownTemplateDirective, { static: false }]
            }] } });
