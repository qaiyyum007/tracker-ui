/**-----------------------------------------------------------------------------------------
* Copyright © 2025 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import * as i0 from '@angular/core';
import { Directive, Optional, Injectable, SimpleChange, TemplateRef, Component, ChangeDetectionStrategy, Input, ContentChild, ElementRef, ViewChild, ViewChildren, EventEmitter, Output, ContentChildren, forwardRef, LOCALE_ID, Inject, isDevMode, InjectionToken, HostBinding, NgModule } from '@angular/core';
import { isDocumentAvailable, shouldShowValidationUI, ResizeSensorComponent, WatermarkOverlayComponent, PreventableEvent as PreventableEvent$1, isChanged, ResizeBatchService } from '@progress/kendo-angular-common';
import * as i3 from '@progress/kendo-angular-intl';
import * as i1$1 from '@progress/kendo-angular-l10n';
import { ComponentMessages, LocalizationService, L10N_PREFIX } from '@progress/kendo-angular-l10n';
import { DateCategoryAxis, DateValueAxis, InstanceObserver, chartBaseTheme, chartTheme, deepExtend, Chart, StockChart, Sparkline, sankeyTheme, Sankey, createSankeyData } from '@progress/kendo-charts';
import { exportImage, exportSVG } from '@progress/kendo-drawing';
import { validatePackage } from '@progress/kendo-licensing';
import { Subject, BehaviorSubject, combineLatest, Subscription } from 'rxjs';
import { auditTime, tap } from 'rxjs/operators';
import * as i1 from '@progress/kendo-angular-popup';
import { PopupService, POPUP_CONTAINER } from '@progress/kendo-angular-popup';
import { NgStyle, NgFor, NgClass, NgIf, NgTemplateOutlet } from '@angular/common';
import { BreadCrumbComponent } from '@progress/kendo-angular-navigation';
import { homeIcon, arrowRightIcon, arrowLeftIcon } from '@progress/kendo-svg-icons';
import { IconWrapperComponent, IconsService } from '@progress/kendo-angular-icons';
import { getter } from '@progress/kendo-common';

const dateCategoryAxisFormats = DateCategoryAxis.prototype.options.labels.dateFormats;
const dateValueAxisFormats = DateValueAxis.prototype.options.labels.dateFormats;
const dateFormats = {
    milliseconds: "HH:mm:ss.SSS",
    seconds: { time: 'medium' },
    minutes: { time: 'short' },
    hours: { time: 'short' },
    days: { skeleton: 'Md' },
    weeks: { skeleton: 'Md' },
    months: { skeleton: 'yyMMM' },
    years: { skeleton: 'y' }
};
Object.assign(dateCategoryAxisFormats, dateFormats);
Object.assign(dateValueAxisFormats, dateFormats);

/**
 * Represents a directive which selects a [template](link:site.data.urls.angular['templatesyntax'])
 * within the `<kendo-chart>` component for the
 * [Donut center template](slug:donut_seriestypes_charts#toc-using-the-center-template).
 *
 * @example
 * <kendo-chart>
 *   <ng-template kendoChartDonutCenterTemplate>
 *     <span>Center Content</span>
 *   </ng-template>
 * </kendo-chart>
 */
class DonutCenterTemplateDirective {
    templateRef;
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: DonutCenterTemplateDirective, deps: [{ token: i0.TemplateRef, optional: true }], target: i0.ɵɵFactoryTarget.Directive });
    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.2.12", type: DonutCenterTemplateDirective, isStandalone: true, selector: "[kendoChartDonutCenterTemplate]", ngImport: i0 });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: DonutCenterTemplateDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[kendoChartDonutCenterTemplate]',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: i0.TemplateRef, decorators: [{
                    type: Optional
                }] }]; } });

/**
 * Represents a directive which selects a [template](link:site.data.urls.angular['templatesyntax'])
 * within the `<kendo-chart>` component for the
 * [No Data Overlay](slug:databinding_chart_charts#toc-no-data-overlay).
 *
 * @example
 * <kendo-chart>
 *   <ng-template kendoChartNoDataTemplate>
 *     <span>No data available</span>
 *   </ng-template>
 * </kendo-chart>
 */
class NoDataTemplateDirective {
    templateRef;
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: NoDataTemplateDirective, deps: [{ token: i0.TemplateRef, optional: true }], target: i0.ɵɵFactoryTarget.Directive });
    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.2.12", type: NoDataTemplateDirective, isStandalone: true, selector: "[kendoChartNoDataTemplate]", ngImport: i0 });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: NoDataTemplateDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[kendoChartNoDataTemplate]',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: i0.TemplateRef, decorators: [{
                    type: Optional
                }] }]; } });

/**
 * @hidden
 */
class ItemChange {
    sender;
    options;
    constructor(sender, options) {
        this.sender = sender;
        this.options = options;
    }
}
/**
 * @hidden
 */
class CollectionService {
    onItemChange$;
    source;
    constructor() {
        this.source = new Subject();
        this.onItemChange$ = this.source.asObservable();
    }
    notify(change) {
        this.source.next(change);
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: CollectionService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: CollectionService });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: CollectionService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return []; } });

/**
 * @hidden
 */
const THROTTLE_MS = 1000 / 60;
/**
 * @hidden
 */
class Change {
    key;
    value;
    constructor(key, value) {
        this.key = key;
        this.value = value;
    }
}
/**
 * @hidden
 */
class ConfigurationService {
    ngZone;
    onChange$;
    onFastChange$;
    store = {};
    source = new BehaviorSubject({});
    constructor(ngZone) {
        this.ngZone = ngZone;
        this.initSource();
    }
    initSource() {
        this.onFastChange$ = this.source.asObservable();
        this.onChange$ = this.onFastChange$.pipe(auditTime(THROTTLE_MS));
    }
    push(store) {
        this.store = store;
        this.next();
    }
    notify(change) {
        this.set(change.key, change.value);
        this.next();
    }
    set(field, value) {
        let store = this.store;
        const parts = field.split('.');
        let key = parts.shift();
        while (parts.length > 0) {
            store = store[key] = store[key] || {};
            key = parts.shift();
        }
        store[key] = value;
    }
    next() {
        this.ngZone.runOutsideAngular(() => {
            this.source.next(this.store);
        });
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: ConfigurationService, deps: [{ token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Injectable });
    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: ConfigurationService });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: ConfigurationService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i0.NgZone }]; } });

/**
 * @hidden
 */
function copyChanges(changes, options) {
    for (const propertyName in changes) {
        if (!Object.hasOwnProperty.call(changes, propertyName)) {
            continue;
        }
        const value = changes[propertyName].currentValue;
        if (value === undefined) {
            delete options[propertyName];
        }
        else {
            options[propertyName] = value;
        }
    }
}

/**
 * @hidden
 */
function toSimpleChanges(changes) {
    const result = {};
    for (const propertyName in changes) {
        if (!Object.hasOwnProperty.call(changes, propertyName)) {
            continue;
        }
        result[propertyName] = new SimpleChange(null, changes[propertyName], false);
    }
    return result;
}

/**
 * @hidden
 */
class CollectionItemComponent {
    configurationService;
    collectionService;
    subscription;
    options = {};
    hidden = false;
    constructor(configurationService, collectionService) {
        this.configurationService = configurationService;
        this.collectionService = collectionService;
        this.subscription = configurationService.onFastChange$.subscribe(store => {
            this.options = store;
            this.notify();
        });
    }
    ngOnChanges(changes) {
        const store = this.configurationService.store;
        copyChanges(changes, store);
        this.configurationService.push(store);
    }
    /**
     * Updates the component fields with the specified values and refreshes the Chart.
     *
     * Use this method when the configuration values cannot be set through the template.
     *
     * @example
     * ```ts-no-run
     * item.notifyChanges({ visible: true });
     * ```
     *
     * @param changes An object containing the updated input fields.
     */
    notifyChanges(changes) {
        this.ngOnChanges(toSimpleChanges(changes));
    }
    ngOnDestroy() {
        this.subscription.unsubscribe();
    }
    notify() {
        if (!this.collectionService) {
            return;
        }
        this.collectionService.notify(new ItemChange(this, this.options));
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: CollectionItemComponent, deps: [{ token: ConfigurationService }, { token: CollectionService }], target: i0.ɵɵFactoryTarget.Directive });
    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.2.12", type: CollectionItemComponent, usesOnChanges: true, ngImport: i0 });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: CollectionItemComponent, decorators: [{
            type: Directive
        }], ctorParameters: function () { return [{ type: ConfigurationService }, { type: CollectionService }]; } });

/**
 * @hidden
 */
class SettingsComponent {
    configKey;
    configurationService;
    store = {};
    constructor(configKey, configurationService) {
        this.configKey = configKey;
        this.configurationService = configurationService;
        if (configKey === undefined) {
            throw new Error('Configuration key not set');
        }
    }
    ngOnDestroy() {
        this.store = undefined;
        this.notify();
    }
    ngOnChanges(changes) {
        copyChanges(changes, this.store);
        this.notify();
    }
    /**
     * Updates the component fields with the specified values and refreshes the Chart.
     *
     * Use this method when the configuration values cannot be set through the template.
     *
     * @example
     * ```ts-no-run
     * item.notifyChanges({ visible: true });
     * ```
     *
     * @param changes An object containing the updated input fields.
     */
    notifyChanges(changes) {
        this.ngOnChanges(toSimpleChanges(changes));
    }
    markAsVisible() {
        this.store.visible = true;
        this.notify();
    }
    notify() {
        this.configurationService.notify(new Change(this.configKey, this.store));
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: SettingsComponent, deps: "invalid", target: i0.ɵɵFactoryTarget.Directive });
    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.2.12", type: SettingsComponent, usesOnChanges: true, ngImport: i0 });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: SettingsComponent, decorators: [{
            type: Directive
        }], ctorParameters: function () { return [{ type: undefined }, { type: ConfigurationService }]; } });

/**
 * Represents the configuration options of the Chart series tooltip
 * ([see example]({% slug tooltips_chart_charts %})).
 */
class SeriesTooltipComponent extends SettingsComponent {
    configurationService;
    /**
     * Specifies the background color of the tooltip.
     */
    background;
    /**
     * Specifies the border configuration of the tooltip.
     */
    border;
    /**
     * Specifies the text color of the tooltip.
     */
    color;
    /**
     * Specifies the font of the tooltip.
     * @default '12px sans-serif'
     */
    font;
    /**
     * Specifies the format of the tooltip.
     */
    format;
    /**
     * Specifies the padding of the tooltip.
     */
    padding;
    /**
     * Determines whether the Chart displays the series tooltip.
     * @default false
     */
    visible;
    seriesTooltipTemplate;
    constructor(configurationService) {
        super('tooltip', configurationService);
        this.configurationService = configurationService;
        this.markAsVisible();
    }
    get seriesTooltipTemplateRef() {
        return this.seriesTooltipTemplate;
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: SeriesTooltipComponent, deps: [{ token: ConfigurationService }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: SeriesTooltipComponent, isStandalone: true, selector: "kendo-chart-series-item-tooltip", inputs: { background: "background", border: "border", color: "color", font: "font", format: "format", padding: "padding", visible: "visible" }, queries: [{ propertyName: "seriesTooltipTemplate", first: true, predicate: TemplateRef, descendants: true }], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: SeriesTooltipComponent, decorators: [{
            type: Component,
            args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    selector: 'kendo-chart-series-item-tooltip',
                    template: '',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: ConfigurationService }]; }, propDecorators: { background: [{
                type: Input
            }], border: [{
                type: Input
            }], color: [{
                type: Input
            }], font: [{
                type: Input
            }], format: [{
                type: Input
            }], padding: [{
                type: Input
            }], visible: [{
                type: Input
            }], seriesTooltipTemplate: [{
                type: ContentChild,
                args: [TemplateRef, { static: false }]
            }] } });

/**
 * Represents the Kendo UI for Angular Chart Series Drilldown Template directive.
 * Use this directive within the `<kendo-chart-series-item>` component to create nested
 * [Drilldown](slug:drilldown_chart_charts) series.
 *
 * When you click on a data point with drilldown data,
 * the Chart creates a new series based on this template.
 *
 * The template context passes through the following fields:
 * - `drilldownValue`&mdash;The drilldown field value.
 * - `point`&mdash;The series point to drill down to.
 * - `series`&mdash;The series to drill down to.
 */
class SeriesDrilldownTemplateDirective {
    templateRef;
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: SeriesDrilldownTemplateDirective, deps: [{ token: i0.TemplateRef, optional: true }], target: i0.ɵɵFactoryTarget.Directive });
    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.2.12", type: SeriesDrilldownTemplateDirective, isStandalone: true, selector: "[kendoChartDrilldownSeries]", ngImport: i0 });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: SeriesDrilldownTemplateDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[kendoChartDrilldownSeries]',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: i0.TemplateRef, decorators: [{
                    type: Optional
                }] }]; } });

const toggle = (flag) => flag === undefined ? false : !flag;
/**
 * Represents the Kendo UI for Angular Chart Series Item component.
 *
 * @example
 * ```html
 * <kendo-chart ...>
 *   <kendo-chart-series>
 *     <kendo-chart-series-item type="line" ...> </kendo-chart-series-item>
 *   </kendo-chart-series>
 * </kendo-chart>
 * ```
 *
 * @remarks
 * Supported children components are: {@link SeriesErrorBarsComponent}, {@link SeriesExtremesComponent},
 * {@link SeriesHighlightComponent}, {@link SeriesLabelsComponent}, {@link SeriesMarkersComponent},
 * {@link SeriesNotesComponent}, {@link SeriesOutliersComponent}, {@link SeriesTooltipComponent}, and {@link SeriesTrendlineComponent}.
 */
class SeriesItemComponent extends CollectionItemComponent {
    configurationService;
    collectionService;
    /**
     * Specifies the aggregate function for the date series.
     * Use this function when a category (year, month, or other) contains two or more points.
     * The Chart displays the return value of the function instead of the individual points.
     * Use the `aggregate` option with categorical chart axis only.
     *
     * The supported values are:
     * - `"avg"`&mdash;The average of all values for the date period.
     * - `"count"`&mdash;The number of values for the date period.
     * - `"max"`&mdash;The highest value for the date period.
     * - `"min"`&mdash;The lowest value for the date period.
     * - `"sum"`&mdash;The sum of all values for the date period. Defaults to `0` if no data points are defined.
     * - `"sumOrNull"`&mdash;The sum of all values for the date period. Defaults to `null` if no data points are defined.
     * - `"first"`&mdash;The first value.
     * - function (values, series, dataItems, category)&mdash;A user-defined aggregate function. Returns a single value or a data item.
     * - object (compound aggregate)&mdash;Applicable to the Candlestick, Box Plot, and OHLC series. Specifies the aggregate for each data item field.
     *
     * @default 'max'
     */
    aggregate;
    /**
     * Determines whether the Chart automatically scales down to fit the content area.
     * Applicable for the Pie and Donut series. ([See example](slug:donut_seriestypes_charts#displaying-labels-in-angular-donut-chart)).
     * @default false
     */
    autoFit;
    /**
     * Specifies the name of the value axis.
     * Use this option for Scatter plots. For more information on Scatter plots, refer to
     * [`xAxis`]({% slug api_charts_xaxis %}) and [`yAxis`]({% slug api_charts_yaxis %}).
     * @default 'primary'
     */
    axis;
    /**
     * Specifies the border configuration of the series.
     */
    border;
    /**
     * Specifies the name of the category axis.
     */
    categoryAxis;
    /**
     * Specifies the data item field which contains the category name or date.
     * If the category is a date, the points are rendered in chronological order.
     * @default 'category'
     */
    categoryField;
    /**
     * Specifies the data field that contains the `close` value.
     * Use the `closeField` option when [`series.type`]({% slug api_charts_series %}#toc-type) is set to `"candlestick"` or `"ohlc"`.
     * @default 'close'
     */
    closeField;
    /**
     * Specifies the color of the series.
     */
    color;
    /**
    * Specifies the data item field which contains the series color.
    * Use the `colorField` option when [`series.type`]({% slug api_charts_series %}#toc-type)
    * is set to `"bar"`, `"column"`, `"rangeBar"`, `"rangeColumn"`, `"bubble"`, `"donut"`, `"pie"`, `"candlestick"`,
    * `"ohlc"`, or `"waterfall"`.
    * @default 'color'
    */
    colorField;
    /**
     * Specifies the connectors configuration for the labels.
     */
    connectors;
    /**
     * Specifies the data item field which contains the current value.
     * Use the `currentField` option when [`series.type`]({% slug api_charts_series %}#toc-type) is set to `"bullet"` or `"verticalBullet"`.
     * @default 'current'
     */
    currentField;
    /**
     * Specifies the dash type of line Chart.
     * Use the `dashType` option only if the [`series.type`]({% slug api_charts_series %}#toc-type) option is set to `"line"`.
     * @default 'solid'
     */
    dashType;
    /**
     * Specifies the data source for the series.
     */
    data;
    /**
     * Specifies the color that is applied when the `close` value is less than the `open` value.
     */
    downColor;
    /**
     * Specifies the data field which contains the color that is applied when the `open` value is greater than the `close` value.
     * Use the `downColorField` option when [`series.type`]({% slug api_charts_series %}#toc-type) is set to `"candlestick"`.
     * @default 'downColor'
     */
    downColorField;
    /**
     * Specifies the field for the drilldown functionality.
     */
    drilldownField;
    /**
     * Use the `dynamicHeight` option when [`series.type`]({% slug api_charts_series %}#toc-type) is set to `"funnel"` or `"pyramid"`.
     * Determines whether all segments become with the same height.
     * When set to `false`, all segments have the same height. Otherwise, the height of each segment is based on its value.
     * @default true
     */
    dynamicHeight;
    /**
     * Use this option when [`series.type`]({% slug api_charts_series %}#toc-type) is set to `"funnel"`.
     * Determines whether the ratio of the bases of each segment is calculated based on the ratio of
     * `currentDataItem.value`/`nextDataItem.value`.
     * The last element is always created like a rectangle since there is no following element.
     * @default false
     */
    dynamicSlope;
    /**
     * Specifies the data item field which contains the [`series.errorBars`]({% slug api_charts_series %}#toc-errorbars) `high` value.
     * Use the `errorHighField` option when [`series.type`]({% slug api_charts_series %}#toc-type) is set to `"bar"`, `"column"`, `"line"`, or `"area"`.
     * @default 'errorHigh'
     */
    errorHighField;
    /**
     * Specifies the data item field which contains the [`series.errorBars`]({% slug api_charts_series %}#toc-errorbars) `low` value.
     * Use the `errorLowField` option when [`series.type`]({% slug api_charts_series %}#toc-type) is set to `"bar"`, `"column"`, `"line"`, or `"area"`.
     * @default 'errorLow'
     */
    errorLowField;
    /**
     * Specifies the data item field which contains a Boolean value indicating whether the sector is exploded.
     * Use the `explodeField` option when [`series.type`]({% slug api_charts_series %}#toc-type) is set to `"donut"` or `"pie"`.
     * @default 'explode'
     */
    explodeField;
    /**
     * Specifies the data item field which contains the series value.
     * @default 'value'
     */
    field;
    /**
     * Specifies the data item field which contains the series `from` value.
     * @default 'min'
     */
    fromField;
    /**
     * Specifies the distance between the categories expressed as a percentage of the bar width.
     * See the related `spacing` setting.
     * Use the `gap` option when [`series.type`]({% slug api_charts_series %}#toc-type) is set to `"bar"`, `"column"`, `"candlestick"`, `"ohlc"`,
     * `"radarColumn"`, or `"waterfall"`.
     * @default 1.5
     */
    gap;
    /**
     * Specifies the data field which contains the `high` value.
     * Use the `highField` option when [`series.type`]({% slug api_charts_series %}#toc-type) is set to `"candlestick"` or `"ohlc"`.
     * @default 'high'
     */
    highField;
    /**
     * Specifies the size of the hole in donut charts.
     */
    holeSize;
    /**
     * Specifies the line configuration of the series.
     */
    line;
    /**
     * Specifies the data field containing the `low` value.
     * Use the `lowField` option when [`series.type`]({% slug api_charts_series %}#toc-type) is set to `"candlestick"` or `"ohlc"`.
     * @default 'low'
     */
    lowField;
    /**
     * Specifies the data item field which contains the series `lower` value.
     * Use the `lowerField` option when [`series.type`]({% slug api_charts_series %}#toc-type) is set to `"boxPlot"`.
     * @default 'lower'
     */
    lowerField;
    /**
     * Specifies the margin around each donut series (ring). A numeric value sets all margins.
     * @default 1
     */
    margin;
    /**
     * Specifies the maximum size of the Chart bubble series marker.
     * @default 100
     */
    maxSize;
    /**
     * Specifies the mean configuration of the series.
     */
    mean;
    /**
     * Specifies the data item field which contains the series `mean` value.
     * Use the `meanField` option when [`series.type`]({% slug api_charts_series %}#toc-type) is set to `"boxPlot"`.
     * @default 'mean'
     */
    meanField;
    /**
     * Specifies the median configuration of the series.
     */
    median;
    /**
     * Specifies the data item field which contains the series `median` value.
     * Use the `medianField` option when [`series.type`]({% slug api_charts_series %}#toc-type) is set to `"boxPlot"`.
     * @default 'median'
     */
    medianField;
    /**
     * Specifies the minimum size of the Chart bubble series marker.
    * @default 5
     */
    minSize;
    /**
     * Specifies how to handle missing values in the series.
     */
    missingValues;
    /**
     * Specifies the name of the series.
     */
    name;
    /**
     * Specifies the top-base/bottom-base ratio of the whole Funnel Chart. If the `neckRatio` is set to `3`,
     * it means the top base is three times smaller than the bottom base.
     * Use the `neckRatio` option when [`series.type`]({% slug api_charts_series %}#toc-type) is set to `"funnel"` and `dynamicSlope` is set to `false`.
     * @default 0.3
     */
    neckRatio;
    /**
     * Specifies the color for negative values.
     */
    negativeColor;
    /**
     * Specifies the configuration for negative bubble values.
     */
    negativeValues;
    /**
     * Specifies the data item field which contains the series note text.
     * @default 'noteText'
     */
    noteTextField;
    /**
     * Specifies the opacity of the series. By default, the series are opaque.
     * @default 1
     */
    opacity;
    /**
     * Specifies the data field that contains the `open` value.
     */
    openField;
    /**
     * Specifies the data item field which contains the series `outliers` value.
     * Use the `outliersField` option when [`series.type`]({% slug api_charts_series %}#toc-type) is set to `"boxPlot"`.
     * @default 'outliers'
     */
    outliersField;
    /**
     * Specifies the overlay configuration of the series.
     */
    overlay;
    /**
     * Specifies the padding of the series.
     */
    padding;
    /**
     * Specifies the data item field which contains the series `q1` value.
     * Use the `q1Field` option when [`series.type`]({% slug api_charts_series %}#toc-type) is set to `"boxPlot"`.
     * @default 'q1'
     */
    q1Field;
    /**
     * Specifies the data item field which contains the series `q3` value.
     * Use the `q3Field` option when [`series.type`]({% slug api_charts_series %}#toc-type) is set to `"boxPlot"`.
     * @default 'q3'
     */
    q3Field;
    /**
     * Specifies the space in pixels between the different segments of the Funnel or Pyramid Chart.
     * Use the `segmentSpacing` option when [`series.type`]({% slug api_charts_series %}#toc-type) is set to `"funnel"` or `"pyramid"`.
     * @default 0
     */
    segmentSpacing;
    /**
     * Specifies the size of the series.
     */
    size;
    /**
     * Specifies the data field which contains the bubble size value.
     * @default 'size'
     */
    sizeField;
    /**
     * Specifies the distance between series points within a category. Expressed as a percentage of the bar width.
     * See the related `gap` setting.
     * Use the `spacing` option when [`series.type`]({% slug api_charts_series %}#toc-type) is set to `"bar"`, `"column"`, `"candlestick"`, `"ohlc"`, or
     * `"radarColumn"`.
     * @default 0.4
     */
    spacing;
    /**
     * Determines whether the series have to be stacked.
     * A string value is interpreted as [`series.stack.group`]({% slug api_charts_seriesstack %}#toc-group).
     *
     * Use the `stack` option when [`series.type`]({% slug api_charts_series %}#toc-type) is set to `"bar"`, `"column"`, `"line"`, `"area"`,
     * `"verticalLine"`, `"verticalArea"`, `"radarLine"`, `"radarArea"`, and `"radarColumn"`.
     * If not overridden, the stack settings of the first series are inherited as a default value by the rest of the series.
     * @default false
     */
    stack;
    /**
     * Specifies the start angle (in degrees) of the first Donut or Pie segment.
     * Use positive values to increase angles clockwise with zero to the left. Negative values are acceptable.
     * @default 90
     */
    startAngle;
    /**
     * Specifies the line style configuration of the series.
     * Use the `style` option when [`series.type`]({% slug api_charts_series %}#toc-type) is set to
     * `"line"`, `"scatterLine"`, `"radarLine"`, or `"polarLine"`.
     * @default 'normal'
     */
    style;
    /**
     * Specifies the data item field which contains the summary type for the Waterfall series.
     * The value (if any) of a data item marked as a summary point will be discarded.
     *
     * Summary columns are optional and can be one of two types:
     *
     * `"runningTotal"`&mdash;Displays the sum of all items since the last `"runningTotal"` point.
     * `"total"`&mdash;Displays the sum of all previous items.
     * @default 'summary'
     */
    summaryField;
    /**
     * Specifies the bullet target configuration.
     */
    target;
    /**
     * Specifies the data item field which contains the series `to` value.
     * @default 'max'
     */
    toField;
    /**
     * Specifies the type of the series.
     * @default 'column'
     */
    type;
    /**
     * Specifies the data item field which contains the series `upper` value.
     * Use the `upperField` option when [`series.type`]({% slug api_charts_series %}#toc-type) is set to `"boxPlot"`.
     * @default 'upper'
     */
    upperField;
    /**
     * Determines whether the Chart series is visible.
     * @default true
     */
    visible;
    /**
     * Determines whether to show the point category (for Funnel, Pyramid, Donut, and Pie series)
     * or the series name (for other available series types) in the legend.
     * @default true
     */
    visibleInLegend;
    /**
     * Specifies the data item field which contains the visibility state in the legend.
     */
    visibleInLegendField;
    /**
     * Specifies a function that returns a custom visual for the series.
     */
    visual;
    /**
     * Specifies the width of the series.
     */
    width;
    /**
     * Specifies the whiskers configuration of the series.
     */
    whiskers;
    /**
     * Specifies the name of the X axis.
     * Use the [`xAxis`]({% slug api_charts_xaxis %}) option when [`series.type`]({% slug api_charts_series %}#toc-type) is set to `"bubble"`, `"scatter"`, `"scatterLine"`, or `"polar"` series.
     * For the Polar series, the [`xAxis`]({% slug api_charts_xaxis %}) range is expressed in degrees.
     * @default 'primary'
     */
    xAxis;
    /**
     * Specifies the data item field which contains the [`series.errorBars`]({% slug api_charts_series %}#toc-errorbars) xAxis `high` value.
     * Use the `xErrorHighField` option when [`series.type`]({% slug api_charts_series %}#toc-type) is set to `"scatter"`, `"scatterLine"`, or
     * `"bubble"`.
     * @default 'xErrorHigh'
     */
    xErrorHighField;
    /**
     * Specifies the data item field which contains the [`series.errorBars`]({% slug api_charts_series %}#toc-errorbars) xAxis `low` value.
     * Use the `xErrorLowField` option when [`series.type`]({% slug api_charts_series %}#toc-type) is set to `"scatter"`, `"scatterLine"`, or
     * `"bubble"`.
     * @default 'xErrorLow'
     */
    xErrorLowField;
    /**
     * Specifies the data item field containing the `x` value.
     * Use the `xField` option when [`series.type`]({% slug api_charts_series %}#toc-type) is set to `"bubble"`, `"scatter"`, `"scatterLine"`, or
     * `"polar"` series.
     * @default 'x'
     */
    xField;
    /**
     * Specifies the name of the Y axis to use.
     * Available for the Bubble, Scatter, Scatter Line, and Polar series.
     * @default 'primary'
     */
    yAxis;
    /**
      * Specifies the data item field that contains the [`series.errorBars`]({% slug api_charts_series %}#toc-errorbars) yAxis `high` value.
      * The `yErrorHighField` option is supported when [`series.type`]({% slug api_charts_series %}#toc-type) is set to `"scatter"`, `"scatterLine"`, or
      * `"bubble"`.
      * @default 'yErrorHigh'
      */
    yErrorHighField;
    /**
     * Specifies the data item field that contains the [`series.errorBars`]({% slug api_charts_series %}#toc-errorbars) yAxis `low` value.
     * The `yErrorLowField` option is supported when [`series.type`]({% slug api_charts_series %}#toc-type) is set to `"scatter"`, `"scatterLine"`, or
     * `"bubble"`.
     * @default 'yErrorLow'
     */
    yErrorLowField;
    /**
     * Specifies the data item field that contains the `y` value.
     * The `yField` option is supported when [`series.type`]({% slug api_charts_series %}#toc-type) is set to `"bubble"`, `"scatter"`, or `"scatterLine"`.
     * @default 'y'
     */
    yField;
    /**
     * Specifies the z-index of the series.
     */
    zIndex;
    /**
     * Specifies the configuration options of the trendline series.
     *
     * The `trendline` option is supported  when [`series.type`]({% slug api_charts_series %}#toc-type) is set to
     * "`linearTrendline`", "`exponentialTrendline`", "`logarithmicTrendline`", "`powerTrendline`", "`polynomialTrendline`" or "`movingAverageTrendline`".
     */
    trendline;
    /**
     * Specifies the name of the series for which the current series serves as a trendline.
     */
    for;
    /**
     * Specifies the configuration options of the series legend item.
     */
    legendItem;
    /**
     * Specifies the configuration options of the series pattern.
     */
    pattern;
    /**
     * Specifies the data item field that contains the series pattern.
     * The `patternField` option is supported when [`series.type`]({% slug api_charts_series %}#toc-type) is set to `"pie"`, `"donut"`, `"funnel"`, `"heatmap"`, or `"pyramid"`.
     */
    patternField;
    // These options are also available as child components
    /**
     * Specifies the configuration options of the series error bars.
     */
    errorBars;
    /**
     * Specifies the configuration options of the series extremes.
     */
    extremes;
    /**
     * Specifies the configuration options of the series highlight.
     */
    highlight;
    /**
     * Specifies the configuration options of the series labels.
     */
    labels;
    /**
     * Specifies the configuration options of the series markers.
     */
    markers;
    /**
     * Specifies the configuration options of the series notes.
     */
    notes;
    /**
     * Specifies the configuration options of the series outliers.
     */
    outliers;
    /**
     * Specifies the configuration options of the series tooltip.
     */
    tooltip;
    seriesTooltip;
    drilldownTemplate;
    constructor(configurationService, collectionService) {
        super(configurationService, collectionService);
        this.configurationService = configurationService;
        this.collectionService = collectionService;
    }
    /**
     * Toggles the series visibility and updates the parent Chart without animated transitions.
     */
    toggleVisibility() {
        this.options.visible = toggle(this.options.visible);
        this.notify();
    }
    /**
     * Toggles the visibility of a point with the given index.
     * Applicable for the Pie, Donut, Funnel and Pyramid series.
     *
     * @param pointIndex - The zero-based index of the point to toggle.
     */
    togglePointVisibility(pointIndex) {
        const pv = this.options.pointVisibility = this.options.pointVisibility || {};
        pv[pointIndex] = toggle(pv[pointIndex]);
        this.notify();
    }
    get seriesTooltipTemplateRef() {
        if (this.seriesTooltip) {
            return this.seriesTooltip.seriesTooltipTemplateRef;
        }
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: SeriesItemComponent, deps: [{ token: ConfigurationService }, { token: CollectionService }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: SeriesItemComponent, isStandalone: true, selector: "kendo-chart-series-item", inputs: { aggregate: "aggregate", autoFit: "autoFit", axis: "axis", border: "border", categoryAxis: "categoryAxis", categoryField: "categoryField", closeField: "closeField", color: "color", colorField: "colorField", connectors: "connectors", currentField: "currentField", dashType: "dashType", data: "data", downColor: "downColor", downColorField: "downColorField", drilldownField: "drilldownField", dynamicHeight: "dynamicHeight", dynamicSlope: "dynamicSlope", errorHighField: "errorHighField", errorLowField: "errorLowField", explodeField: "explodeField", field: "field", fromField: "fromField", gap: "gap", highField: "highField", holeSize: "holeSize", line: "line", lowField: "lowField", lowerField: "lowerField", margin: "margin", maxSize: "maxSize", mean: "mean", meanField: "meanField", median: "median", medianField: "medianField", minSize: "minSize", missingValues: "missingValues", name: "name", neckRatio: "neckRatio", negativeColor: "negativeColor", negativeValues: "negativeValues", noteTextField: "noteTextField", opacity: "opacity", openField: "openField", outliersField: "outliersField", overlay: "overlay", padding: "padding", q1Field: "q1Field", q3Field: "q3Field", segmentSpacing: "segmentSpacing", size: "size", sizeField: "sizeField", spacing: "spacing", stack: "stack", startAngle: "startAngle", style: "style", summaryField: "summaryField", target: "target", toField: "toField", type: "type", upperField: "upperField", visible: "visible", visibleInLegend: "visibleInLegend", visibleInLegendField: "visibleInLegendField", visual: "visual", width: "width", whiskers: "whiskers", xAxis: "xAxis", xErrorHighField: "xErrorHighField", xErrorLowField: "xErrorLowField", xField: "xField", yAxis: "yAxis", yErrorHighField: "yErrorHighField", yErrorLowField: "yErrorLowField", yField: "yField", zIndex: "zIndex", trendline: "trendline", for: "for", legendItem: "legendItem", pattern: "pattern", patternField: "patternField", errorBars: "errorBars", extremes: "extremes", highlight: "highlight", labels: "labels", markers: "markers", notes: "notes", outliers: "outliers", tooltip: "tooltip" }, providers: [ConfigurationService], queries: [{ propertyName: "seriesTooltip", first: true, predicate: SeriesTooltipComponent, descendants: true }, { propertyName: "drilldownTemplate", first: true, predicate: SeriesDrilldownTemplateDirective, descendants: true }], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: SeriesItemComponent, decorators: [{
            type: Component,
            args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [ConfigurationService],
                    selector: 'kendo-chart-series-item',
                    template: '',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: ConfigurationService }, { type: CollectionService }]; }, propDecorators: { aggregate: [{
                type: Input
            }], autoFit: [{
                type: Input
            }], axis: [{
                type: Input
            }], border: [{
                type: Input
            }], categoryAxis: [{
                type: Input
            }], categoryField: [{
                type: Input
            }], closeField: [{
                type: Input
            }], color: [{
                type: Input
            }], colorField: [{
                type: Input
            }], connectors: [{
                type: Input
            }], currentField: [{
                type: Input
            }], dashType: [{
                type: Input
            }], data: [{
                type: Input
            }], downColor: [{
                type: Input
            }], downColorField: [{
                type: Input
            }], drilldownField: [{
                type: Input
            }], dynamicHeight: [{
                type: Input
            }], dynamicSlope: [{
                type: Input
            }], errorHighField: [{
                type: Input
            }], errorLowField: [{
                type: Input
            }], explodeField: [{
                type: Input
            }], field: [{
                type: Input
            }], fromField: [{
                type: Input
            }], gap: [{
                type: Input
            }], highField: [{
                type: Input
            }], holeSize: [{
                type: Input
            }], line: [{
                type: Input
            }], lowField: [{
                type: Input
            }], lowerField: [{
                type: Input
            }], margin: [{
                type: Input
            }], maxSize: [{
                type: Input
            }], mean: [{
                type: Input
            }], meanField: [{
                type: Input
            }], median: [{
                type: Input
            }], medianField: [{
                type: Input
            }], minSize: [{
                type: Input
            }], missingValues: [{
                type: Input
            }], name: [{
                type: Input
            }], neckRatio: [{
                type: Input
            }], negativeColor: [{
                type: Input
            }], negativeValues: [{
                type: Input
            }], noteTextField: [{
                type: Input
            }], opacity: [{
                type: Input
            }], openField: [{
                type: Input
            }], outliersField: [{
                type: Input
            }], overlay: [{
                type: Input
            }], padding: [{
                type: Input
            }], q1Field: [{
                type: Input
            }], q3Field: [{
                type: Input
            }], segmentSpacing: [{
                type: Input
            }], size: [{
                type: Input
            }], sizeField: [{
                type: Input
            }], spacing: [{
                type: Input
            }], stack: [{
                type: Input
            }], startAngle: [{
                type: Input
            }], style: [{
                type: Input
            }], summaryField: [{
                type: Input
            }], target: [{
                type: Input
            }], toField: [{
                type: Input
            }], type: [{
                type: Input
            }], upperField: [{
                type: Input
            }], visible: [{
                type: Input
            }], visibleInLegend: [{
                type: Input
            }], visibleInLegendField: [{
                type: Input
            }], visual: [{
                type: Input
            }], width: [{
                type: Input
            }], whiskers: [{
                type: Input
            }], xAxis: [{
                type: Input
            }], xErrorHighField: [{
                type: Input
            }], xErrorLowField: [{
                type: Input
            }], xField: [{
                type: Input
            }], yAxis: [{
                type: Input
            }], yErrorHighField: [{
                type: Input
            }], yErrorLowField: [{
                type: Input
            }], yField: [{
                type: Input
            }], zIndex: [{
                type: Input
            }], trendline: [{
                type: Input
            }], for: [{
                type: Input
            }], legendItem: [{
                type: Input
            }], pattern: [{
                type: Input
            }], patternField: [{
                type: Input
            }], errorBars: [{
                type: Input
            }], extremes: [{
                type: Input
            }], highlight: [{
                type: Input
            }], labels: [{
                type: Input
            }], markers: [{
                type: Input
            }], notes: [{
                type: Input
            }], outliers: [{
                type: Input
            }], tooltip: [{
                type: Input
            }], seriesTooltip: [{
                type: ContentChild,
                args: [SeriesTooltipComponent, { static: false }]
            }], drilldownTemplate: [{
                type: ContentChild,
                args: [SeriesDrilldownTemplateDirective, { static: false }]
            }] } });

const POSITION_MODE = 'absolute';
const COLLISION = { horizontal: "fit", vertical: "fit" };
/**
 * @hidden
 */
class BaseTooltip {
    popupService;
    localizationService;
    animate;
    style = {};
    templateRef;
    popupRef = null;
    popupSettings;
    constructor(popupService, localizationService) {
        this.popupService = popupService;
        this.localizationService = localizationService;
    }
    get active() {
        return this.popupRef !== null;
    }
    show(e) {
        const align = e.anchor.align;
        const offset = this.position(e.anchor.point);
        this.style = e.style;
        if (!this.popupRef) {
            this.popupRef = this.popupService.open(Object.assign({
                offset: offset,
                popupAlign: align,
                animate: this.animate,
                content: this.templateRef,
                collision: COLLISION,
                positionMode: POSITION_MODE
            }, this.popupSettings));
            if (this.localizationService.rtl) {
                this.popupRef.popupElement.setAttribute('dir', 'rtl');
            }
            this.onInit();
        }
        else {
            const popup = this.popupRef.popup.instance;
            popup.offset = offset;
            popup.popupAlign = align;
        }
    }
    onInit() {
        /* noop */
    }
    hide() {
        if (this.popupRef) {
            this.popupRef.close();
            this.popupRef = null;
        }
    }
    ngOnDestroy() {
        this.hide();
    }
    position(offset) {
        if (!this.popupSettings || !this.popupSettings.appendTo) {
            return offset;
        }
        const appendTo = this.popupSettings.appendTo.element.nativeElement;
        const bbox = appendTo.getBoundingClientRect();
        const { scrollLeft, scrollTop } = this.scrollOffset(appendTo);
        return {
            left: offset.left - bbox.left - scrollLeft,
            top: offset.top - bbox.top - scrollTop
        };
    }
    scrollOffset(element) {
        if (!element) {
            return null;
        }
        let scrollLeft = element.scrollLeft;
        let scrollTop = element.scrollTop;
        let parent = element.parentElement;
        while (parent) {
            scrollLeft += parent.scrollLeft;
            scrollTop += parent.scrollTop;
            parent = parent.parentElement;
        }
        return { scrollLeft, scrollTop };
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: BaseTooltip, deps: [{ token: i1.PopupService }, { token: i1$1.LocalizationService }], target: i0.ɵɵFactoryTarget.Directive });
    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.2.12", type: BaseTooltip, inputs: { popupSettings: "popupSettings" }, ngImport: i0 });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: BaseTooltip, decorators: [{
            type: Directive
        }], ctorParameters: function () { return [{ type: i1.PopupService }, { type: i1$1.LocalizationService }]; }, propDecorators: { popupSettings: [{
                type: Input
            }] } });

/**
 * @hidden
 */
function bodyFactory() {
    if (isDocumentAvailable()) {
        return new ElementRef(document.body);
    }
}

/**
 * @hidden
 */
class CrosshairTooltipComponent extends BaseTooltip {
    renderer;
    templateRef;
    key;
    value;
    animate = false;
    constructor(popupService, localizationService, renderer) {
        super(popupService, localizationService);
        this.renderer = renderer;
    }
    onInit() {
        if (this.popupRef?.popupElement) {
            this.renderer.addClass(this.popupRef.popupElement, 'k-chart-tooltip-wrapper');
        }
    }
    show(e) {
        super.show(e);
        this.value = e.value;
        this.popupRef.popup.changeDetectorRef.detectChanges();
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: CrosshairTooltipComponent, deps: [{ token: i1.PopupService }, { token: i1$1.LocalizationService }, { token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: CrosshairTooltipComponent, isStandalone: true, selector: "kendo-chart-crosshair-tooltip", inputs: { key: "key" }, providers: [PopupService, {
                provide: POPUP_CONTAINER,
                useFactory: bodyFactory
            }], viewQueries: [{ propertyName: "templateRef", first: true, predicate: ["content"], descendants: true, static: true }], usesInheritance: true, ngImport: i0, template: `
        <ng-template #content>
            <div class="k-chart-tooltip k-chart-crosshair-tooltip" [ngStyle]="style">
                {{ value }}
            </div>
        </ng-template>
    `, isInline: true, dependencies: [{ kind: "directive", type: NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }] });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: CrosshairTooltipComponent, decorators: [{
            type: Component,
            args: [{
                    providers: [PopupService, {
                            provide: POPUP_CONTAINER,
                            useFactory: bodyFactory
                        }],
                    selector: 'kendo-chart-crosshair-tooltip',
                    template: `
        <ng-template #content>
            <div class="k-chart-tooltip k-chart-crosshair-tooltip" [ngStyle]="style">
                {{ value }}
            </div>
        </ng-template>
    `,
                    standalone: true,
                    imports: [NgStyle]
                }]
        }], ctorParameters: function () { return [{ type: i1.PopupService }, { type: i1$1.LocalizationService }, { type: i0.Renderer2 }]; }, propDecorators: { templateRef: [{
                type: ViewChild,
                args: ['content', { static: true }]
            }], key: [{
                type: Input
            }] } });

const AXES = ["categoryAxis", "valueAxis", "xAxis", "yAxis"];
/**
 * @hidden
 */
class CrosshairTooltipsContainerComponent {
    popupSettings;
    crossahairTooltipComponents;
    tooltipKeys = [];
    tooltipsMap = {};
    show(e) {
        const tooltipComponents = this.crossahairTooltipComponents.toArray();
        const axisName = e.axisName;
        const axisIndex = e.axisIndex;
        for (let idx = 0; idx < tooltipComponents.length; idx++) {
            if (tooltipComponents[idx].key === axisName + axisIndex) {
                tooltipComponents[idx].show(e);
                break;
            }
        }
    }
    hide() {
        const tooltipComponents = this.crossahairTooltipComponents.toArray();
        for (let idx = 0; idx < tooltipComponents.length; idx++) {
            tooltipComponents[idx].hide();
        }
    }
    get active() {
        return this.tooltipKeys.length > 0;
    }
    createCrosshairTooltips(options) {
        const newMap = this.mapTooltips(options);
        const map = this.tooltipsMap;
        for (const key in map) {
            if (!newMap[key]) {
                this.removeTooltip(key);
                delete map[key];
            }
        }
        for (const key in newMap) {
            if (!map[key] && key !== 'constructor' && key !== '__proto__' && key !== 'prototype') {
                map[key] = newMap[key];
                this.tooltipKeys.push(key);
            }
        }
    }
    removeTooltip(key) {
        const keys = this.tooltipKeys;
        for (let idx = 0; idx < keys.length; idx++) {
            if (keys[idx] === key) {
                keys.splice(idx, 1);
                break;
            }
        }
    }
    mapTooltips(options) {
        const map = {};
        for (let idx = 0; idx < AXES.length; idx++) {
            const tooltips = this.axesCrosshairTooltipOptions(options, AXES[idx]);
            for (let tooltipIdx = 0; tooltipIdx < tooltips.length; tooltipIdx++) {
                const tooltip = tooltips[tooltipIdx];
                map[tooltip.name + tooltip.index] = tooltip;
            }
        }
        return map;
    }
    axesCrosshairTooltipOptions(options, name) {
        const result = [];
        if (options[name]) {
            const axes = [].concat(options[name]);
            for (let idx = 0; idx < axes.length; idx++) {
                const tooltip = (axes[idx].crosshair || {}).tooltip;
                if (tooltip && tooltip.visible) {
                    result.push({
                        index: idx,
                        name: name
                    });
                }
            }
        }
        return result;
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: CrosshairTooltipsContainerComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: CrosshairTooltipsContainerComponent, isStandalone: true, selector: "kendo-chart-crosshair-tooltips-container", inputs: { popupSettings: "popupSettings" }, viewQueries: [{ propertyName: "crossahairTooltipComponents", predicate: CrosshairTooltipComponent, descendants: true }], ngImport: i0, template: `
        <kendo-chart-crosshair-tooltip *ngFor="let key of tooltipKeys" [key]="key" [popupSettings]="popupSettings">
        </kendo-chart-crosshair-tooltip>
    `, isInline: true, dependencies: [{ kind: "directive", type: NgFor, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "component", type: CrosshairTooltipComponent, selector: "kendo-chart-crosshair-tooltip", inputs: ["key"] }] });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: CrosshairTooltipsContainerComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'kendo-chart-crosshair-tooltips-container',
                    template: `
        <kendo-chart-crosshair-tooltip *ngFor="let key of tooltipKeys" [key]="key" [popupSettings]="popupSettings">
        </kendo-chart-crosshair-tooltip>
    `,
                    standalone: true,
                    imports: [NgFor, CrosshairTooltipComponent]
                }]
        }], propDecorators: { popupSettings: [{
                type: Input
            }], crossahairTooltipComponents: [{
                type: ViewChildren,
                args: [CrosshairTooltipComponent]
            }] } });

/**
 * Represents a directive that selects a [template](link:site.data.urls.angular['templatesyntax'])
 * within the `<kendo-chart-tooltip>` component for the
 * [series tooltip](slug:tooltips_chart_charts#toc-specifying-a-template).
 * The following context fields are frequently utilized:
 * - `let-category="category"`&mdash;The category name.
 * - `let-dataItem="dataItem"`&mdash;The original data item used to construct the point. It will be `null` if binding to an array.
 * - `let-series="series"`&mdash;The data series.
 * - `let-value="value"`&mdash;The value of the point (either a number or an object).
 * For the full list of available fields, refer to the [`TooltipTemplatePoint`](slug:api_charts_tooltiptemplatepoint).
 *
 * @example
 * ```ts
 * import { Component } from '@angular/core';
 *
 * _@Component({
 *   selector: 'my-app',
 *   template: `
 *     <kendo-chart>
 *       <kendo-chart-tooltip>
 *          <ng-template kendoChartSeriesTooltipTemplate let-value="value">
 *             Value is {{value}}
 *           </ng-template>
 *       </kendo-chart-tooltip>
 *       <kendo-chart-series>
 *         <kendo-chart-series-item [data]="[1, 2, 3]">
 *         </kendo-chart-series-item>
 *       </kendo-chart-series>
 *     </kendo-chart>
 *   `
 * })
 * class AppComponent {
 * }
 *
 * ```
 */
class SeriesTooltipTemplateDirective {
    templateRef;
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: SeriesTooltipTemplateDirective, deps: [{ token: i0.TemplateRef, optional: true }], target: i0.ɵɵFactoryTarget.Directive });
    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.2.12", type: SeriesTooltipTemplateDirective, isStandalone: true, selector: "[kendoChartSeriesTooltipTemplate]", ngImport: i0 });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: SeriesTooltipTemplateDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[kendoChartSeriesTooltipTemplate]',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: i0.TemplateRef, decorators: [{
                    type: Optional
                }] }]; } });

/**
 * Represents a directive that selects a [template](link:site.data.urls.angular['templatesyntax'])
 * within the `<kendo-chart-tooltip>` component for the
 * [shared series tooltip](slug:tooltips_chart_charts#toc-shared-tooltip-customization).
 * The available fields in the template context are:
 * - `let-points="points"`&mdash;An array of the [`TooltipTemplatePoints`](slug:api_charts_tooltiptemplatepoint) category.
 * - `let-category="category"`&mdash;The category name.
 * - `let-categoryText="categoryText"`&mdash;The category name as text.
 * - `let-nameColumn="nameColumn"`&mdash;Returns a Boolean [`value`](slug:api_charts_seriesitemcomponent#toc-name) indicating whether the `name` property of the `SeriesItemComponent` is defined.
 * - `let-colorMarker="colorMarker"`&mdash;Returns a Boolean value indicating whether one or more series colors are specified in the Chart. If the Chart contains only one `SeriesItemComponent`, the context field will return `false`.
 * - `let-colSpan="colSpan"`&mdash;Specifies the number of columns covered by the tooltip. The default value is `1` and increases by `1` if `nameColumn` and `colorMarker` are set to `true`.
 *
 * @example
 * ```ts
 * import { Component } from '@angular/core';
 *
 * _@Component({
 *   selector: 'my-app',
 *   template: `
 *     <kendo-chart>
 *       <kendo-chart-tooltip [shared]="true">
 *         <ng-template kendoChartSharedTooltipTemplate let-category="category" let-points="points">
 *             <div> {{ category }} </div>
 *             <div *ngFor="let point of points">
 *                 {{ point.series.name }} : {{ point.value }}
 *             </div>
 *         </ng-template>
 *       </kendo-chart-tooltip>
 *       <kendo-chart-category-axis>
 *         <kendo-chart-category-axis-item [categories]="['A', 'B', 'C']">
 *         </kendo-chart-category-axis-item>
 *       </kendo-chart-category-axis>
 *       <kendo-chart-series>
 *         <kendo-chart-series-item name="A" [data]="[1, 2, 3]">
 *         </kendo-chart-series-item>
 *         <kendo-chart-series-item name="B" [data]="[1, 2, 3]">
 *         </kendo-chart-series-item>
 *       </kendo-chart-series>
 *     </kendo-chart>
 *   `
 * })
 * class AppComponent {
 * }
 *
 * ```
 */
class SharedTooltipTemplateDirective {
    templateRef;
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: SharedTooltipTemplateDirective, deps: [{ token: i0.TemplateRef, optional: true }], target: i0.ɵɵFactoryTarget.Directive });
    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.2.12", type: SharedTooltipTemplateDirective, isStandalone: true, selector: "[kendoChartSharedTooltipTemplate]", ngImport: i0 });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: SharedTooltipTemplateDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[kendoChartSharedTooltipTemplate]',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: i0.TemplateRef, decorators: [{
                    type: Optional
                }] }]; } });

/**
 * Represents the point that is passed to the tooltip template.
 */
class TooltipTemplatePoint {
    /**
     * Specifies the point value.
     */
    value;
    /**
     * Specifies the point category. Available only for the Categorical series.
     */
    category;
    /**
     * Specifies the point category index. Available only for the Categorical series.
     */
    categoryIndex;
    /**
     * Specifies the point series options.
     */
    series;
    /**
     * Specifies the point `dataItem`.
     */
    dataItem;
    /**
     * Specifies the point value represented as a percentage value. Available only for the Donut, Pie, and 100% Stacked charts.
     */
    percentage;
    /**
     * Specifies the sum of point values since the last `"runningTotal"` summary point. Available for the Waterfall series.
     */
    runningTotal;
    /**
     * Specifies the sum of all previous series values. Available for the Waterfall series.
     */
    total;
    /**
     * Specifies the low value of the point error bar. Available for the Categorical series with error bars.
     */
    low;
    /**
     * Specifies the high value of the point error bar. Available for the Categorical series with error bars.
     */
    high;
    /**
     * Specifies the x low value of the point error bar. Available for the Scatter series with error bars.
     */
    xLow;
    /**
     * Specifies the x high value of the point error bar. Available for the Scatter series with error bars.
     */
    xHigh;
    /**
     * Specifies the y low value of the point error bar. Available for the Scatter series with error bars.
     */
    yLow;
    /**
     * Specifies the y high value of the point error bar. Available for the Scatter series with error bars.
     */
    yHigh;
    /**
     * @hidden
     */
    template;
    /**
     * @hidden
     */
    point;
    /**
     * @hidden
     */
    format;
    /**
     * @hidden
     */
    constructor(point, format, template) {
        this.value = point.value;
        this.category = point.category;
        this.categoryIndex = point.categoryIx;
        this.series = point.series;
        this.dataItem = point.dataItem;
        this.percentage = point.percentage;
        this.runningTotal = point.runningTotal;
        this.total = point.total;
        this.low = point.low;
        this.high = point.high;
        this.xLow = point.xLow;
        this.xHigh = point.xHigh;
        this.yLow = point.yLow;
        this.yHigh = point.yHigh;
        this.template = template;
        this.point = point;
        this.format = format;
    }
    /**
     * @hidden
     */
    get formattedValue() {
        return this.format ? this.point.formatValue(this.format) : String(this.value);
    }
}

/**
 * @hidden
 */
function hasParent(element, parent) {
    let current = element;
    while (current && current !== parent) {
        current = current.parentNode;
    }
    return current ? true : false;
}

/**
 * @hidden
 */
class TooltipTemplateService {
    seriesTemplates;
    template;
    sharedTemplate;
    setTemplate(template) {
        this.template = template;
    }
    getTemplate(seriesIndex) {
        if (this.seriesTemplates && this.seriesTemplates[seriesIndex]) {
            return this.seriesTemplates[seriesIndex];
        }
        return this.template;
    }
    setSeriesTemplates(seriesTemplates) {
        this.seriesTemplates = seriesTemplates;
    }
    setSharedTemplate(sharedTemplate) {
        this.sharedTemplate = sharedTemplate;
    }
    getSharedTemplate() {
        return this.sharedTemplate;
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TooltipTemplateService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TooltipTemplateService });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TooltipTemplateService, decorators: [{
            type: Injectable
        }] });

const SHARED_TOOLTIP_CLASS = 'k-chart-shared-tooltip';
const TOOLTIP_CLASS = "k-chart-tooltip";
/**
 * @hidden
 */
class TooltipPopupComponent extends BaseTooltip {
    popupService;
    templateService;
    localizationService;
    ngZone;
    seriesTooltipTemplateRef;
    seriesSharedTooltipTemplateRef;
    seriesTooltipContext = {};
    seriesSharedTooltipContext = {};
    shared;
    defaultSeriesTooltipTemplate;
    defaultSharedTooltipTemplate;
    templateRef;
    animate = true;
    classNames;
    wrapperClass = 'k-chart-tooltip-wrapper';
    leave = new EventEmitter();
    popupClasses = {};
    mouseleaveSubscription;
    constructor(popupService, templateService, localizationService, ngZone) {
        super(popupService, localizationService);
        this.popupService = popupService;
        this.templateService = templateService;
        this.localizationService = localizationService;
        this.ngZone = ngZone;
    }
    show(e) {
        this.shared = e.shared;
        this.popupClasses = Object.assign({
            [SHARED_TOOLTIP_CLASS]: e.shared,
            [TOOLTIP_CLASS]: true,
            [e.className]: !!e.className
        }, this.classNames);
        if (!e.shared) {
            this.seriesTooltipContext = new TooltipTemplatePoint(e.point, e.format);
            this.seriesTooltipTemplateRef = this.pointTemplateRef(e.point);
        }
        else {
            this.seriesSharedTooltipTemplateRef = this.templateService.getSharedTemplate()
                || this.defaultSharedTooltipTemplate.templateRef;
            this.seriesSharedTooltipContext = this.sharedTemplateContext(e);
        }
        super.show(e);
    }
    containsElement(element) {
        if (this.popupRef) {
            return hasParent(element, this.popupRef.popupElement);
        }
    }
    sharedTemplateContext(e) {
        const points = e.points;
        const nameColumn = points.filter((point) => typeof point.series.name !== 'undefined').length > 0;
        const colorMarker = e.series.length > 1;
        let colspan = 1;
        if (nameColumn) {
            colspan++;
        }
        if (colorMarker) {
            colspan++;
        }
        return {
            category: e.category,
            categoryText: e.categoryText,
            colorMarker: colorMarker,
            colspan: colspan,
            nameColumn: nameColumn,
            points: this.wrapPoints(e.points, e.format)
        };
    }
    pointTemplateRef(point) {
        return this.templateService.getTemplate(point.series.index) || this.defaultSeriesTooltipTemplate.templateRef;
    }
    wrapPoints(points, format) {
        const result = [];
        for (let idx = 0; idx < points.length; idx++) {
            const point = points[idx];
            const template = this.pointTemplateRef(point);
            const pointFormat = ((point.options || {}).tooltip || {}).format || format;
            result.push(new TooltipTemplatePoint(point, pointFormat, template));
        }
        return result;
    }
    onInit() {
        this.ngZone.runOutsideAngular(() => {
            this.mouseleaveSubscription = this.popupRef.popupElement.addEventListener('mouseleave', (args) => {
                this.leave.emit(args);
            });
        });
        this.popupRef.popupElement.className += ` ${this.wrapperClass}`;
    }
    hide() {
        if (this.mouseleaveSubscription) {
            this.mouseleaveSubscription();
            this.mouseleaveSubscription = null;
        }
        super.hide();
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TooltipPopupComponent, deps: [{ token: i1.PopupService }, { token: TooltipTemplateService }, { token: i1$1.LocalizationService }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: TooltipPopupComponent, isStandalone: true, selector: "kendo-chart-tooltip-popup", inputs: { animate: "animate", classNames: "classNames", wrapperClass: "wrapperClass" }, outputs: { leave: "leave" }, providers: [PopupService, {
                provide: POPUP_CONTAINER,
                useFactory: bodyFactory
            }], viewQueries: [{ propertyName: "defaultSeriesTooltipTemplate", first: true, predicate: SeriesTooltipTemplateDirective, descendants: true }, { propertyName: "defaultSharedTooltipTemplate", first: true, predicate: SharedTooltipTemplateDirective, descendants: true }, { propertyName: "templateRef", first: true, predicate: ["content"], descendants: true, static: true }], usesInheritance: true, ngImport: i0, template: `
    <ng-template #content>
        <div [ngClass]="popupClasses" [ngStyle]="style">
          <ng-template [ngTemplateOutlet]="seriesTooltipTemplateRef" *ngIf="!shared"
                    [ngTemplateOutletContext]="seriesTooltipContext">
          </ng-template>
          <ng-template [ngTemplateOutlet]="seriesSharedTooltipTemplateRef" *ngIf="shared"
                    [ngTemplateOutletContext]="seriesSharedTooltipContext">
          </ng-template>
        </div>
    </ng-template>

    <ng-template kendoChartSeriesTooltipTemplate let-formattedValue="formattedValue">
        <span [innerHTML]="formattedValue"></span>
    </ng-template>
    <ng-template kendoChartSharedTooltipTemplate let-points="points" let-categoryText="categoryText" let-colspan="colspan" let-colorMarker="colorMarker" let-nameColumn="nameColumn" >
        <table>
            <tr><th [attr.colspan]='colspan'> {{ categoryText }} </th></tr>
            <tr *ngFor="let point of points">
                <td *ngIf="colorMarker"><span class='k-chart-shared-tooltip-marker' [style.background-color]='point.series.color'></span></td>
                <td *ngIf="nameColumn">
                    <ng-container *ngIf="point.series.name !== undefined">{{ point.series.name }}</ng-container>
                    <ng-container *ngIf="point.series.name === undefined">&nbsp;</ng-container>
                </td>
                <td>
                  <ng-template [ngTemplateOutlet]="point.template"
                            [ngTemplateOutletContext]="point">
                  </ng-template>
                </td>
            </tr>
        </table>
    </ng-template>
    `, isInline: true, dependencies: [{ kind: "directive", type: NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }, { kind: "directive", type: NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "directive", type: SeriesTooltipTemplateDirective, selector: "[kendoChartSeriesTooltipTemplate]" }, { kind: "directive", type: SharedTooltipTemplateDirective, selector: "[kendoChartSharedTooltipTemplate]" }, { kind: "directive", type: NgFor, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }] });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TooltipPopupComponent, decorators: [{
            type: Component,
            args: [{
                    providers: [PopupService, {
                            provide: POPUP_CONTAINER,
                            useFactory: bodyFactory
                        }],
                    selector: 'kendo-chart-tooltip-popup',
                    template: `
    <ng-template #content>
        <div [ngClass]="popupClasses" [ngStyle]="style">
          <ng-template [ngTemplateOutlet]="seriesTooltipTemplateRef" *ngIf="!shared"
                    [ngTemplateOutletContext]="seriesTooltipContext">
          </ng-template>
          <ng-template [ngTemplateOutlet]="seriesSharedTooltipTemplateRef" *ngIf="shared"
                    [ngTemplateOutletContext]="seriesSharedTooltipContext">
          </ng-template>
        </div>
    </ng-template>

    <ng-template kendoChartSeriesTooltipTemplate let-formattedValue="formattedValue">
        <span [innerHTML]="formattedValue"></span>
    </ng-template>
    <ng-template kendoChartSharedTooltipTemplate let-points="points" let-categoryText="categoryText" let-colspan="colspan" let-colorMarker="colorMarker" let-nameColumn="nameColumn" >
        <table>
            <tr><th [attr.colspan]='colspan'> {{ categoryText }} </th></tr>
            <tr *ngFor="let point of points">
                <td *ngIf="colorMarker"><span class='k-chart-shared-tooltip-marker' [style.background-color]='point.series.color'></span></td>
                <td *ngIf="nameColumn">
                    <ng-container *ngIf="point.series.name !== undefined">{{ point.series.name }}</ng-container>
                    <ng-container *ngIf="point.series.name === undefined">&nbsp;</ng-container>
                </td>
                <td>
                  <ng-template [ngTemplateOutlet]="point.template"
                            [ngTemplateOutletContext]="point">
                  </ng-template>
                </td>
            </tr>
        </table>
    </ng-template>
    `,
                    standalone: true,
                    imports: [NgClass, NgStyle, NgIf, NgTemplateOutlet, SeriesTooltipTemplateDirective, SharedTooltipTemplateDirective, NgFor]
                }]
        }], ctorParameters: function () { return [{ type: i1.PopupService }, { type: TooltipTemplateService }, { type: i1$1.LocalizationService }, { type: i0.NgZone }]; }, propDecorators: { defaultSeriesTooltipTemplate: [{
                type: ViewChild,
                args: [SeriesTooltipTemplateDirective, { static: false }]
            }], defaultSharedTooltipTemplate: [{
                type: ViewChild,
                args: [SharedTooltipTemplateDirective, { static: false }]
            }], templateRef: [{
                type: ViewChild,
                args: ['content', { static: true }]
            }], animate: [{
                type: Input
            }], classNames: [{
                type: Input
            }], wrapperClass: [{
                type: Input
            }], leave: [{
                type: Output
            }] } });

/**
 * @hidden
 */
class ChartInstanceObserver extends InstanceObserver {
    handlerMap = {
        hideTooltip: 'onHideTooltip',
        legendItemClick: 'onLegendItemClick',
        render: 'onRender',
        showTooltip: 'onShowTooltip',
        init: 'onInit'
    };
    constructor(instance) {
        super(instance);
    }
}

/**
 * Fallback theme in case the Theme Service fails
 * to read the variables from the main theme.
 *
 * @hidden
 */
const chartDefaultTheme = () => Object.assign({}, chartBaseTheme(), {
    axisDefaults: {
        crosshair: {
            color: 'rgba(0, 0, 0, 0.5)'
        },
        labels: {
            color: 'rgb(101, 101, 101)',
            font: '12px serif'
        },
        line: {
            color: 'rgba(0, 0, 0, 0.08)'
        },
        majorGridLines: {
            color: 'rgba(0, 0, 0, 0.08)'
        },
        minorGridLines: {
            color: 'rgba(0, 0, 0, 0.04)'
        },
        notes: {
            icon: {
                background: 'rgba(0, 0, 0, 0.5)',
                border: {
                    color: 'rgba(0, 0, 0, 0.5)'
                }
            },
            line: {
                color: 'rgba(0, 0, 0, 0.5)'
            },
            label: {
                font: '14px serif'
            }
        },
        title: {
            color: 'rgb(101, 101, 101)',
            font: '14px serif'
        }
    },
    chartArea: {
        background: 'rgb(255, 255, 255)'
    },
    legend: {
        inactiveItems: {
            labels: {
                color: 'rgba(102, 102, 102, 0.5)'
            },
            markers: {
                color: 'rgba(102, 102, 102, 0.5)'
            }
        },
        labels: {
            color: 'rgb(101, 101, 101)',
            font: '14px serif'
        }
    },
    seriesDefaults: {
        boxPlot: {
            downColor: 'rgba(0, 0, 0, 0.08)',
            mean: {
                color: 'rgb(246, 246, 246)'
            },
            median: {
                color: 'rgb(246, 246, 246)'
            },
            whiskers: {
                color: 'rgb(255, 99, 88)'
            }
        },
        bullet: {
            target: {
                color: 'rgb(101, 101, 101)'
            }
        },
        candlestick: {
            downColor: 'rgb(101, 101, 101)',
            line: {
                color: 'rgb(101, 101, 101)'
            }
        },
        errorBars: {
            color: 'rgba(0, 0, 0, 0.5)'
        },
        horizontalWaterfall: {
            line: {
                color: 'rgba(0, 0, 0, 0.08)'
            }
        },
        icon: {
            border: {
                color: 'rgba(0, 0, 0, 0.08)'
            }
        },
        labels: {
            background: 'rgb(255, 255, 255)',
            color: 'rgb(101, 101, 101)',
            opacity: 0.8,
            font: '12px serif'
        },
        notes: {
            icon: {
                background: 'rgba(0, 0, 0, 0.5)',
                border: {
                    color: 'rgba(0, 0, 0, 0.5)'
                }
            },
            line: {
                color: 'rgba(0, 0, 0, 0.5)'
            },
            label: {
                font: '14px serif'
            }
        },
        overlay: {
            gradient: "none"
        },
        verticalBoxPlot: {
            downColor: 'rgba(0, 0, 0, 0.08)',
            mean: {
                color: 'rgb(246, 246, 246)'
            },
            median: {
                color: 'rgb(246, 246, 246)'
            },
            whiskers: {
                color: 'rgb(255, 99, 88)'
            }
        },
        verticalBullet: {
            target: {
                color: 'rgb(101, 101, 101)'
            }
        },
        waterfall: {
            line: {
                color: 'rgba(0, 0, 0, 0.08)'
            }
        },
        area: {
            opacity: 0.8
        }
    },
    title: {
        color: 'rgb(101, 101, 101)',
        font: '16px serif'
    },
    seriesColors: [
        'rgb(255, 99, 88)',
        'rgb(255, 210, 70)',
        'rgb(120, 210, 55)',
        'rgb(40, 180, 200)',
        'rgb(45, 115, 245)',
        'rgb(170, 70, 190)'
    ]
});

/**
 * @hidden
 */
class ThemeService extends ConfigurationService {
    loaded = false;
    element;
    loadTheme() {
        if (this.loaded || !isDocumentAvailable()) {
            return;
        }
        this.createElement();
        this.readTheme();
        this.destroyElement();
        this.loaded = true;
        this.next();
    }
    reset() {
        this.store = {};
        this.loaded = false;
        this.loadTheme();
    }
    readTheme() {
        let theme = {};
        try {
            theme = chartTheme(this.element);
        }
        catch {
            theme = {};
        }
        const available = Boolean(theme.chartArea && theme.chartArea.background);
        const result = available ? deepExtend(chartBaseTheme(), theme) : chartDefaultTheme();
        this.push(result);
    }
    createElement() {
        const container = this.element = document.createElement('div');
        container.className = 'k-chart';
        container.style.display = 'none';
        document.body.appendChild(container);
    }
    destroyElement() {
        if (this.element) {
            document.body.removeChild(this.element);
            this.element = undefined;
        }
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: ThemeService, deps: null, target: i0.ɵɵFactoryTarget.Injectable });
    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: ThemeService, providedIn: 'root' });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: ThemeService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }] });

/**
 * @hidden
 */
class BaseEvent {
    /**
     * Specifies the `ChartComponent` that triggered the event.
     */
    sender;
    /**
     * @hidden
     */
    constructor(sender) {
        this.sender = sender;
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: BaseEvent, deps: "invalid", target: i0.ɵɵFactoryTarget.Directive });
    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.2.12", type: BaseEvent, ngImport: i0 });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: BaseEvent, decorators: [{
            type: Directive
        }], ctorParameters: function () { return [{ type: undefined }]; } });

/**
 * Represents the arguments for the `axisLabelClick` event of the Chart component ([see example](slug:events_chart)).
 */
class AxisLabelClickEvent extends BaseEvent {
    /**
     * Specifies the axis options to which the label belongs.
     */
    axis;
    /**
     * Specifies the original data item that generates the label.
     * Available only for category axes that use the `categoryField` of the series.
     */
    dataItem;
    /**
     * Specifies the sequential or category index of the label.
     */
    index;
    /**
     * Specifies the text of the label.
     */
    text;
    /**
     * Specifies the value or category name of the label.
     */
    value;
    /**
     * @hidden
     */
    constructor(e, sender) {
        super(sender);
        this.axis = e.axis;
        this.dataItem = e.dataItem;
        this.index = e.index;
        this.text = e.text;
        this.value = e.value;
    }
}

/**
 * @hidden
 */
class PreventableEvent extends BaseEvent {
    prevented = false;
    /**
     * Prevents the default action for a specified event.
     * The source component suppresses the built-in behavior that follows the event.
     */
    preventDefault() {
        this.prevented = true;
    }
    /**
     * Returns `true` if the event was prevented by any of its subscribers.
     *
     * @returns `true` if the default action was prevented.
     * Otherwise, returns `false`.
     */
    isDefaultPrevented() {
        return this.prevented;
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: PreventableEvent, deps: null, target: i0.ɵɵFactoryTarget.Directive });
    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.2.12", type: PreventableEvent, usesInheritance: true, ngImport: i0 });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: PreventableEvent, decorators: [{
            type: Directive
        }] });

/**
 * Represents the arguments for the `drag` event of the Chart component ([see example](slug:panzoom_chart_charts#toc-pan-and-zoom-events)).
 */
class DragEvent extends PreventableEvent {
    /**
     * Specifies a dictionary that contains the range of named axes.
     * Use the axis name as a key to access the minimum and maximum values.
     */
    axisRanges;
    /**
     * Specifies the original user event that triggered the drag action.
     */
    originalEvent;
    /**
     * @hidden
     */
    constructor(e, sender) {
        super(sender);
        this.axisRanges = e.axisRanges;
        this.originalEvent = e.originalEvent;
    }
}

/**
 * Represents the arguments for the `dragEnd` event of the Chart component ([see example](slug:panzoom_chart_charts#toc-pan-and-zoom-events)).
 */
class DragEndEvent extends BaseEvent {
    /**
     * Specifies a dictionary that contains the range of named axes.
     * Use the axis name as a key to access the minimum and maximum values.
     */
    axisRanges;
    /**
     * Specifies the original user event that triggered the drag action.
     */
    originalEvent;
    /**
     * @hidden
     */
    constructor(e, sender) {
        super(sender);
        this.axisRanges = e.axisRanges;
        this.originalEvent = e.originalEvent;
    }
}

/**
 * Represents the arguments for the `dragStart` event of the Chart component ([see example](slug:panzoom_chart_charts#toc-pan-and-zoom-events)).
 */
class DragStartEvent extends PreventableEvent {
    /**
     * Specifies a dictionary that contains the range of named axes.
     * Use the axis name as a key to access the minimum and maximum values.
     */
    axisRanges;
    /**
     * Specifies the original user event that triggered the drag action.
     */
    originalEvent;
    /**
     * @hidden
     */
    constructor(e, sender) {
        super(sender);
        this.axisRanges = e.axisRanges;
        this.originalEvent = e.originalEvent;
    }
}

/**
 * @hidden
 */
class LegendEvent extends PreventableEvent {
    /**
     * Specifies an object that contains the series options.
     */
    series;
    /**
     * Specifies the index of the series in the parent Chart.
     */
    seriesIndex;
    /**
     * Specifies the point index in the series.
     * Applicable only for Pie, Donut, Funnel, and Pyramid series.
     */
    pointIndex;
    /**
     * Specifies the text of the legend item.
     */
    text;
    /**
     * @hidden
     */
    constructor(e, sender) {
        super(sender);
        this.series = e.series;
        this.seriesIndex = e.seriesIndex;
        this.pointIndex = e.pointIndex;
        this.text = e.text;
    }
}

/**
 * Represents the the arguments for the `legendItemHover` event of the Chart component ([see example](slug:events_chart)).
 */
class LegendItemHoverEvent extends LegendEvent {
    /**
     * Prevents the series highlight from being shown when you hover over the legend item.
     */
    preventDefault() {
        super.preventDefault();
    }
}

/* eslint-disable no-empty */
/**
 * Represents the arguments for the `legendItemLeave` event of the Chart component.
 */
class LegendItemLeaveEvent extends LegendEvent {
    /**
     * @hidden
     */
    preventDefault() {
        /* noop */
    }
    /**
     * @hidden
     */
    isDefaultPrevented() {
        return false;
    }
}

/**
 * @hidden
 */
class NoteEvent extends BaseEvent {
    /**
     * Specifies the data point category.
     * Available only for Categorical charts such as Bar, Line, and Area.
     */
    category;
    /**
     * Specifies the data item of the point note.
     */
    dataItem;
    /**
     * Specifies an object containing the note series options.
     */
    series;
    /**
     * Specifies the note value.
     */
    value;
    /**
     * Specifies the note visual element.
     */
    visual;
    /**
     * @hidden
     */
    constructor(e, sender) {
        super(sender);
        this.category = e.category;
        this.dataItem = e.dataItem;
        this.series = e.series;
        this.value = e.value;
        this.visual = e.visual;
    }
}

/**
 * Represents the arguments for the `noteClick` event of the Chart component.
 */
class NoteClickEvent extends NoteEvent {
}

/**
 * Represents the arguments for the `noteHover` event of the Chart component.
 */
class NoteHoverEvent extends NoteEvent {
}

/**
 * Represents the arguments for the `noteLeave` event of the Chart component.
 */
class NoteLeaveEvent extends NoteEvent {
}

/**
 * Represents the arguments for the `paneRender` event of the Chart component.
 */
class PaneRenderEvent extends BaseEvent {
    /**
     * Specifies the chart pane.
     */
    pane;
    /**
     * Specifies the index of the pane.
     */
    index;
    /**
     * Specifies the name of the pane.
     */
    name;
    /**
     * @hidden
     */
    constructor(args, sender) {
        super(sender);
        Object.assign(this, args);
    }
}

/**
 * Represents the arguments for the `plotAreaClick` event of the Chart component ([see example](slug:events_chart)).
 */
class PlotAreaClickEvent extends BaseEvent {
    /**
     * Specifies the data point category.
     * Available only for Categorical charts such as Bar, Line, and Area.
     */
    category;
    /**
     * Specifies the original browser event that triggered the click action.
     */
    originalEvent;
    /**
     * Specifies the data point value.
     * Available only for Categorical charts such as Bar, Line, and Area.
     */
    value;
    /**
     * Specifies the X axis value or array of values for multi-axis charts.
     */
    x;
    /**
     * Specifies the Y axis value or array of values for multi-axis charts.
     */
    y;
    /**
     * @hidden
     */
    constructor(e, sender) {
        super(sender);
        this.category = e.category;
        this.originalEvent = e.originalEvent;
        this.value = e.value;
        this.x = e.x;
        this.y = e.y;
    }
}

/**
 * Represents the arguments for the `plotAreaHover` event of the Chart component ([see example](slug:events_chart)).
 */
class PlotAreaHoverEvent extends BaseEvent {
    /**
     * Specifies the data point category.
     * Available only for Categorical charts such as Bar, Line, and Area.
     */
    category;
    /**
     * Specifies the original browser event that triggered the hover action.
     */
    originalEvent;
    /**
     * Specifies the data point value.
     * Available only for Categorical charts such as Bar, Line, and Area.
     */
    value;
    /**
     * Specifies the X axis value or array of values for multi-axis charts.
     */
    x;
    /**
     * Specifies the Y axis value or array of values for multi-axis charts.
     */
    y;
    /**
     * @hidden
     */
    constructor(e, sender) {
        super(sender);
        this.category = e.category;
        this.originalEvent = e.originalEvent;
        this.value = e.value;
        this.x = e.x;
        this.y = e.y;
    }
}

/**
 * Represents the arguments for the `plotAreaLeave` event of the Chart component.
 */
class PlotAreaLeaveEvent extends BaseEvent {
}

/**
 * Represents the arguments for the `render` event of the Chart component ([see example](slug:events_chart)).
 */
class RenderEvent extends BaseEvent {
    /**
     * @hidden
     */
    constructor(_e, sender) {
        super(sender);
    }
}

/**
 * Represents the arguments for the `select` event of the Chart component.
 */
class SelectEvent extends PreventableEvent {
    /**
     * Specifies the target axis options.
     */
    axis;
    /**
     * Specifies the lower boundary of the selected range.
     */
    from;
    /**
     * Specifies the upper boundary of the selected range.
     */
    to;
    /**
     * @hidden
     */
    constructor(e, sender) {
        super(sender);
        this.axis = e.axis;
        this.from = e.from;
        this.to = e.to;
    }
}

/**
 * Represents the arguments for the `selectEnd` event of the Chart component.
 */
class SelectEndEvent extends BaseEvent {
    /**
     * Specifies the target axis options.
     */
    axis;
    /**
     * Specifies the lower boundary of the selected range.
     */
    from;
    /**
     * Specifies the upper boundary of the selected range.
     */
    to;
    /**
     * @hidden
     */
    constructor(e, sender) {
        super(sender);
        this.axis = e.axis;
        this.from = e.from;
        this.to = e.to;
    }
}

/**
 * Represents the arguments for the `selectStart` event of the Chart component.
 */
class SelectStartEvent extends PreventableEvent {
    /**
     * Specifies the target axis options.
     */
    axis;
    /**
     * Specifies the lower boundary of the selected range.
     */
    from;
    /**
     * Specifies the upper boundary of the selected range.
     */
    to;
    /**
     * @hidden
     */
    constructor(e, sender) {
        super(sender);
        this.axis = e.axis;
        this.from = e.from;
        this.to = e.to;
    }
}

/**
 * Represents the arguments for the `seriesClick` event of the Chart component ([see example](slug:events_chart)).
 */
class SeriesClickEvent extends BaseEvent {
    /**
     * Specifies the data point category.
     */
    category;
    /**
     * Specifies the original data item.
     */
    dataItem;
    /**
     * Specifies the original user event that triggered the click action.
     */
    originalEvent;
    /**
     * Specifies the point value represented as a percentage value.
     * Available only for Donut, Pie, and 100% stacked charts.
     */
    percentage;
    /**
     * Specifies the clicked series point.
     */
    point;
    /**
     * Specifies the clicked point series options.
     */
    series;
    /**
     * Specifies the cumulative point value on the stack.
     * Available only for stackable series.
     */
    stackValue;
    /**
     * Specifies the data point value.
     */
    value;
    /**
     * @hidden
     */
    constructor(e, sender) {
        super(sender);
        this.category = e.category;
        this.dataItem = e.dataItem;
        this.originalEvent = e.originalEvent;
        this.percentage = e.percentage;
        this.point = e.point;
        this.series = e.series;
        this.stackValue = e.stackValue;
        this.value = e.value;
    }
}

/**
 * @hidden
 */
class SeriesEvent extends PreventableEvent {
    /**
     * Specifies the data point category.
     */
    category;
    /**
     * Specifies the original data item.
     */
    dataItem;
    /**
     * Specifies the original user event that triggered the series action.
     */
    originalEvent;
    /**
     * Specifies the point value represented as a percentage value.
     * Available only for Donut, Pie, and 100% stacked charts.
     */
    percentage;
    /**
     * Specifies the hovered series point.
     */
    point;
    /**
     * Specifies the hovered point series options.
     */
    series;
    /**
     * Specifies the cumulative point value on the stack.
     * Available only for stackable series.
     */
    stackValue;
    /**
     * Specifies the data point value.
     */
    value;
    /**
     * @hidden
     */
    constructor(e, sender) {
        super(sender);
        this.category = e.category;
        this.dataItem = e.dataItem;
        this.originalEvent = e.originalEvent;
        this.percentage = e.percentage;
        this.point = e.point;
        this.series = e.series;
        this.stackValue = e.stackValue;
        this.value = e.value;
    }
}

/**
 * Represents the arguments for the `seriesHover` event of the Chart component ([see example](slug:events_chart)).
 */
class SeriesHoverEvent extends SeriesEvent {
}

/**
 * Represents the arguments for the `seriesOver` event of the Chart component.
 */
class SeriesOverEvent extends SeriesEvent {
}

/**
 * Represents the arguments for the `seriesLeave` event of the Chart component.
 */
class SeriesLeaveEvent extends SeriesEvent {
}

/**
 * Represents the arguments for the `zoom` event of the Chart component ([see example](slug:panzoom_chart_charts#toc-pan-and-zoom-events)).
 */
class ZoomEvent extends PreventableEvent {
    /**
     * Specifies a dictionary which contains the range (min and max values) of named axes.
     * The axis name is used as a key.
     *
     * > The dictionary includes only the affected axis ranges.
     * If an axis is locked or its range is not modified, the axis will not be listed.
     */
    axisRanges;
    /**
     * Specifies a number that indicates the zoom amount and direction.
     * A negative value indicates a zoom-in action.
     * A positive value indicates a zoom-out action.
     */
    delta;
    /**
     * Specifies the original user event that triggered the drag action.
     */
    originalEvent;
    /**
     * @hidden
     */
    constructor(e, sender) {
        super(sender);
        this.axisRanges = e.axisRanges;
        this.delta = e.delta;
        this.originalEvent = e.originalEvent;
    }
}

/**
 * Represents the arguments for the `zoomEnd` event of the Chart component ([see example](slug:panzoom_chart_charts#toc-pan-and-zoom-events)).
 */
class ZoomEndEvent extends BaseEvent {
    /**
     * Specifies a dictionary that contains the range of named axes.
     * Use the axis name as a key to access the minimum and maximum values.
     *
     * The dictionary includes only the affected axis ranges.
     * If an axis is locked or its range is not modified, the axis will not be listed.
     */
    axisRanges;
    /**
     * Specifies the original user event that triggered the zoom action.
     */
    originalEvent;
    /**
     * @hidden
     */
    constructor(e, sender) {
        super(sender);
        this.axisRanges = e.axisRanges;
        this.originalEvent = e.originalEvent;
    }
}

/**
 * Represents the arguments for the `zoomStart` event of the Chart component ([see example](slug:panzoom_chart_charts#toc-pan-and-zoom-events)).
 */
class ZoomStartEvent extends PreventableEvent {
    /**
     * Specifies a dictionary that contains the range of named axes.
     * Use the axis name as a key to access the minimum and maximum values.
     */
    axisRanges;
    /**
     * Specifies the original user event that triggered the zoom action.
     */
    originalEvent;
    /**
     * @hidden
     */
    constructor(e, sender) {
        super(sender);
        this.axisRanges = e.axisRanges;
        this.originalEvent = e.originalEvent;
    }
}

const EVENT_MAP$2 = {
    axisLabelClick: AxisLabelClickEvent,
    drag: DragEvent,
    dragEnd: DragEndEvent,
    dragStart: DragStartEvent,
    legendItemHover: LegendItemHoverEvent,
    legendItemLeave: LegendItemLeaveEvent,
    noteClick: NoteClickEvent,
    noteHover: NoteHoverEvent,
    noteLeave: NoteLeaveEvent,
    paneRender: PaneRenderEvent,
    plotAreaClick: PlotAreaClickEvent,
    plotAreaHover: PlotAreaHoverEvent,
    plotAreaLeave: PlotAreaLeaveEvent,
    render: RenderEvent,
    select: SelectEvent,
    selectEnd: SelectEndEvent,
    selectStart: SelectStartEvent,
    seriesClick: SeriesClickEvent,
    seriesHover: SeriesHoverEvent,
    seriesOver: SeriesOverEvent,
    seriesLeave: SeriesLeaveEvent,
    zoom: ZoomEvent,
    zoomEnd: ZoomEndEvent,
    zoomStart: ZoomStartEvent
};
/**
 * @hidden
 */
let InstanceEventService$1 = class InstanceEventService {
    create(name, args, sender) {
        if (EVENT_MAP$2[name]) {
            return new EVENT_MAP$2[name](args, sender);
        }
    }
};

/**
 * Represents the arguments for the `legendItemClick` event of the Chart component ([see example](slug:events_chart)).
 */
class LegendItemClickEvent extends LegendEvent {
    /**
     * Prevents the series visibility from being toggled when you click the legend item.
     */
    preventDefault() {
        super.preventDefault();
    }
}

/**
 * @hidden
 */
const packageMetadata = {
    name: '@progress/kendo-angular-charts',
    productName: 'Kendo UI for Angular',
    productCode: 'KENDOUIANGULAR',
    productCodes: ['KENDOUIANGULAR'],
    publishDate: 1751463236,
    version: '19.2.0',
    licensingDocsUrl: 'https://www.telerik.com/kendo-angular-ui/my-license/'
};

/**
 * @hidden
 */
class CollectionComponent {
    configKey;
    configurationService;
    collectionService;
    children;
    subscription;
    items = [];
    constructor(configKey, configurationService, collectionService) {
        this.configKey = configKey;
        this.configurationService = configurationService;
        this.collectionService = collectionService;
        this.subscription = collectionService.onItemChange$.subscribe(changes => this.processChanges(changes));
    }
    ngOnDestroy() {
        this.subscription.unsubscribe();
    }
    ngAfterContentInit() {
        this.readItems();
        this.children.changes.subscribe(() => this.readItems());
    }
    processChanges(changes) {
        if (!this.children) {
            return;
        }
        const index = this.children.toArray().filter(s => !s.hidden).indexOf(changes.sender);
        if (index < 0) {
            return;
        }
        this.items[index] = changes.options;
        this.change();
    }
    readItems() {
        this.items = this.children.filter(s => !s.hidden).map(s => s.options);
        this.change();
    }
    change() {
        this.configurationService.notify(new Change(this.configKey, this.items.length === 0 ? undefined : this.items));
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: CollectionComponent, deps: "invalid", target: i0.ɵɵFactoryTarget.Directive });
    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.2.12", type: CollectionComponent, ngImport: i0 });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: CollectionComponent, decorators: [{
            type: Directive
        }], ctorParameters: function () { return [{ type: undefined }, { type: ConfigurationService }, { type: CollectionService }]; } });

/**
 * Represents collection of one or more series items ([see example](slug:series_chart_charts)).
 *
 * @example
 * ```html
 * <kendo-chart>
 *   <kendo-chart-series>
 *     <kendo-chart-series-item type="line" [data]="[1, 2, 3]">
 *     </kendo-chart-series-item>
 *   </kendo-chart-series>
 * </kendo-chart>
 * ```
 *
 * @remarks
 * Supported children components are: {@link SeriesItemComponent}.
 */
class SeriesComponent extends CollectionComponent {
    configurationService;
    collectionService;
    tooltipTemplateService;
    viewContainer;
    children;
    constructor(configurationService, collectionService, tooltipTemplateService, viewContainer) {
        super('series', configurationService, collectionService);
        this.configurationService = configurationService;
        this.collectionService = collectionService;
        this.tooltipTemplateService = tooltipTemplateService;
        this.viewContainer = viewContainer;
    }
    ngAfterContentChecked() {
        this.readTooltipTemplates();
    }
    readTooltipTemplates() {
        const templates = this.children.map((item) => item.seriesTooltipTemplateRef);
        this.tooltipTemplateService.setSeriesTemplates(templates);
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: SeriesComponent, deps: [{ token: ConfigurationService }, { token: CollectionService }, { token: TooltipTemplateService }, { token: i0.ViewContainerRef }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: SeriesComponent, isStandalone: true, selector: "kendo-chart-series", providers: [CollectionService], queries: [{ propertyName: "children", predicate: SeriesItemComponent, descendants: true }], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: SeriesComponent, decorators: [{
            type: Component,
            args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [CollectionService],
                    selector: 'kendo-chart-series',
                    template: '',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: ConfigurationService }, { type: CollectionService }, { type: TooltipTemplateService }, { type: i0.ViewContainerRef }]; }, propDecorators: { children: [{
                type: ContentChildren,
                args: [SeriesItemComponent, { descendants: true }]
            }] } });

/**
 * Represents the arguments for the `drilldown` event of the Chart component ([see example](slug:drilldown_chart_charts)).
 */
class DrilldownEvent extends PreventableEvent {
    /**
     * Specifies the drilldown field value.
     */
    value;
    /**
     * Specifies the clicked series point.
     */
    point;
    /**
     * Specifies the clicked point series options.
     */
    series;
    /**
     * @hidden
     */
    constructor(e, sender) {
        super(sender);
        this.value = e.value;
        this.point = e.point;
        this.series = e.series;
    }
}

/**
 * @hidden
 */
function hasObservers(emitter) {
    return emitter.observers.length > 0;
}

/**
 * @hidden
 */
class ChartMessages extends ComponentMessages {
    /**
     * The message to display when no series are defined, or all series are empty.
     */
    noData;
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: ChartMessages, deps: null, target: i0.ɵɵFactoryTarget.Directive });
    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.2.12", type: ChartMessages, selector: "[kendoChartMessages]", inputs: { noData: "noData" }, usesInheritance: true, ngImport: i0 });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: ChartMessages, decorators: [{
            type: Directive,
            args: [{
                    selector: '[kendoChartMessages]'
                }]
        }], propDecorators: { noData: [{
                type: Input
            }] } });

/**
 * @hidden
 */
class LocalizedChartMessagesDirective extends ChartMessages {
    service;
    constructor(service) {
        super();
        this.service = service;
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: LocalizedChartMessagesDirective, deps: [{ token: i1$1.LocalizationService }], target: i0.ɵɵFactoryTarget.Directive });
    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.2.12", type: LocalizedChartMessagesDirective, isStandalone: true, selector: "[kendoChartLocalizedMessages]", providers: [
            {
                provide: ChartMessages,
                useExisting: forwardRef(() => LocalizedChartMessagesDirective)
            }
        ], usesInheritance: true, ngImport: i0 });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: LocalizedChartMessagesDirective, decorators: [{
            type: Directive,
            args: [{
                    providers: [
                        {
                            provide: ChartMessages,
                            useExisting: forwardRef(() => LocalizedChartMessagesDirective)
                        }
                    ],
                    selector: '[kendoChartLocalizedMessages]',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: i1$1.LocalizationService }]; } });

/**
 * Represents the Kendo UI Chart component for Angular.
 *
 * @example
 * ```html
 * <kendo-chart>
 *   <kendo-chart-legend [visible]="legendVisible">
 *   </kendo-chart-legend>
 *   <kendo-chart-series>
 *     <kendo-chart-series-item name="Series #1" type="line" [data]="[1, 2, 3]">
 *     </kendo-chart-series-item>
 *   </kendo-chart-series>
 * </kendo-chart>
 * ```
 *
 * @remarks
 * Supported children are: {@link SeriesComponent}, {@link SeriesDefaultsComponent}, {@link PanesComponent}, {@link PaneDefaultsComponent},
 * {@link CategoryAxisComponent}, {@link ValueAxisComponent}, {@link XAxisComponent}, {@link YAxisComponent}, {@link LegendComponent},
 * {@link ChartAreaComponent}, {@link PlotAreaComponent}, {@link TooltipComponent}, {@link SubtitleComponent}, {@link TitleComponent},
 * {@link ZoomableComponent}, {@link AxisDefaultsComponent}, {@link ChartCustomMessagesComponent} {@link PaneComponent}.
 */
class ChartComponent {
    configurationService;
    themeService;
    element;
    intl;
    localizationService;
    ngZone;
    instanceEventService;
    changeDetector;
    renderer;
    /**
     * Defines whether the Chart can be panned.
     * Panning is not available for the `Donut`, `Pie`, `Funnel`, `Pyramid`, `Polar`, and `Radar` series.
     * @default false
     */
    pannable;
    /**
     * Defines the rendering mode of the Chart.
     * @default 'svg'
     */
    renderAs;
    /**
     * Defines the default colors for the Chart series.
     */
    seriesColors;
    /**
     * Defines the subtitle configuration of the Chart.
     */
    subtitle;
    /**
     * Defines the title configuration of the Chart.
     */
    title;
    /**
     * Defines whether to show the no-data template when the Chart has no data.
     * @default true
     */
    noData = true;
    /**
     * Defines whether the Chart plays animations when it displays the series.
     * By default, animations are enabled.
     * @default true
     */
    transitions;
    /**
     * Defines the zoom configuration of the Chart.
     */
    zoomable;
    /**
     * Defines the default configuration for all axes.
     */
    axisDefaults;
    /**
     * Defines the category axis configuration.
     */
    categoryAxis;
    /**
     * Defines the Chart area configuration.
     */
    chartArea;
    /**
     * Defines the Chart legend configuration.
     */
    legend;
    /**
     * Defines the Chart panes configuration.
     */
    panes;
    /**
     * Defines the default configuration for all panes.
     */
    paneDefaults;
    /**
     * Defines the plot area configuration.
     */
    plotArea;
    /**
     * Defines the Chart series configuration.
     */
    series;
    /**
     * Defines the default configuration for all series.
     */
    seriesDefaults;
    /**
     * Defines the Chart tooltip configuration.
     */
    tooltip;
    /**
     * Defines the value axis configuration.
     */
    valueAxis;
    /**
     * Defines the X axis configuration.
     */
    xAxis;
    /**
     * Defines the Y axis configuration.
     */
    yAxis;
    /**
     * Fires when you click an axis label ([see example](slug:events_chart)).
     */
    axisLabelClick = new EventEmitter();
    /**
     * Fires as long as you drag the Chart with the mouse or through swipe gestures.
     */
    drag = new EventEmitter();
    /**
     * Fires when you stop dragging the Chart.
     */
    dragEnd = new EventEmitter();
    /**
     * Fires when you start dragging the Chart.
     */
    dragStart = new EventEmitter();
    /**
     * Fires when you hover over a legend item ([see example](slug:events_chart)).
     */
    legendItemHover = new EventEmitter();
    /**
     * Fires when the cursor leaves a legend item.
     */
    legendItemLeave = new EventEmitter();
    /**
     * Fires when you click a note.
     */
    noteClick = new EventEmitter();
    /**
     * Fires when you hover over a note.
     */
    noteHover = new EventEmitter();
    /**
     * Fires when the cursor leaves a note.
     */
    noteLeave = new EventEmitter();
    /**
     * Fires when a pane is rendered because the Chart is rendered, performs panning or zooming, or is exported with different options.
     * The event is used to render custom visuals in the panes.
     */
    paneRender = new EventEmitter();
    /**
     * Fires when you click the plot area ([see example](slug:events_chart)).
     * The `click` event is triggered by the `tap` and `contextmenu` events.
     * To distinguish between the original events, inspect the `e.originalEvent.type` field.
     */
    plotAreaClick = new EventEmitter();
    /**
     * Fires when you hover the plot area ([see example](slug:events_chart)).
     */
    plotAreaHover = new EventEmitter();
    /**
     * Fires when the cursor leaves the plot area.
     */
    plotAreaLeave = new EventEmitter();
    /**
     * Fires when the Chart is ready to render on screen ([see example](slug:events_chart)).
     * For example, you can use it to remove loading indicators.
     * Any changes made to the options are ignored.
     */
    render = new EventEmitter();
    /**
     * Fires when you modify the selection.
     *
     * The range units include a generic axis category index (0-based) and a date axis represented by a date instance.
     */
    select = new EventEmitter();
    /**
     * Fires when you complete the modification of the selection.
     *
     * The range units include a generic axis category index (0-based) and a date axis represented by a date instance.
     */
    selectEnd = new EventEmitter();
    /**
     * Fires when you start modifying the axis selection.
     *
     * The range units include a generic axis category index (0-based) and a date axis represented by a date instance.
     */
    selectStart = new EventEmitter();
    /**
     * Fires when you click the Chart series.
     *
     * The `click` event will be triggered by the `tap` and `contextmenu` events ([see example](slug:events_chart)).
     * To distinguish between the original events, inspect the `e.originalEvent.type` field.
     */
    seriesClick = new EventEmitter();
    /**
     * Fires when you want to drill down on a specific point.
     */
    drilldown = new EventEmitter();
    /**
     * Fires when you hover the Chart series ([see example](slug:events_chart)).
     */
    seriesHover = new EventEmitter();
    /**
     * Fires when the cursor enters a series.
     */
    seriesOver = new EventEmitter();
    /**
     * Fires when the cursor leaves a series.
     */
    seriesLeave = new EventEmitter();
    /**
     * Fires as long as you zoom the Chart by using the mousewheel operation.
     */
    zoom = new EventEmitter();
    /**
     * Fires when you stop zooming the Chart.
     */
    zoomEnd = new EventEmitter();
    /**
     * Fires when you use the mousewheel to zoom the Chart.
     */
    zoomStart = new EventEmitter();
    /**
     * Fires when a legend item is clicked before the selected series visibility is toggled.
     * You can prevent this event.
     */
    legendItemClick = new EventEmitter();
    /**
     * Fires when the drill-down level has changed.
     */
    drilldownLevelChange = new EventEmitter();
    /**
     * Limits the automatic resizing of the Chart. Sets the maximum number of times per second
     * that the component redraws its content when the size of its container changes.
     * To disable the automatic resizing, set it to `0`.
     *
     * @default 10
     */
    resizeRateLimit = 10;
    /**
     * Defines the settings for the tooltip popup.
     */
    popupSettings;
    /**
     * Gets or sets the current drill-down level for [Drilldown Charts](slug:drilldown_chart_charts).
     *
     * To return to a previous level, set the value to a number less than the current level.
     * To return to the root chart, set the value to `0`.
     *
     * Setting the value to a number greater than the current level has no effect.
     */
    get drilldownLevel() {
        return this.drilldownState.length;
    }
    set drilldownLevel(level) {
        const currentLevel = this.drilldownState.length;
        if (currentLevel <= level || !this.seriesComponents) {
            return;
        }
        this.drilldownState.slice(level, currentLevel).forEach((view) => {
            const hiddenSeries = view.hiddenSeries;
            hiddenSeries?.forEach(series => {
                series.hidden = false;
            });
            view.destroy();
        });
        this.drilldownState.length = level;
        this.drilldownLevelChange.emit(level);
    }
    /**
     * Represents the Drawing `Surface` of the Chart.
     */
    surface;
    seriesCollectionComponent;
    seriesComponents;
    donutCenterTemplate;
    noDataTemplate;
    tooltipInstance;
    crossahirTooltips;
    surfaceElement;
    /**
     * @hidden
     */
    donutCenterStyle;
    /**
     * @hidden
     */
    messageFor(key) {
        return this.localizationService.get(key);
    }
    /**
     * @hidden
     */
    showLicenseWatermark = false;
    instance;
    options;
    theme = null;
    optionsChange;
    suppressTransitions = false;
    resizeTimeout;
    redrawTimeout;
    domSubscriptions;
    destroyed;
    subscriptions;
    rtl = false;
    hostClasses = ['k-chart', 'k-widget'];
    drilldownState = [];
    constructor(configurationService, themeService, element, intl, localizationService, ngZone, instanceEventService, changeDetector, renderer) {
        this.configurationService = configurationService;
        this.themeService = themeService;
        this.element = element;
        this.intl = intl;
        this.localizationService = localizationService;
        this.ngZone = ngZone;
        this.instanceEventService = instanceEventService;
        this.changeDetector = changeDetector;
        this.renderer = renderer;
        const isValid = validatePackage(packageMetadata);
        this.showLicenseWatermark = shouldShowValidationUI(isValid);
        this.themeService.loadTheme();
        this.refreshWait();
    }
    ngOnInit() {
        if (this.element) {
            this.hostClasses.forEach(name => {
                this.renderer.addClass(this.element.nativeElement, name);
            });
            this.renderer.setStyle(this.element.nativeElement, 'position', 'relative');
        }
    }
    ngAfterViewInit() {
        if (this.canRender) {
            this.ngZone.runOutsideAngular(() => {
                const chartMouseleave = this.renderer.listen(this.surfaceElement.nativeElement, 'mouseleave', this.chartMouseleave.bind(this));
                this.domSubscriptions = () => {
                    chartMouseleave();
                };
            });
        }
        this.setDirection();
        this.subscriptions = this.intl.changes.subscribe(this.intlChange.bind(this));
        this.subscriptions.add(this.localizationService.changes.subscribe(this.rtlChange.bind(this)));
    }
    onDrilldown(e) {
        const seriesComponent = this.seriesComponents.find(sc => sc.name === e.series.name);
        const seriesCollection = this.seriesCollectionComponent.first;
        if (!seriesComponent?.drilldownTemplate || !seriesCollection) {
            return;
        }
        const args = new DrilldownEvent(e, this);
        this.run(() => this.drilldown.emit(args));
        if (args.isDefaultPrevented()) {
            return;
        }
        const hiddenSeries = [];
        this.seriesComponents.forEach(series => {
            if (!series.hidden) {
                series.hidden = true;
                hiddenSeries.push(series);
            }
        });
        const view = seriesCollection.viewContainer.createEmbeddedView(seriesComponent.drilldownTemplate.templateRef, { drilldownValue: e.value, point: e.point, series: e.series });
        view.hiddenSeries = hiddenSeries;
        view.markForCheck();
        this.drilldownState.push(view);
        this.drilldownLevelChange.emit(this.drilldownLevel);
    }
    ngAfterViewChecked() {
        if (this.instance && this.autoResize) {
            this.ngZone.runOutsideAngular(() => {
                clearTimeout(this.resizeTimeout);
                this.resizeTimeout = setTimeout(() => {
                    this.resize();
                }, 0);
            });
        }
    }
    ngOnChanges(changes) {
        const store = this.configurationService.store;
        copyChanges(changes, store);
        store.popupSettings = null;
        this.configurationService.push(store);
    }
    /**
     * Updates the component fields with the specified values and refreshes the Chart.
     *
     * Use this method when the configuration values cannot be set through the template.
     *
     * @example
     * ```ts-no-run
     * chart.notifyChanges({ title: { text: 'New Title' } });
     * ```
     *
     * @param changes An object containing the updated input fields.
     */
    notifyChanges(changes) {
        this.ngOnChanges(toSimpleChanges(changes));
    }
    ngOnDestroy() {
        this.destroyed = true;
        if (this.optionsChange) {
            this.optionsChange.unsubscribe();
        }
        if (this.domSubscriptions) {
            this.domSubscriptions();
            this.domSubscriptions = null;
        }
        if (this.instance) {
            this.instance.destroy();
            this.instance = null;
        }
        if (this.subscriptions) {
            this.subscriptions.unsubscribe();
        }
        clearTimeout(this.resizeTimeout);
        clearTimeout(this.redrawTimeout);
    }
    createInstance(element, observer) {
        this.instance = new Chart(element, this.options, this.theme, {
            intlService: this.intl,
            observer: observer,
            rtl: this.rtl,
            sender: this
        });
    }
    /**
     * Exports the Chart as an image. The export operation is asynchronous and returns a promise.
     *
     * @param options - The parameters for the exported image.
     * @returns A promise that resolves with a PNG image encoded as a Data URI.
     */
    exportImage(options = {}) {
        return exportImage(this.exportVisual(options), options);
    }
    /**
     * Exports the Chart as an SVG document. The export operation is asynchronous and returns a promise.
     *
     * @param options - The parameters for the exported file.
     * @returns A promise that resolves with an SVG document encoded as a Data URI.
     */
    exportSVG(options = {}) {
        return exportSVG(this.exportVisual(options), options);
    }
    /**
     * Exports the Chart as a Drawing `Scene`.
     *
     * @param options - The parameters for the export operation.
     * @returns The root `Group` of the scene.
     */
    exportVisual(options = {}) {
        return this.instance.exportVisual(options);
    }
    /**
     * Returns the axis with the specified name.
     *
     * @param name - The axis name.
     * @returns The axis with a corresponding name.
     */
    findAxisByName(name) {
        if (this.instance) {
            return this.instance.findAxisByName(name);
        }
    }
    /**
     * Returns the pane at the specified index.
     *
     * @param index - The pane index.
     * @returns The pane at the specified index.
     */
    findPaneByIndex(index) {
        if (this.instance) {
            return this.instance.findPaneByIndex(index);
        }
    }
    /**
     * Returns the pane with the specified name.
     *
     * @param name - The name of the pane.
     * @returns The pane with the provided name.
     */
    findPaneByName(name) {
        if (this.instance) {
            return this.instance.findPaneByName(name);
        }
    }
    /**
     * Returns the plot area of the Chart.
     *
     * @returns The plot area of the Chart.
     */
    getPlotArea() {
        if (this.instance) {
            return this.instance.plotArea();
        }
    }
    /**
     * Highlights the series points or the segments of a Pie, Donut, Funnel, or Pyramid Charts.
     *
     * See [Series Highlight]({% slug serieshighlight_chart_charts %}) for more details (with an [example](slug:serieshighlight_chart_charts#toc-toggling-the-highlight-with-code)).
     *
     * @param show - A Boolean value that indicates whether the highlight is shown or hidden.
     * @param filter - A string that represents the series or category name, an object with the series and category name, or a function which will be called for each point. The function should return `true` for the points for which the highlight is toggled.
     */
    toggleHighlight(show, filter) {
        if (this.instance) {
            this.instance.toggleHighlight(show, filter);
        }
    }
    /**
     * Hides the tooltip of the Chart.
     */
    hideTooltip() {
        if (this.instance) {
            this.instance.hideTooltip();
        }
    }
    /**
     * Shows the Chart tooltip of a specific point or the shared tooltip of a specific category.
     *
     * @param filter - The category for a shared tooltip or a function which will be called for each point until the function returns `true`.
     */
    showTooltip(filter) {
        if (this.instance) {
            this.instance.showTooltip(filter);
        }
    }
    init() {
        if (!this.canRender) {
            return;
        }
        const element = this.surfaceElement.nativeElement;
        const instanceObserver = new ChartInstanceObserver(this);
        this.createInstance(element, instanceObserver);
    }
    /**
     * Detects the size of the container and redraws the Chart.
     * Resizing is automatic unless you set the `resizeRateLimit` option to `0`.
     */
    resize() {
        if (this.instance) {
            this.instance.resize();
        }
    }
    /**
     * @hidden
     */
    onResize() {
        if (this.autoResize) {
            this.resize();
        }
    }
    /**
     * Reloads the Chart appearance settings from the current [Kendo UI Theme]({% slug themesandstyles %}).
     *
     * Call this method after loading a different theme stylesheet.
     */
    reloadTheme() {
        if (!this.instance) {
            return;
        }
        this.themeService.reset();
        this.instance.destroy();
        this.instance = null;
    }
    onLegendItemClick(e) {
        this.run(() => {
            const args = new LegendItemClickEvent(e, this);
            this.legendItemClick.emit(args);
            if (!args.isDefaultPrevented()) {
                const series = this.seriesComponents.toArray()[e.series.index];
                if (!series) {
                    return;
                }
                if (e.pointIndex !== undefined) {
                    series.togglePointVisibility(e.pointIndex);
                }
                else {
                    series.toggleVisibility();
                }
                this.suppressTransitions = true;
            }
        }, hasObservers(this.legendItemClick), this.seriesComponents.length > 0);
    }
    onInit(e) {
        this.instance = e.sender;
    }
    onRender(e) {
        const donutCenterStyle = this.getDonutCenterStyle();
        this.run(() => {
            const args = new RenderEvent(e, this);
            this.surface = e.sender.surface;
            this.render.emit(args);
            this.donutCenterStyle = donutCenterStyle;
        }, hasObservers(this.render), this.donutCenterStyle !== donutCenterStyle);
    }
    onShowTooltip(e) {
        this.run(() => {
            if (!e.crosshair) {
                this.tooltipInstance.show(e);
            }
            else {
                this.crossahirTooltips.show(e);
            }
        }, !e.crosshair, true);
    }
    onHideTooltip(e) {
        if (!e.crosshair) {
            if (this.tooltipInstance.active) {
                this.tooltipInstance.hide();
                this.detectChanges();
            }
        }
        else if (this.crossahirTooltips.active) {
            this.crossahirTooltips.hide();
            this.detectChanges();
        }
    }
    trigger(name, e) {
        if (name === 'resize') {
            return;
        }
        if (name === 'drilldown') {
            this.onDrilldown(e);
            return;
        }
        const emitter = this.activeEmitter(name);
        if (emitter) {
            const args = this.instanceEventService.create(name, e, this);
            this.run(() => {
                emitter.emit(args);
            });
            return args.isDefaultPrevented && args.isDefaultPrevented();
        }
    }
    requiresHandlers(names) {
        for (let idx = 0; idx < names.length; idx++) {
            if (this.activeEmitter(names[idx])) {
                return true;
            }
        }
        return false;
    }
    refresh() {
        clearTimeout(this.redrawTimeout);
        this.updateDirection();
        this.crossahirTooltips.createCrosshairTooltips(this.options);
        this.setChartAreaSize();
        if (!this.instance) {
            this.init();
            return;
        }
        const transitions = this.options.transitions;
        if (this.suppressTransitions) {
            this.options.transitions = false;
        }
        this.updateOptions();
        if (this.suppressTransitions) {
            this.options.transitions = transitions;
            this.suppressTransitions = false;
        }
    }
    setChartAreaSize() {
        if (!this.element) {
            return;
        }
        const element = this.element.nativeElement;
        const chartArea = this.options.chartArea || {};
        if (chartArea.width) {
            element.style.width = `${chartArea.width}px`;
        }
        if (chartArea.height) {
            element.style.height = `${chartArea.height}px`;
        }
    }
    updateOptions() {
        this.instance.setOptions(this.options);
    }
    /**
     * @hidden
     */
    tooltipMouseleave(e) {
        const relatedTarget = e.relatedTarget;
        const chartElement = this.element.nativeElement;
        if (this.instance && (!relatedTarget || !hasParent(relatedTarget, chartElement))) {
            this.instance.hideElements();
        }
    }
    /**
     * @hidden
     */
    chartMouseleave(e) {
        const relatedTarget = e.relatedTarget;
        const chartElement = this.element.nativeElement;
        if (this.instance && (!relatedTarget || !(this.tooltipInstance.containsElement(relatedTarget) || hasParent(relatedTarget, chartElement))) &&
            !this.instance.handlingTap) {
            this.instance.hideElements();
        }
    }
    get canRender() {
        return isDocumentAvailable() && Boolean(this.surfaceElement);
    }
    get autoResize() {
        return this.resizeRateLimit > 0;
    }
    activeEmitter(name) {
        const emitter = this[name];
        if (emitter && emitter.emit && hasObservers(emitter)) {
            return emitter;
        }
    }
    getDonutCenterStyle() {
        if (!this.instance || !this.options || !this.options.series) {
            return;
        }
        const firstSeries = this.options.series[0];
        const charts = this.instance._plotArea.charts;
        if (!firstSeries || firstSeries.type !== 'donut' || !charts || charts[0].points.length === 0) {
            return;
        }
        const firstPoint = charts[0].points[0];
        const center = firstPoint.box.center();
        const radius = firstPoint.sector.innerRadius;
        const top = center.y - radius;
        const left = center.x - radius;
        const size = radius * 2;
        return {
            height: size + 'px',
            left: left + 'px',
            top: top + 'px',
            width: size + 'px'
        };
    }
    refreshWait() {
        this.ngZone.runOutsideAngular(() => {
            this.optionsChange = combineLatest(this.configurationService.onChange$, this.themeService.onChange$).pipe(tap((result) => {
                this.options = result[0];
                this.theme = result[1];
            }), auditTime(THROTTLE_MS))
                .subscribe(() => {
                this.refresh();
            });
        });
    }
    run(callback, inZone = true, detectChanges) {
        if (inZone) {
            if (detectChanges) {
                this.changeDetector.markForCheck();
            }
            this.ngZone.run(callback);
        }
        else {
            callback();
            if (detectChanges) {
                this.detectChanges();
            }
        }
    }
    detectChanges() {
        if (!this.destroyed) {
            this.changeDetector.detectChanges();
        }
    }
    intlChange() {
        if (this.instance) {
            this.deferredRedraw();
        }
    }
    rtlChange() {
        if (this.instance && this.rtl !== this.isRTL) {
            this.deferredRedraw();
        }
    }
    deferredRedraw() {
        this.ngZone.runOutsideAngular(() => {
            clearTimeout(this.redrawTimeout);
            this.redrawTimeout = setTimeout(() => {
                this.updateDirection();
                this.instance.noTransitionsRedraw();
            }, 0);
        });
    }
    updateDirection() {
        const current = this.isRTL;
        if (this.rtl !== current) {
            this.setDirection();
            if (this.instance) {
                this.instance.setDirection(current);
            }
        }
    }
    setDirection() {
        this.rtl = this.isRTL;
        if (this.element) {
            this.renderer.setAttribute(this.element.nativeElement, 'dir', this.rtl ? 'rtl' : 'ltr');
        }
    }
    get isRTL() {
        return Boolean(this.localizationService.rtl);
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: ChartComponent, deps: [{ token: ConfigurationService }, { token: ThemeService }, { token: i0.ElementRef }, { token: i3.IntlService }, { token: i1$1.LocalizationService }, { token: i0.NgZone }, { token: InstanceEventService$1 }, { token: i0.ChangeDetectorRef }, { token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: ChartComponent, isStandalone: true, selector: "kendo-chart", inputs: { pannable: "pannable", renderAs: "renderAs", seriesColors: "seriesColors", subtitle: "subtitle", title: "title", noData: "noData", transitions: "transitions", zoomable: "zoomable", axisDefaults: "axisDefaults", categoryAxis: "categoryAxis", chartArea: "chartArea", legend: "legend", panes: "panes", paneDefaults: "paneDefaults", plotArea: "plotArea", series: "series", seriesDefaults: "seriesDefaults", tooltip: "tooltip", valueAxis: "valueAxis", xAxis: "xAxis", yAxis: "yAxis", resizeRateLimit: "resizeRateLimit", popupSettings: "popupSettings", drilldownLevel: "drilldownLevel" }, outputs: { axisLabelClick: "axisLabelClick", drag: "drag", dragEnd: "dragEnd", dragStart: "dragStart", legendItemHover: "legendItemHover", legendItemLeave: "legendItemLeave", noteClick: "noteClick", noteHover: "noteHover", noteLeave: "noteLeave", paneRender: "paneRender", plotAreaClick: "plotAreaClick", plotAreaHover: "plotAreaHover", plotAreaLeave: "plotAreaLeave", render: "render", select: "select", selectEnd: "selectEnd", selectStart: "selectStart", seriesClick: "seriesClick", drilldown: "drilldown", seriesHover: "seriesHover", seriesOver: "seriesOver", seriesLeave: "seriesLeave", zoom: "zoom", zoomEnd: "zoomEnd", zoomStart: "zoomStart", legendItemClick: "legendItemClick", drilldownLevelChange: "drilldownLevelChange" }, providers: [
            ConfigurationService,
            TooltipTemplateService,
            InstanceEventService$1,
            LocalizationService,
            {
                provide: L10N_PREFIX,
                useValue: 'kendo.chart'
            }
        ], queries: [{ propertyName: "donutCenterTemplate", first: true, predicate: DonutCenterTemplateDirective, descendants: true }, { propertyName: "noDataTemplate", first: true, predicate: NoDataTemplateDirective, descendants: true }, { propertyName: "seriesCollectionComponent", predicate: SeriesComponent }, { propertyName: "seriesComponents", predicate: SeriesItemComponent, descendants: true }], viewQueries: [{ propertyName: "tooltipInstance", first: true, predicate: TooltipPopupComponent, descendants: true, static: true }, { propertyName: "crossahirTooltips", first: true, predicate: CrosshairTooltipsContainerComponent, descendants: true, static: true }, { propertyName: "surfaceElement", first: true, predicate: ["surface"], descendants: true, static: true }], exportAs: ["kendoChart"], usesOnChanges: true, ngImport: i0, template: `
    <ng-container
        kendoChartLocalizedMessages
        i18n-noData="kendo.chart.noData|The message to display when no series are defined, or all series are empty"
        noData="No data available"
    ></ng-container>
    <div #surface class="k-chart-surface">
        <div *ngIf="noData" class='k-chart-overlay' [style.display]="'none'">
            <div class='k-no-data'>
                <ng-template *ngIf="noDataTemplate; else noDataMessage" [ngTemplateOutlet]="noDataTemplate.templateRef"></ng-template>
                <ng-template #noDataMessage>
                    {{ messageFor('noData') }}
                </ng-template>
            </div>
        </div>
    </div>
    <kendo-chart-crosshair-tooltips-container [popupSettings]="popupSettings">
    </kendo-chart-crosshair-tooltips-container>
    <kendo-chart-tooltip-popup (leave)="tooltipMouseleave($event)" [popupSettings]="popupSettings">
    </kendo-chart-tooltip-popup>
    <kendo-resize-sensor (resize)="onResize()" [rateLimit]="resizeRateLimit"></kendo-resize-sensor>
    <div class="k-chart-donut-center" [ngStyle]="donutCenterStyle" *ngIf="donutCenterStyle && donutCenterTemplate">
      <ng-template [ngTemplateOutlet]="donutCenterTemplate.templateRef"></ng-template>
    </div>

    <div kendoWatermarkOverlay *ngIf="showLicenseWatermark"></div>
  `, isInline: true, dependencies: [{ kind: "directive", type: LocalizedChartMessagesDirective, selector: "[kendoChartLocalizedMessages]" }, { kind: "component", type: CrosshairTooltipsContainerComponent, selector: "kendo-chart-crosshair-tooltips-container", inputs: ["popupSettings"] }, { kind: "component", type: TooltipPopupComponent, selector: "kendo-chart-tooltip-popup", inputs: ["animate", "classNames", "wrapperClass"], outputs: ["leave"] }, { kind: "component", type: ResizeSensorComponent, selector: "kendo-resize-sensor", inputs: ["rateLimit"], outputs: ["resize"] }, { kind: "directive", type: NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }, { kind: "directive", type: NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "component", type: WatermarkOverlayComponent, selector: "div[kendoWatermarkOverlay]" }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: ChartComponent, decorators: [{
            type: Component,
            args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    exportAs: 'kendoChart',
                    providers: [
                        ConfigurationService,
                        TooltipTemplateService,
                        InstanceEventService$1,
                        LocalizationService,
                        {
                            provide: L10N_PREFIX,
                            useValue: 'kendo.chart'
                        }
                    ],
                    selector: 'kendo-chart',
                    template: `
    <ng-container
        kendoChartLocalizedMessages
        i18n-noData="kendo.chart.noData|The message to display when no series are defined, or all series are empty"
        noData="No data available"
    ></ng-container>
    <div #surface class="k-chart-surface">
        <div *ngIf="noData" class='k-chart-overlay' [style.display]="'none'">
            <div class='k-no-data'>
                <ng-template *ngIf="noDataTemplate; else noDataMessage" [ngTemplateOutlet]="noDataTemplate.templateRef"></ng-template>
                <ng-template #noDataMessage>
                    {{ messageFor('noData') }}
                </ng-template>
            </div>
        </div>
    </div>
    <kendo-chart-crosshair-tooltips-container [popupSettings]="popupSettings">
    </kendo-chart-crosshair-tooltips-container>
    <kendo-chart-tooltip-popup (leave)="tooltipMouseleave($event)" [popupSettings]="popupSettings">
    </kendo-chart-tooltip-popup>
    <kendo-resize-sensor (resize)="onResize()" [rateLimit]="resizeRateLimit"></kendo-resize-sensor>
    <div class="k-chart-donut-center" [ngStyle]="donutCenterStyle" *ngIf="donutCenterStyle && donutCenterTemplate">
      <ng-template [ngTemplateOutlet]="donutCenterTemplate.templateRef"></ng-template>
    </div>

    <div kendoWatermarkOverlay *ngIf="showLicenseWatermark"></div>
  `,
                    standalone: true,
                    imports: [LocalizedChartMessagesDirective, CrosshairTooltipsContainerComponent, TooltipPopupComponent, ResizeSensorComponent, NgIf, NgStyle, NgTemplateOutlet, WatermarkOverlayComponent]
                }]
        }], ctorParameters: function () { return [{ type: ConfigurationService }, { type: ThemeService }, { type: i0.ElementRef }, { type: i3.IntlService }, { type: i1$1.LocalizationService }, { type: i0.NgZone }, { type: InstanceEventService$1 }, { type: i0.ChangeDetectorRef }, { type: i0.Renderer2 }]; }, propDecorators: { pannable: [{
                type: Input
            }], renderAs: [{
                type: Input
            }], seriesColors: [{
                type: Input
            }], subtitle: [{
                type: Input
            }], title: [{
                type: Input
            }], noData: [{
                type: Input
            }], transitions: [{
                type: Input
            }], zoomable: [{
                type: Input
            }], axisDefaults: [{
                type: Input
            }], categoryAxis: [{
                type: Input
            }], chartArea: [{
                type: Input
            }], legend: [{
                type: Input
            }], panes: [{
                type: Input
            }], paneDefaults: [{
                type: Input
            }], plotArea: [{
                type: Input
            }], series: [{
                type: Input
            }], seriesDefaults: [{
                type: Input
            }], tooltip: [{
                type: Input
            }], valueAxis: [{
                type: Input
            }], xAxis: [{
                type: Input
            }], yAxis: [{
                type: Input
            }], axisLabelClick: [{
                type: Output
            }], drag: [{
                type: Output
            }], dragEnd: [{
                type: Output
            }], dragStart: [{
                type: Output
            }], legendItemHover: [{
                type: Output
            }], legendItemLeave: [{
                type: Output
            }], noteClick: [{
                type: Output
            }], noteHover: [{
                type: Output
            }], noteLeave: [{
                type: Output
            }], paneRender: [{
                type: Output
            }], plotAreaClick: [{
                type: Output
            }], plotAreaHover: [{
                type: Output
            }], plotAreaLeave: [{
                type: Output
            }], render: [{
                type: Output
            }], select: [{
                type: Output
            }], selectEnd: [{
                type: Output
            }], selectStart: [{
                type: Output
            }], seriesClick: [{
                type: Output
            }], drilldown: [{
                type: Output
            }], seriesHover: [{
                type: Output
            }], seriesOver: [{
                type: Output
            }], seriesLeave: [{
                type: Output
            }], zoom: [{
                type: Output
            }], zoomEnd: [{
                type: Output
            }], zoomStart: [{
                type: Output
            }], legendItemClick: [{
                type: Output
            }], drilldownLevelChange: [{
                type: Output
            }], resizeRateLimit: [{
                type: Input
            }], popupSettings: [{
                type: Input
            }], drilldownLevel: [{
                type: Input
            }], seriesCollectionComponent: [{
                type: ContentChildren,
                args: [SeriesComponent]
            }], seriesComponents: [{
                type: ContentChildren,
                args: [SeriesItemComponent, { descendants: true }]
            }], donutCenterTemplate: [{
                type: ContentChild,
                args: [DonutCenterTemplateDirective, { static: false }]
            }], noDataTemplate: [{
                type: ContentChild,
                args: [NoDataTemplateDirective, { static: false }]
            }], tooltipInstance: [{
                type: ViewChild,
                args: [TooltipPopupComponent, { static: true }]
            }], crossahirTooltips: [{
                type: ViewChild,
                args: [CrosshairTooltipsContainerComponent, { static: true }]
            }], surfaceElement: [{
                type: ViewChild,
                args: ['surface', { static: true }]
            }] } });

/**
 * Represents the custom messages component of the Kendo UI for Angular Chart.
 * This component allows you to customize the messages displayed in the Chart, such as the "No data available" message.
 *
 * @example
 * ```html
 * <kendo-chart [data]="data">
 *     <kendo-chart-messages noData='No data'></kendo-chart-messages>
 * </kendo-chart>
 * ```
 */
class ChartCustomMessagesComponent extends ChartMessages {
    service;
    constructor(service) {
        super();
        this.service = service;
    }
    get override() {
        return true;
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: ChartCustomMessagesComponent, deps: [{ token: i1$1.LocalizationService }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: ChartCustomMessagesComponent, isStandalone: true, selector: "kendo-chart-messages", providers: [
            {
                provide: ChartMessages,
                useExisting: forwardRef(() => ChartCustomMessagesComponent)
            }
        ], usesInheritance: true, ngImport: i0, template: ``, isInline: true });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: ChartCustomMessagesComponent, decorators: [{
            type: Component,
            args: [{
                    providers: [
                        {
                            provide: ChartMessages,
                            useExisting: forwardRef(() => ChartCustomMessagesComponent)
                        }
                    ],
                    selector: 'kendo-chart-messages',
                    template: ``,
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: i1$1.LocalizationService }]; } });

/**
 * Specifies the `weekStartDay` of a [CategoryAxisItemComponent]({% slug api_charts_categoryaxisitemcomponent %}).
 */
var WeekStartDay;
(function (WeekStartDay) {
    /**
     * Specifies Sunday as the first day of the week.
     */
    WeekStartDay[WeekStartDay["Sunday"] = 0] = "Sunday";
    /**
     * Specifies Monday as the first day of the week.
     */
    WeekStartDay[WeekStartDay["Monday"] = 1] = "Monday";
    /**
     * Specifies Tuesday as the first day of the week.
     */
    WeekStartDay[WeekStartDay["Tuesday"] = 2] = "Tuesday";
    /**
     * Specifies Wednesday as the first day of the week.
     */
    WeekStartDay[WeekStartDay["Wednesday"] = 3] = "Wednesday";
    /**
     * Specifies Thursday as the first day of the week.
     */
    WeekStartDay[WeekStartDay["Thursday"] = 4] = "Thursday";
    /**
     * Specifies Friday as the first day of the week.
     */
    WeekStartDay[WeekStartDay["Friday"] = 5] = "Friday";
    /**
     * Specifies Saturday as the first day of the week.
     */
    WeekStartDay[WeekStartDay["Saturday"] = 6] = "Saturday";
})(WeekStartDay || (WeekStartDay = {}));

/**
 * Represents the Kendo UI for Angular Chart X Axis Item component
 * ([see example]({% slug api_charts_xaxiscomponent %})).
 *
 * @example
 * ```html
 * <kendo-chart>
 *  <kendo-chart-x-axis>
 *   <kendo-chart-x-axis-item>
 *    <kendo-chart-x-axis-item-title text="X Axis Title"></kendo-chart-x-axis-item-title>
 *  </kendo-chart-x-axis-item>
 *  </kendo-chart-x-axis>
 * </kendo-chart>
 * ```
 *
 * @remarks
 * Supported children components are: {@link XAxisCrosshairComponent}, {@link XAxisLabelsComponent}, {@link XAxisNotesComponent}, and {@link XAxisTitleComponent}.
 */
class XAxisItemComponent extends CollectionItemComponent {
    configurationService;
    collectionService;
    intl;
    /**
     * Specifies the value or array of values at which the axis crosses with another axis.
     */
    axisCrossingValue;
    /**
     * Specifies the background color of the axis.
     */
    background;
    /**
     * Specifies the base time unit for the axis.
     */
    baseUnit;
    /**
     * Specifies the categories for the axis.
     */
    categories;
    /**
     * Specifies the color of the axis.
     */
    color;
    /**
     * Specifies the configuration of the axis line.
     */
    line;
    /**
     * Specifies the configuration of the major grid lines.
     */
    majorGridLines;
    /**
     * Specifies the configuration of the major ticks.
     */
    majorTicks;
    /**
     * Specifies the interval between major divisions.
     */
    majorUnit;
    /**
     * Specifies the maximum value of the axis.
     */
    max;
    /**
     * Specifies the minimum value of the axis.
     */
    min;
    /**
     * Specifies the configuration of the minor grid lines.
     */
    minorGridLines;
    /**
     * Specifies the configuration of the minor ticks.
     */
    minorTicks;
    /**
     * Specifies the interval between minor divisions.
     */
    minorUnit;
    /**
     * Specifies the unique name of the axis.
     */
    name;
    /**
     * Determines whether the Chart prevents the automatic axis range from snapping to zero.
     */
    narrowRange;
    /**
     * Specifies the name of the pane that the axis renders in.
     */
    pane;
    /**
     * Specifies the plot bands configuration.
     */
    plotBands;
    /**
     * Determines whether the axis direction is reversed.
     */
    reverse;
    /**
     * Specifies the start angle for radar and polar axes.
     */
    startAngle;
    /**
     * Specifies the axis type.
     *
     * The options are `numeric` for a numeric axis, `date` for a specialized axis for displaying chronological data, and `log` for a logarithmic axis.
     *
     * If the series X value is of the `date` type, the Chart automatically switches to a date axis.
     * To avoid this behavior, set the `type`.
     * @default 'numeric'
     */
    type;
    /**
     * Determines whether the Chart displays the X axis. By default, the X axis is visible.
     * @default true
     */
    visible;
    /**
     * Specifies the first day of the week.
     */
    weekStartDay;
    // These options are also available as child components
    /**
     * Specifies the configuration of the crosshair.
     */
    crosshair;
    /**
     * Specifies the configuration of the labels.
     */
    labels;
    /**
     * Specifies the configuration of the notes.
     */
    notes;
    /**
     * Specifies the configuration of the title.
     */
    title;
    intlSubscription;
    constructor(configurationService, collectionService, intl, localeId) {
        super(configurationService, collectionService);
        this.configurationService = configurationService;
        this.collectionService = collectionService;
        this.intl = intl;
        intl.localeId = localeId;
        this.notifyChanges({ weekStartDay: intl.firstDay(intl.localeId) });
        this.intlSubscription = intl.changes.subscribe(() => {
            this.notifyChanges({ weekStartDay: intl.firstDay(intl.localeId) });
        });
    }
    ngOnDestroy() {
        if (this.intlSubscription) {
            this.intlSubscription.unsubscribe();
        }
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: XAxisItemComponent, deps: [{ token: ConfigurationService }, { token: CollectionService }, { token: i3.IntlService }, { token: LOCALE_ID }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: XAxisItemComponent, isStandalone: true, selector: "kendo-chart-x-axis-item", inputs: { axisCrossingValue: "axisCrossingValue", background: "background", baseUnit: "baseUnit", categories: "categories", color: "color", line: "line", majorGridLines: "majorGridLines", majorTicks: "majorTicks", majorUnit: "majorUnit", max: "max", min: "min", minorGridLines: "minorGridLines", minorTicks: "minorTicks", minorUnit: "minorUnit", name: "name", narrowRange: "narrowRange", pane: "pane", plotBands: "plotBands", reverse: "reverse", startAngle: "startAngle", type: "type", visible: "visible", weekStartDay: "weekStartDay", crosshair: "crosshair", labels: "labels", notes: "notes", title: "title" }, providers: [ConfigurationService], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: XAxisItemComponent, decorators: [{
            type: Component,
            args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [ConfigurationService],
                    selector: 'kendo-chart-x-axis-item',
                    template: '',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: ConfigurationService }, { type: CollectionService }, { type: i3.IntlService }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [LOCALE_ID]
                }] }]; }, propDecorators: { axisCrossingValue: [{
                type: Input
            }], background: [{
                type: Input
            }], baseUnit: [{
                type: Input
            }], categories: [{
                type: Input
            }], color: [{
                type: Input
            }], line: [{
                type: Input
            }], majorGridLines: [{
                type: Input
            }], majorTicks: [{
                type: Input
            }], majorUnit: [{
                type: Input
            }], max: [{
                type: Input
            }], min: [{
                type: Input
            }], minorGridLines: [{
                type: Input
            }], minorTicks: [{
                type: Input
            }], minorUnit: [{
                type: Input
            }], name: [{
                type: Input
            }], narrowRange: [{
                type: Input
            }], pane: [{
                type: Input
            }], plotBands: [{
                type: Input
            }], reverse: [{
                type: Input
            }], startAngle: [{
                type: Input
            }], type: [{
                type: Input
            }], visible: [{
                type: Input
            }], weekStartDay: [{
                type: Input
            }], crosshair: [{
                type: Input
            }], labels: [{
                type: Input
            }], notes: [{
                type: Input
            }], title: [{
                type: Input
            }] } });

/**
 * Represents a collection of one or more X-axis configuration components.
 *
 * @example
 * ```html
 * <kendo-chart>
 *     <kendo-chart-x-axis>
 *         <kendo-chart-x-axis-item
 *           [background]="'rgba(100, 100, 100, 0.2)'"
 *           color="red"
 *           [notes]="notesConfig"
 *           [crosshair]="crosshairConfig">
 *         </kendo-chart-x-axis-item>
 *         <kendo-chart-x-axis-item name="secondAxis">
 *         </kendo-chart-x-axis-item>
 *     </kendo-chart-x-axis>
 * </kendo-chart>
 * ```
 *
 * @remarks
 * Supported children components are: {@link XAxisItemComponent}.
 */
class XAxisComponent extends CollectionComponent {
    configurationService;
    collectionService;
    children;
    constructor(configurationService, collectionService) {
        super('xAxis', configurationService, collectionService);
        this.configurationService = configurationService;
        this.collectionService = collectionService;
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: XAxisComponent, deps: [{ token: ConfigurationService }, { token: CollectionService }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: XAxisComponent, isStandalone: true, selector: "kendo-chart-x-axis", providers: [CollectionService], queries: [{ propertyName: "children", predicate: XAxisItemComponent }], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: XAxisComponent, decorators: [{
            type: Component,
            args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [CollectionService],
                    selector: 'kendo-chart-x-axis',
                    template: '',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: ConfigurationService }, { type: CollectionService }]; }, propDecorators: { children: [{
                type: ContentChildren,
                args: [XAxisItemComponent]
            }] } });

/**
 * Represents the crosshair configuration options of the X axis
 * ([see example]({% slug api_charts_xaxiscomponent %})).
 *
 * @example
 * ```html
 * <kendo-chart>
 *  <kendo-chart-x-axis>
 *   <kendo-chart-x-axis-item>
 *    <kendo-chart-x-axis-item-crosshair [visible]="true" color="#ff0000" [width]="2">
 *     <kendo-chart-x-axis-item-crosshair-tooltip format="c"></kendo-chart-x-axis-item-crosshair-tooltip>
 *    </kendo-chart-x-axis-item-crosshair>
 *   </kendo-chart-x-axis-item>
 *  </kendo-chart-x-axis>
 * </kendo-chart>
 * ```
 *
 * @remarks
 * Supported children components are: {@link XAxisCrosshairTooltipComponent}.
 */
class XAxisCrosshairComponent extends SettingsComponent {
    configurationService;
    /**
     * Specifies the color of the crosshair.
     */
    color;
    /**
     * Specifies the opacity of the crosshair. By default, the crosshair is opaque.
     * @default 1
     */
    opacity;
    /**
     * Determines whether the Chart displays the X-axis crosshair of the Scatter Chart.
     * @default false
     */
    visible;
    /**
     * Specifies the width of the crosshair in pixels.
     * @default 1
     */
    width;
    // These options are also available as child components
    /**
     * Specifies the tooltip configuration of the crosshair.
     */
    tooltip;
    constructor(configurationService) {
        super('crosshair', configurationService);
        this.configurationService = configurationService;
        this.markAsVisible();
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: XAxisCrosshairComponent, deps: [{ token: ConfigurationService }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: XAxisCrosshairComponent, isStandalone: true, selector: "kendo-chart-x-axis-item-crosshair", inputs: { color: "color", opacity: "opacity", visible: "visible", width: "width", tooltip: "tooltip" }, usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: XAxisCrosshairComponent, decorators: [{
            type: Component,
            args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    selector: 'kendo-chart-x-axis-item-crosshair',
                    template: '',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: ConfigurationService }]; }, propDecorators: { color: [{
                type: Input
            }], opacity: [{
                type: Input
            }], visible: [{
                type: Input
            }], width: [{
                type: Input
            }], tooltip: [{
                type: Input
            }] } });

/**
 * Represents the configuration options of the crosshair tooltip in the X axis.
 * The crosshair tooltip is displayed when the `visible` option is set to `true`.
 */
class XAxisCrosshairTooltipComponent extends SettingsComponent {
    configurationService;
    /**
     * Specifies the background color of the tooltip.
     */
    background;
    /**
     * Specifies the border configuration of the tooltip.
     */
    border;
    /**
     * Specifies the text color of the tooltip.
     */
    color;
    /**
     * Specifies the font of the tooltip.
     * @default '12px sans-serif'
     */
    font;
    /**
     * Specifies the format for displaying the tooltip. Uses the [`format`]({% slug api_intl_intlservice %}#toc-format) method of `IntlService`.
     * Contains one placeholder (`"{0}"`) which represents the value.
     * @default '{0}'
     */
    format;
    /**
     * Specifies the padding of the crosshair tooltip. A numeric value sets all paddings.
     * @default 0
     */
    padding;
    /**
     * Determines whether the Chart displays the crosshair tooltip of the Scatter chart X axis.
     * By default, the crosshair tooltip of the Scatter chart X axis is not visible.
     * @default false
     */
    visible;
    constructor(configurationService) {
        super('crosshair.tooltip', configurationService);
        this.configurationService = configurationService;
        this.markAsVisible();
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: XAxisCrosshairTooltipComponent, deps: [{ token: ConfigurationService }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: XAxisCrosshairTooltipComponent, isStandalone: true, selector: "kendo-chart-x-axis-item-crosshair-tooltip", inputs: { background: "background", border: "border", color: "color", font: "font", format: "format", padding: "padding", visible: "visible" }, usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: XAxisCrosshairTooltipComponent, decorators: [{
            type: Component,
            args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    selector: 'kendo-chart-x-axis-item-crosshair-tooltip',
                    template: '',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: ConfigurationService }]; }, propDecorators: { background: [{
                type: Input
            }], border: [{
                type: Input
            }], color: [{
                type: Input
            }], font: [{
                type: Input
            }], format: [{
                type: Input
            }], padding: [{
                type: Input
            }], visible: [{
                type: Input
            }] } });

/**
 * Represents the labels configuration of the X axis.
 */
class XAxisLabelsComponent extends SettingsComponent {
    configurationService;
    /**
     * Specifies the background color of the labels.
     */
    background;
    /**
     * Specifies the border configuration of the labels.
     */
    border;
    /**
     * Specifies the text color of the labels.
     */
    color;
    /**
     * Specifies a function that returns the content of the labels.
     */
    content;
    /**
     * Specifies the culture information for the labels.
     */
    culture;
    /**
     * Specifies the date formats for the labels.
     */
    dateFormats;
    /**
     * Specifies the font style of the labels.
     * @default '12px sans-serif'
     */
    font;
    /**
     * Specifies the format of the labels.
     */
    format;
    /**
     * Specifies the margin of the labels.
     */
    margin;
    /**
     * Specifies whether the labels are mirrored.
     */
    mirror;
    /**
     * Specifies the padding of the labels. A numeric value sets all paddings.
     * @default 0
     */
    padding;
    /**
     * Specifies the position of the axis labels. By default, labels are positioned next to the axis.
     * @default 'onAxis'
     */
    position;
    /**
     * Specifies the rotation angle of the labels. By default, the labels are not rotated. Can be set to `"auto"`.
     * In this case, the labels are rotated only if the slot size is not sufficient for the entire labels.
     * @default 0
     */
    rotation;
    /**
     * Specifies the number of labels to skip.
     * @default 1
     */
    skip;
    /**
     * Specifies the label rendering step&mdash;renders every n<sup>th</sup> label. By default, every label is rendered.
     * @default 1
     */
    step;
    /**
     * Determines whether the Chart displays the X-axis labels. By default, the X-axis labels are visible.
     * @default true
     */
    visible;
    /**
     * Specifies a function that returns a custom visual for the labels.
     */
    visual;
    constructor(configurationService) {
        super('labels', configurationService);
        this.configurationService = configurationService;
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: XAxisLabelsComponent, deps: [{ token: ConfigurationService }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: XAxisLabelsComponent, isStandalone: true, selector: "kendo-chart-x-axis-item-labels", inputs: { background: "background", border: "border", color: "color", content: "content", culture: "culture", dateFormats: "dateFormats", font: "font", format: "format", margin: "margin", mirror: "mirror", padding: "padding", position: "position", rotation: "rotation", skip: "skip", step: "step", visible: "visible", visual: "visual" }, usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: XAxisLabelsComponent, decorators: [{
            type: Component,
            args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    selector: 'kendo-chart-x-axis-item-labels',
                    template: '',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: ConfigurationService }]; }, propDecorators: { background: [{
                type: Input
            }], border: [{
                type: Input
            }], color: [{
                type: Input
            }], content: [{
                type: Input
            }], culture: [{
                type: Input
            }], dateFormats: [{
                type: Input
            }], font: [{
                type: Input
            }], format: [{
                type: Input
            }], margin: [{
                type: Input
            }], mirror: [{
                type: Input
            }], padding: [{
                type: Input
            }], position: [{
                type: Input
            }], rotation: [{
                type: Input
            }], skip: [{
                type: Input
            }], step: [{
                type: Input
            }], visible: [{
                type: Input
            }], visual: [{
                type: Input
            }] } });

/**
 * Represents the configuration of the X-axis notes.
 * For an example on the basic usage of the `XAxisNotesComponent`,
 * refer to the [demo on the `XAxisComponent`]({% slug api_charts_xaxiscomponent %})
 * or to the documentation about the
 * [axis notes]({% slug notes_chart_charts %}#toc-axis-notes).
 *
 * @example
 * ```html
 * <kendo-chart>
 *  <kendo-chart-x-axis>
 *   <kendo-chart-x-axis-item>
 *    <kendo-chart-x-axis-item-notes>
 *    </kendo-chart-x-axis-item-notes>
 *  </kendo-chart-x-axis-item>
 *  </kendo-chart-x-axis>
 * </kendo-chart>
 * ```
 *
 * @remarks
 * Supported children components are: {@link XAxisNotesIconComponent} and {@link XAxisNotesLabelComponent}.
 */
class XAxisNotesComponent extends SettingsComponent {
    configurationService;
    /**
     * Specifies the data for the notes.
     */
    data;
    /**
     * Specifies the line configuration of the notes.
     */
    line;
    /**
     * Specifies the position of the notes.
     */
    position;
    /**
     * Specifies a function that returns a custom visual for the notes.
     */
    visual;
    // These options are also available as child components
    /**
     * Specifies the icon configuration of the notes.
     */
    icon;
    /**
     * Specifies the label configuration of the notes.
     */
    label;
    constructor(configurationService) {
        super('notes', configurationService);
        this.configurationService = configurationService;
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: XAxisNotesComponent, deps: [{ token: ConfigurationService }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: XAxisNotesComponent, isStandalone: true, selector: "kendo-chart-x-axis-item-notes", inputs: { data: "data", line: "line", position: "position", visual: "visual", icon: "icon", label: "label" }, usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: XAxisNotesComponent, decorators: [{
            type: Component,
            args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    selector: 'kendo-chart-x-axis-item-notes',
                    template: '',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: ConfigurationService }]; }, propDecorators: { data: [{
                type: Input
            }], line: [{
                type: Input
            }], position: [{
                type: Input
            }], visual: [{
                type: Input
            }], icon: [{
                type: Input
            }], label: [{
                type: Input
            }] } });

/**
 * Represents the notes icon configuration of the X axis.
 */
class XAxisNotesIconComponent extends SettingsComponent {
    configurationService;
    /**
     * Specifies the background color of the icon.
     */
    background;
    /**
     * Specifies the border configuration of the icon.
     */
    border;
    /**
     * Specifies the size of the icon.
     */
    size;
    /**
     * Specifies the shape of the notes icon.
     * @default 'circle'
     */
    type;
    /**
     * Determines whether the notes icon is visible.
     * @default true
     */
    visible;
    constructor(configurationService) {
        super('notes.icon', configurationService);
        this.configurationService = configurationService;
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: XAxisNotesIconComponent, deps: [{ token: ConfigurationService }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: XAxisNotesIconComponent, isStandalone: true, selector: "kendo-chart-x-axis-item-notes-icon", inputs: { background: "background", border: "border", size: "size", type: "type", visible: "visible" }, usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: XAxisNotesIconComponent, decorators: [{
            type: Component,
            args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    selector: 'kendo-chart-x-axis-item-notes-icon',
                    template: '',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: ConfigurationService }]; }, propDecorators: { background: [{
                type: Input
            }], border: [{
                type: Input
            }], size: [{
                type: Input
            }], type: [{
                type: Input
            }], visible: [{
                type: Input
            }] } });

/**
 * Represents the notes label configuration of the X axis.
 */
class XAxisNotesLabelComponent extends SettingsComponent {
    configurationService;
    /**
     * Specifies the background color of the label.
     */
    background;
    /**
     * Specifies the border configuration of the label.
     */
    border;
    /**
     * Specifies the text color of the label.
     */
    color;
    /**
     * Specifies a function that returns the content of the notes label.
     */
    content;
    /**
     * Specifies the font style of the label.
     * @default '12px sans-serif''
     */
    font;
    /**
     * Specifies the format for displaying the notes label. Uses the [`format`]({% slug api_intl_intlservice %}#toc-format) method of `IntlService`.
     * Contains one placeholder (`"{0}"`) which represents the axis value.
     * @default '{0}'
     */
    format;
    /**
     * Specifies the position of the labels.
     * @default 'inside'
     */
    position;
    /**
     * Specifies the rotation angle of the label. By default, the label is not rotated.
     * @default 0
     */
    rotation;
    /**
     * Determines whether the Chart displays the X-axis notes label.
     * By default, the X-axis notes label is visible.
     * @default true
     */
    visible;
    constructor(configurationService) {
        super('notes.label', configurationService);
        this.configurationService = configurationService;
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: XAxisNotesLabelComponent, deps: [{ token: ConfigurationService }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: XAxisNotesLabelComponent, isStandalone: true, selector: "kendo-chart-x-axis-item-notes-label", inputs: { background: "background", border: "border", color: "color", content: "content", font: "font", format: "format", position: "position", rotation: "rotation", visible: "visible" }, usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: XAxisNotesLabelComponent, decorators: [{
            type: Component,
            args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    selector: 'kendo-chart-x-axis-item-notes-label',
                    template: '',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: ConfigurationService }]; }, propDecorators: { background: [{
                type: Input
            }], border: [{
                type: Input
            }], color: [{
                type: Input
            }], content: [{
                type: Input
            }], font: [{
                type: Input
            }], format: [{
                type: Input
            }], position: [{
                type: Input
            }], rotation: [{
                type: Input
            }], visible: [{
                type: Input
            }] } });

/**
 * Represents the title configuration of the Scatter Chart X axis.
 */
class XAxisTitleComponent extends SettingsComponent {
    configurationService;
    /**
     * Specifies the background color of the title.
     */
    background;
    /**
     * Specifies the border configuration of the title.
     */
    border;
    /**
     * Specifies the text color of the title.
     */
    color;
    /**
     * Specifies the font style of the title.
     * @default 'bold 16px sans-serif'
     */
    font;
    /**
     * Specifies the margin of the title. A numeric value sets all margins.
     * @default 5
     */
    margin;
    /**
     * Specifies the padding of the title. A numeric value sets all paddings.
     * @default 5
     */
    padding;
    /**
     * Specifies the position of the title.
     * @default 'center'
     */
    position;
    /**
     * Specifies the rotation angle of the title. By default, the title is not rotated.
     * @default 0
     */
    rotation;
    /**
     * Specifies the text of the title.
     */
    text;
    /**
     * Determines whether the Chart displays the X axis title of the Scatter Chart.
     * By default, the X-axis title of the Scatter Chart is visible.
     * @default true
     */
    visible;
    /**
     * Specifies a function that returns a custom visual for the title.
     */
    visual;
    constructor(configurationService) {
        super('title', configurationService);
        this.configurationService = configurationService;
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: XAxisTitleComponent, deps: [{ token: ConfigurationService }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: XAxisTitleComponent, isStandalone: true, selector: "kendo-chart-x-axis-item-title", inputs: { background: "background", border: "border", color: "color", font: "font", margin: "margin", padding: "padding", position: "position", rotation: "rotation", text: "text", visible: "visible", visual: "visual" }, usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: XAxisTitleComponent, decorators: [{
            type: Component,
            args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    selector: 'kendo-chart-x-axis-item-title',
                    template: '',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: ConfigurationService }]; }, propDecorators: { background: [{
                type: Input
            }], border: [{
                type: Input
            }], color: [{
                type: Input
            }], font: [{
                type: Input
            }], margin: [{
                type: Input
            }], padding: [{
                type: Input
            }], position: [{
                type: Input
            }], rotation: [{
                type: Input
            }], text: [{
                type: Input
            }], visible: [{
                type: Input
            }], visual: [{
                type: Input
            }] } });

/**
 * Represents the Kendo UI for Angular Chart Y Axis Item component
 * ([see example]({% slug api_charts_yaxiscomponent %})).
 *
 * @example
 * ```html
 * <kendo-chart>
 *  <kendo-chart-y-axis>
 *   <kendo-chart-y-axis-item color="indigo" [line]="{ width: 2 }">
 *   </kendo-chart-y-axis-item>
 * </kendo-chart-y-axis>
 * </kendo-chart>
 * ```
 *
 * @remarks
 * Supported children components are: {@link YAxisCrosshairComponent}, {@link YAxisLabelsComponent}, {@link YAxisNotesComponent}, and {@link YAxisTitleComponent}.
 */
class YAxisItemComponent extends CollectionItemComponent {
    configurationService;
    collectionService;
    /**
     * Specifies the value or array of values at which the axis crosses with another axis.
     */
    axisCrossingValue;
    /**
     * Specifies the background color of the axis.
     */
    background;
    /**
     * Specifies the base time unit for the axis.
     */
    baseUnit;
    /**
     * Specifies the categories for the axis.
     */
    categories;
    /**
     * Specifies the color of the axis.
     */
    color;
    /**
     * Specifies the configuration of the axis line.
     */
    line;
    /**
     * Specifies the configuration of the major grid lines.
     */
    majorGridLines;
    /**
     * Specifies the configuration of the major ticks.
     */
    majorTicks;
    /**
     * Specifies the interval between major divisions.
     */
    majorUnit;
    /**
     * Specifies the maximum value of the axis.
     */
    max;
    /**
     * Specifies the minimum value of the axis.
     */
    min;
    /**
     * Specifies the configuration of the minor grid lines.
     */
    minorGridLines;
    /**
     * Specifies the configuration of the minor ticks.
     */
    minorTicks;
    /**
     * Specifies the interval between minor divisions.
     */
    minorUnit;
    /**
     * Specifies the unique name of the axis.
     */
    name;
    /**
     * Determines whether the Chart prevents the automatic axis range from snapping to zero.
     * Set to `false` to force the automatic axis range to snap to zero.
     * @default false
     */
    narrowRange;
    /**
     * Specifies the name of the pane that the axis renders in.
     */
    pane;
    /**
     * Specifies the plot bands configuration.
     */
    plotBands;
    /**
     * Determines whether the value axis direction is reversed.
     * By default, the values increase from left to right and from bottom to top.
     * @default false
     */
    reverse;
    /**
     * Specifies the axis type.
     *
     * The options are `numeric` for a numeric axis, `date` for a specialized axis for displaying chronological data, and `log` for a logarithmic axis.
     *
     * When the series Y value is of the `date` type, the Chart automatically switches to a date axis.
     * To avoid this behavior, set the `type`.
     * @default 'numeric'
     */
    type;
    /**
     * Determines whether the Chart displays the Y axis. By default, the Y axis is visible.
     * @default true
     */
    visible;
    // These options are also available as child components
    /**
     * Specifies the configuration of the crosshair.
     */
    crosshair;
    /**
     * Specifies the configuration of the labels.
     */
    labels;
    /**
     * Specifies the configuration of the notes.
     */
    notes;
    /**
     * Specifies the configuration of the title.
     */
    title;
    constructor(configurationService, collectionService) {
        super(configurationService, collectionService);
        this.configurationService = configurationService;
        this.collectionService = collectionService;
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: YAxisItemComponent, deps: [{ token: ConfigurationService }, { token: CollectionService }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: YAxisItemComponent, isStandalone: true, selector: "kendo-chart-y-axis-item", inputs: { axisCrossingValue: "axisCrossingValue", background: "background", baseUnit: "baseUnit", categories: "categories", color: "color", line: "line", majorGridLines: "majorGridLines", majorTicks: "majorTicks", majorUnit: "majorUnit", max: "max", min: "min", minorGridLines: "minorGridLines", minorTicks: "minorTicks", minorUnit: "minorUnit", name: "name", narrowRange: "narrowRange", pane: "pane", plotBands: "plotBands", reverse: "reverse", type: "type", visible: "visible", crosshair: "crosshair", labels: "labels", notes: "notes", title: "title" }, providers: [ConfigurationService], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: YAxisItemComponent, decorators: [{
            type: Component,
            args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [ConfigurationService],
                    selector: 'kendo-chart-y-axis-item',
                    template: '',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: ConfigurationService }, { type: CollectionService }]; }, propDecorators: { axisCrossingValue: [{
                type: Input
            }], background: [{
                type: Input
            }], baseUnit: [{
                type: Input
            }], categories: [{
                type: Input
            }], color: [{
                type: Input
            }], line: [{
                type: Input
            }], majorGridLines: [{
                type: Input
            }], majorTicks: [{
                type: Input
            }], majorUnit: [{
                type: Input
            }], max: [{
                type: Input
            }], min: [{
                type: Input
            }], minorGridLines: [{
                type: Input
            }], minorTicks: [{
                type: Input
            }], minorUnit: [{
                type: Input
            }], name: [{
                type: Input
            }], narrowRange: [{
                type: Input
            }], pane: [{
                type: Input
            }], plotBands: [{
                type: Input
            }], reverse: [{
                type: Input
            }], type: [{
                type: Input
            }], visible: [{
                type: Input
            }], crosshair: [{
                type: Input
            }], labels: [{
                type: Input
            }], notes: [{
                type: Input
            }], title: [{
                type: Input
            }] } });

/**
 * Represents a collection of one or more Y-axis configuration components.
 *
 * @example
 * ```html
 * <kendo-chart>
 *     <kendo-chart-y-axis>
 *         <kendo-chart-y-axis-item
 *           [background]="'rgba(100, 100, 100, 0.2)'"
 *           color="red"
 *           [notes]="notesConfig"
 *           [crosshair]="crosshairConfig">
 *         </kendo-chart-y-axis-item>
 *         <kendo-chart-y-axis-item name="secondAxis">
 *         </kendo-chart-y-axis-item>
 *     </kendo-chart-y-axis>
 * </kendo-chart>
 * ```
 *
 * @remarks
 * Supported children components are: {@link YAxisItemComponent}.
 */
class YAxisComponent extends CollectionComponent {
    configurationService;
    collectionService;
    children;
    constructor(configurationService, collectionService) {
        super('yAxis', configurationService, collectionService);
        this.configurationService = configurationService;
        this.collectionService = collectionService;
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: YAxisComponent, deps: [{ token: ConfigurationService }, { token: CollectionService }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: YAxisComponent, isStandalone: true, selector: "kendo-chart-y-axis", providers: [CollectionService], queries: [{ propertyName: "children", predicate: YAxisItemComponent }], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: YAxisComponent, decorators: [{
            type: Component,
            args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [CollectionService],
                    selector: 'kendo-chart-y-axis',
                    template: '',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: ConfigurationService }, { type: CollectionService }]; }, propDecorators: { children: [{
                type: ContentChildren,
                args: [YAxisItemComponent]
            }] } });

/**
 * Represents the crosshair configuration options of the Y axis
 * ([see example]({% slug api_charts_yaxiscomponent %})).
 *
 * @example
 * ```html
 * <kendo-chart>
 *  <kendo-chart-y-axis>
 *   <kendo-chart-y-axis-item>
 *    <kendo-chart-y-axis-item-crosshair [visible]="true" color="#ff0000" [width]="2">
 *     <kendo-chart-y-axis-item-crosshair-tooltip format="c"></kendo-chart-y-axis-item-crosshair-tooltip>
 *    </kendo-chart-y-axis-item-crosshair>
 *   </kendo-chart-y-axis-item>
 *  </kendo-chart-y-axis>
 * </kendo-chart>
 * ```
 *
 * @remarks
 * Supported children components are: {@link YAxisCrosshairTooltipComponent}.
 */
class YAxisCrosshairComponent extends SettingsComponent {
    configurationService;
    /**
     * Specifies the color of the crosshair.
     */
    color;
    /**
     * Specifies the opacity of the crosshair.
     */
    opacity;
    /**
     * Determines whether the crosshair is visible.
     */
    visible;
    /**
     * Specifies the width of the crosshair.
     */
    width;
    // These options are also available as child components.
    /**
     * Specifies the tooltip configuration of the crosshair.
     */
    tooltip;
    constructor(configurationService) {
        super('crosshair', configurationService);
        this.configurationService = configurationService;
        this.markAsVisible();
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: YAxisCrosshairComponent, deps: [{ token: ConfigurationService }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: YAxisCrosshairComponent, isStandalone: true, selector: "kendo-chart-y-axis-item-crosshair", inputs: { color: "color", opacity: "opacity", visible: "visible", width: "width", tooltip: "tooltip" }, usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: YAxisCrosshairComponent, decorators: [{
            type: Component,
            args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    selector: 'kendo-chart-y-axis-item-crosshair',
                    template: '',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: ConfigurationService }]; }, propDecorators: { color: [{
                type: Input
            }], opacity: [{
                type: Input
            }], visible: [{
                type: Input
            }], width: [{
                type: Input
            }], tooltip: [{
                type: Input
            }] } });

/**
 * Represents the configuration options of the crosshair tooltip in the Y axis.
 * The crosshair tooltip is displayed when the `visible` option is set to `true`.
 */
class YAxisCrosshairTooltipComponent extends SettingsComponent {
    configurationService;
    /**
     * Specifies the background color of the tooltip.
     */
    background;
    /**
     * Specifies the border configuration of the tooltip.
     */
    border;
    /**
     * Specifies the text color of the tooltip.
     */
    color;
    /**
     * Specifies the font style of the tooltip.
     */
    font;
    /**
     * Specifies the format of the tooltip.
     */
    format;
    /**
     * Specifies the padding of the tooltip. A numeric value sets all paddings.
     */
    padding;
    /**
     * Determines whether the tooltip is visible.
     */
    visible;
    constructor(configurationService) {
        super('crosshair.tooltip', configurationService);
        this.configurationService = configurationService;
        this.markAsVisible();
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: YAxisCrosshairTooltipComponent, deps: [{ token: ConfigurationService }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: YAxisCrosshairTooltipComponent, isStandalone: true, selector: "kendo-chart-y-axis-item-crosshair-tooltip", inputs: { background: "background", border: "border", color: "color", font: "font", format: "format", padding: "padding", visible: "visible" }, usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: YAxisCrosshairTooltipComponent, decorators: [{
            type: Component,
            args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    selector: 'kendo-chart-y-axis-item-crosshair-tooltip',
                    template: '',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: ConfigurationService }]; }, propDecorators: { background: [{
                type: Input
            }], border: [{
                type: Input
            }], color: [{
                type: Input
            }], font: [{
                type: Input
            }], format: [{
                type: Input
            }], padding: [{
                type: Input
            }], visible: [{
                type: Input
            }] } });

/**
 * Represents the Y-axis labels configuration.
 */
class YAxisLabelsComponent extends SettingsComponent {
    configurationService;
    /**
     * Specifies the background color of the labels.
     */
    background;
    /**
     * Specifies the border configuration of the labels.
     */
    border;
    /**
     * Specifies the text color of the labels.
     */
    color;
    /**
     * Specifies a function that returns the content of the labels.
     */
    content;
    /**
     * Specifies the culture used for formatting the labels.
     */
    culture;
    /**
     * Specifies the date formats for displaying the labels.
     */
    dateFormats;
    /**
     * Specifies the font style of the labels.
     * @default '12px sans-serif'
     */
    font;
    /**
     * Specifies the format for displaying the labels. Uses the [`format`]({% slug api_intl_intlservice %}#toc-format) method of `IntlService`.
     * Contains one placeholder (`"{0}"`) which represents the category value.
     * @default '{0}'
     */
    format;
    /**
     * Specifies the margin of the labels. A numeric value sets all margins.
     * @default 0
     */
    margin;
    /**
     * Determines whether the Chart mirrors the axis labels and ticks. If the labels are normally on the
     * left side of the axis, the mirroring of the axis renders them to the right.
     * @default false
     */
    mirror;
    /**
     * Specifies the padding of the labels. A numeric value sets all paddings.
     * @default 0
     */
    padding;
    /**
     * Specifies the position of the axis labels. By default, labels are positioned next to the axis.
     * @default 'onAxis'
     */
    position;
    /**
     * Specifies the rotation angle of the labels. By default, the labels are not rotated.
     * @default 0
     */
    rotation;
    /**
     * Specifies the number of labels to skip.
     * @default 0
     */
    skip;
    /**
     * Specifies the label rendering step&mdash;renders every `n`<sup>th</sup> label. By default, every label is rendered.
     * @default 1
     */
    step;
    /**
     * Determines whether the Chart displays the Y-axis labels. By default, the Y-axis labels are visible.
     * @default true
     */
    visible;
    /**
     * Specifies a function that returns a custom visual for the labels.
     */
    visual;
    constructor(configurationService) {
        super('labels', configurationService);
        this.configurationService = configurationService;
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: YAxisLabelsComponent, deps: [{ token: ConfigurationService }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: YAxisLabelsComponent, isStandalone: true, selector: "kendo-chart-y-axis-item-labels", inputs: { background: "background", border: "border", color: "color", content: "content", culture: "culture", dateFormats: "dateFormats", font: "font", format: "format", margin: "margin", mirror: "mirror", padding: "padding", position: "position", rotation: "rotation", skip: "skip", step: "step", visible: "visible", visual: "visual" }, usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: YAxisLabelsComponent, decorators: [{
            type: Component,
            args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    selector: 'kendo-chart-y-axis-item-labels',
                    template: '',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: ConfigurationService }]; }, propDecorators: { background: [{
                type: Input
            }], border: [{
                type: Input
            }], color: [{
                type: Input
            }], content: [{
                type: Input
            }], culture: [{
                type: Input
            }], dateFormats: [{
                type: Input
            }], font: [{
                type: Input
            }], format: [{
                type: Input
            }], margin: [{
                type: Input
            }], mirror: [{
                type: Input
            }], padding: [{
                type: Input
            }], position: [{
                type: Input
            }], rotation: [{
                type: Input
            }], skip: [{
                type: Input
            }], step: [{
                type: Input
            }], visible: [{
                type: Input
            }], visual: [{
                type: Input
            }] } });

/**
 * Represents the configuration of the Y-axis notes
 * ([see example]({% slug api_charts_yaxiscomponent %})).
 *
 * @example
 * ```html
 * <kendo-chart>
 *  <kendo-chart-y-axis>
 *   <kendo-chart-y-axis-item>
 *    <kendo-chart-y-axis-item-notes [visible]="true" position="top">
 *    </kendo-chart-y-axis-item-notes>
 *   </kendo-chart-y-axis-item>
 *  </kendo-chart-y-axis>
 * </kendo-chart>
 * ```
 *
 * @remarks
 * Supported children components are: {@link YAxisNotesIconComponent} and {@link YAxisNotesLabelComponent}.
 */
class YAxisNotesComponent extends SettingsComponent {
    configurationService;
    /**
     * Specifies the data for the notes.
     */
    data;
    /**
     * Specifies the line configuration of the notes.
     */
    line;
    /**
     * Specifies the position of the notes.
     */
    position;
    /**
     * Specifies a function that returns a custom visual for the notes.
     */
    visual;
    // These options are also available as child components
    /**
     * Specifies the icon configuration of the notes.
     */
    icon;
    /**
     * Specifies the label configuration of the notes.
     */
    label;
    constructor(configurationService) {
        super('notes', configurationService);
        this.configurationService = configurationService;
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: YAxisNotesComponent, deps: [{ token: ConfigurationService }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: YAxisNotesComponent, isStandalone: true, selector: "kendo-chart-y-axis-item-notes", inputs: { data: "data", line: "line", position: "position", visual: "visual", icon: "icon", label: "label" }, usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: YAxisNotesComponent, decorators: [{
            type: Component,
            args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    selector: 'kendo-chart-y-axis-item-notes',
                    template: '',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: ConfigurationService }]; }, propDecorators: { data: [{
                type: Input
            }], line: [{
                type: Input
            }], position: [{
                type: Input
            }], visual: [{
                type: Input
            }], icon: [{
                type: Input
            }], label: [{
                type: Input
            }] } });

/**
 * Represents the configuration of the notes icon in the Y axis.
 */
class YAxisNotesIconComponent extends SettingsComponent {
    configurationService;
    /**
     * Specifies the background color of the icon.
     */
    background;
    /**
     * Specifies the border configuration of the icon.
     */
    border;
    /**
     * Specifies the size of the icon.
     */
    size;
    /**
     * Specifies the shape of the notes icon.
     * @default 'circle'
     */
    type;
    /**
     * Determines whether the notes icon is visible.
     * @default true
     */
    visible;
    constructor(configurationService) {
        super('notes.icon', configurationService);
        this.configurationService = configurationService;
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: YAxisNotesIconComponent, deps: [{ token: ConfigurationService }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: YAxisNotesIconComponent, isStandalone: true, selector: "kendo-chart-y-axis-item-notes-icon", inputs: { background: "background", border: "border", size: "size", type: "type", visible: "visible" }, usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: YAxisNotesIconComponent, decorators: [{
            type: Component,
            args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    selector: 'kendo-chart-y-axis-item-notes-icon',
                    template: '',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: ConfigurationService }]; }, propDecorators: { background: [{
                type: Input
            }], border: [{
                type: Input
            }], size: [{
                type: Input
            }], type: [{
                type: Input
            }], visible: [{
                type: Input
            }] } });

/**
 * Represents the configuration of the notes label in the Y axis.
 */
class YAxisNotesLabelComponent extends SettingsComponent {
    configurationService;
    /**
     * Specifies the background color of the label.
     */
    background;
    /**
     * Specifies the border configuration of the label.
     */
    border;
    /**
     * Specifies the text color of the label.
     */
    color;
    /**
     * Specifies a function that returns the content of the notes label.
     */
    content;
    /**
     * Specifies the font style of the label.
     * @default '12px sans-serif'
     */
    font;
    /**
     * Specifies the format for displaying the notes label. Uses the [`format`]({% slug api_intl_intlservice %}#toc-format) method of `IntlService`.
     * Contains one placeholder (`"{0}"`) which represents the axis value.
     * @default '{0}'
     */
    format;
    /**
     * Specifies the position of the labels.
     * @default 'inside'
     */
    position;
    /**
     * Specifies the rotation angle of the label. By default, the label is not rotated.
     * @default 0
     */
    rotation;
    /**
     * Determines whether the Chart displays the Y-axis notes label.
     * By default, the Y-axis notes label is visible.
     * @default true
     */
    visible;
    constructor(configurationService) {
        super('notes.label', configurationService);
        this.configurationService = configurationService;
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: YAxisNotesLabelComponent, deps: [{ token: ConfigurationService }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: YAxisNotesLabelComponent, isStandalone: true, selector: "kendo-chart-y-axis-item-notes-label", inputs: { background: "background", border: "border", color: "color", content: "content", font: "font", format: "format", position: "position", rotation: "rotation", visible: "visible" }, usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: YAxisNotesLabelComponent, decorators: [{
            type: Component,
            args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    selector: 'kendo-chart-y-axis-item-notes-label',
                    template: '',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: ConfigurationService }]; }, propDecorators: { background: [{
                type: Input
            }], border: [{
                type: Input
            }], color: [{
                type: Input
            }], content: [{
                type: Input
            }], font: [{
                type: Input
            }], format: [{
                type: Input
            }], position: [{
                type: Input
            }], rotation: [{
                type: Input
            }], visible: [{
                type: Input
            }] } });

/**
 * Represents the title configuration of the Scatter Chart Y axis.
 */
class YAxisTitleComponent extends SettingsComponent {
    configurationService;
    /**
     * Specifies the background color of the title.
     */
    background;
    /**
     * Specifies the border configuration of the title.
     */
    border;
    /**
     * Specifies the text color of the title.
     */
    color;
    /**
     * Specifies the font style of the title.
     * @default 'bold 16px sans-serif'
     */
    font;
    /**
     * Specifies the margin of the title. A numeric value sets all margins.
     * @default 5
     */
    margin;
    /**
     * Specifies the padding of the title. A numeric value sets all paddings.
     * @default 0
     */
    padding;
    /**
     * Specifies the position of the title.
     * @default 'center'
     */
    position;
    /**
     * Specifies the rotation angle of the title. By default, the title is not rotated.
     * @default 0
     */
    rotation;
    /**
     * Specifies the text of the title.
     */
    text;
    /**
     * Determines whether the Chart displays the Scatter Chart Y-axis title.
     * By default, the Scatter Chart Y-axis title is visible.
     * @default true
     */
    visible;
    /**
     * Specifies a function that returns a custom visual for the title.
     */
    visual;
    constructor(configurationService) {
        super('title', configurationService);
        this.configurationService = configurationService;
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: YAxisTitleComponent, deps: [{ token: ConfigurationService }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: YAxisTitleComponent, isStandalone: true, selector: "kendo-chart-y-axis-item-title", inputs: { background: "background", border: "border", color: "color", font: "font", margin: "margin", padding: "padding", position: "position", rotation: "rotation", text: "text", visible: "visible", visual: "visual" }, usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: YAxisTitleComponent, decorators: [{
            type: Component,
            args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    selector: 'kendo-chart-y-axis-item-title',
                    template: '',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: ConfigurationService }]; }, propDecorators: { background: [{
                type: Input
            }], border: [{
                type: Input
            }], color: [{
                type: Input
            }], font: [{
                type: Input
            }], margin: [{
                type: Input
            }], padding: [{
                type: Input
            }], position: [{
                type: Input
            }], rotation: [{
                type: Input
            }], text: [{
                type: Input
            }], visible: [{
                type: Input
            }], visual: [{
                type: Input
            }] } });

/**
 * Represents the Kendo UI for Angular Chart Zoomable component.
 * Use this component to enable zooming functionality for Charts.
 * Zooming is not available for the `Donut`, `Pie`, `Funnel`, `Pyramid`, `Polar`, and `Radar` series.
 *
 * @example
 *
 * ```html-no-run
 * <kendo-chart>
 *   <kendo-chart-zoomable [mousewheel]="false"></kendo-chart-zoomable>
 * </kendo-chart>
 * ```
 */
class ZoomableComponent extends SettingsComponent {
    configurationService;
    /**
     * Specifies the mousewheel zoom configuration.
     */
    mousewheel;
    /**
     * Specifies the selection zoom configuration.
     */
    selection;
    constructor(configurationService) {
        super('zoomable', configurationService);
        this.configurationService = configurationService;
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: ZoomableComponent, deps: [{ token: ConfigurationService }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: ZoomableComponent, isStandalone: true, selector: "kendo-chart-zoomable", inputs: { mousewheel: "mousewheel", selection: "selection" }, usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: ZoomableComponent, decorators: [{
            type: Component,
            args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    selector: 'kendo-chart-zoomable',
                    template: '',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: ConfigurationService }]; }, propDecorators: { mousewheel: [{
                type: Input
            }], selection: [{
                type: Input
            }] } });

// Re-export event types

/**
 * The arguments for the `navigatorFilter` event.
 */
class NavigatorFilterEvent extends BaseEvent {
    /**
     * The start of the navigator range.
     */
    from;
    /**
     * The end of the navigator range.
     */
    to;
    /**
     * @hidden
     */
    constructor(e, sender) {
        super(sender);
        this.from = e.from;
        this.to = e.to;
    }
}

// Re-export event types

/**
 * @hidden
 */
class RootConfigurationService extends ConfigurationService {
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: RootConfigurationService, deps: null, target: i0.ɵɵFactoryTarget.Injectable });
    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: RootConfigurationService });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: RootConfigurationService, decorators: [{
            type: Injectable
        }] });

const EVENT_MAP$1 = {
    navigatorFilter: NavigatorFilterEvent
};
/**
 * @hidden
 */
class StockInstanceEventService extends InstanceEventService$1 {
    create(name, args, sender) {
        if (EVENT_MAP$1[name]) {
            return new EVENT_MAP$1[name](args, sender);
        }
        return super.create(name, args, sender);
    }
}

const NAVIGATOR_DEFAULTS = {
    autoBindElements: true,
    liveDrag: false,
    partialRedraw: true
};
/**
 * Represents the Kendo UI for Angular StockChart component.
 *
 * The StockChart displays financial data with a navigator for date range selection.
 * It combines a main chart with a smaller navigator chart for easy data exploration.
 *
 * @example
 * ```ts
 * import { Component } from '@angular/core';
 *
 * @Component({
 *   selector: 'my-app',
 *   template: `
 *       <kendo-stockchart>
 *           <kendo-chart-series>
 *               <kendo-chart-series-item type="line" [data]="data" field="value" categoryField="date">
 *               </kendo-chart-series-item>
 *           </kendo-chart-series>
 *           <kendo-chart-navigator>
 *               <kendo-chart-navigator-select to="2017/02/01">
 *               </kendo-chart-navigator-select>
 *               <kendo-chart-navigator-series>
 *                   <kendo-chart-navigator-series-item type="area" [data]="data" field="value" categoryField="date">
 *                   </kendo-chart-navigator-series-item>
 *               </kendo-chart-navigator-series>
 *           </kendo-chart-navigator>
 *       </kendo-stockchart>
 *   `,
 * })
 * export class AppComponent {
 * }
 * ```
 *
 * @remarks
 * Supported children components are: {@link SeriesComponent}, {@link NavigatorComponent}, {@link TitleComponent}, {@link SubtitleComponent}, {@link AxisDefaultsComponent},
 * {@link ChartAreaComponent}, {@link CategoryAxisComponent}, {@link LegendComponent}, {@link PaneDefaultsComponent}, {@link PanesComponent}, {@link PlotAreaComponent},
 * {@link SeriesDefaultsComponent}, {@link ValueAxisComponent}, {@link TooltipComponent}, {@link XAxisComponent}, and {@link YAxisComponent}.
 */
class StockChartComponent extends ChartComponent {
    configurationService;
    themeService;
    element;
    intl;
    localizationService;
    ngZone;
    instanceEventService;
    changeDetector;
    renderer;
    /**
     * Specifies the configuration options for the data navigator.
     *
     * The navigator provides a way to select and filter data ranges.
     */
    navigator;
    /**
     * @hidden
     */
    pannable;
    /**
     * @hidden
     */
    zoomable;
    /**
     * @hidden
     */
    drilldown = new EventEmitter();
    /**
     * @hidden
     */
    drilldownLevelChange = new EventEmitter();
    /**
     * @hidden
     */
    get drilldownLevel() {
        return this.drilldownState.length;
    }
    /**
     * Fires when the navigator range is changed.
     *
     * Use this event to respond to user interactions with the navigator.
     */
    navigatorFilter = new EventEmitter();
    /**
     * @hidden
     */
    showLicenseWatermark = false;
    redrawSlaves = false;
    hostClasses = ['k-chart', 'k-stockchart'];
    constructor(configurationService, themeService, element, intl, localizationService, ngZone, instanceEventService, changeDetector, renderer) {
        super(configurationService, themeService, element, intl, localizationService, ngZone, instanceEventService, changeDetector, renderer);
        this.configurationService = configurationService;
        this.themeService = themeService;
        this.element = element;
        this.intl = intl;
        this.localizationService = localizationService;
        this.ngZone = ngZone;
        this.instanceEventService = instanceEventService;
        this.changeDetector = changeDetector;
        this.renderer = renderer;
        const isValid = validatePackage(packageMetadata);
        this.showLicenseWatermark = shouldShowValidationUI(isValid);
    }
    /**
     * Prevents the navigator pane from redrawing when the StockChart options are updated.
     *
     * Use this method when you need to update only the main series data for the selected period.
     * Call this method before updating the Chart options to improve performance.
     */
    skipNavigatorRedraw() {
        this.redrawSlaves = true;
    }
    createInstance(element, observer) {
        this.applyNavigatorDefaults();
        if (this.isDevMode() && (this.options.zoomable || this.options.pannable)) {
            throw new Error('The pannable and zoomable options are not supported by the StockChart component.');
        }
        this.instance = new StockChart(element, this.options, this.theme, {
            intlService: this.intl,
            observer: observer,
            rtl: this.rtl,
            sender: this
        });
    }
    updateOptions() {
        this.applyNavigatorDefaults();
        if (this.redrawSlaves) {
            this.instance.applyOptions(this.options);
            this.instance.bindCategories();
            this.instance.navigator.redrawSlaves();
        }
        else {
            this.instance.setOptions(this.options);
        }
        this.redrawSlaves = false;
    }
    applyNavigatorDefaults() {
        this.options.navigator = Object.assign({}, this.options.navigator, NAVIGATOR_DEFAULTS);
    }
    isDevMode() {
        return isDevMode();
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: StockChartComponent, deps: [{ token: ConfigurationService }, { token: ThemeService }, { token: i0.ElementRef }, { token: i3.IntlService }, { token: i1$1.LocalizationService }, { token: i0.NgZone }, { token: StockInstanceEventService }, { token: i0.ChangeDetectorRef }, { token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: StockChartComponent, isStandalone: true, selector: "kendo-stockchart", inputs: { navigator: "navigator", pannable: "pannable", zoomable: "zoomable", drilldownLevel: "drilldownLevel" }, outputs: { drilldown: "drilldown", drilldownLevelChange: "drilldownLevelChange", navigatorFilter: "navigatorFilter" }, providers: [
            ConfigurationService,
            TooltipTemplateService,
            { provide: RootConfigurationService, useExisting: ConfigurationService },
            StockInstanceEventService,
            LocalizationService,
            {
                provide: L10N_PREFIX,
                useValue: 'kendo.chart'
            }
        ], exportAs: ["kendoStockChart"], usesInheritance: true, ngImport: i0, template: `
        <div #surface class="k-chart-surface"></div>
        <kendo-chart-crosshair-tooltips-container [popupSettings]="popupSettings">
        </kendo-chart-crosshair-tooltips-container>
        <kendo-chart-tooltip-popup (leave)="tooltipMouseleave($event)" [popupSettings]="popupSettings">
        </kendo-chart-tooltip-popup>
        <kendo-resize-sensor (resize)="onResize()"></kendo-resize-sensor>

        <div kendoWatermarkOverlay *ngIf="showLicenseWatermark"></div>
    `, isInline: true, dependencies: [{ kind: "component", type: CrosshairTooltipsContainerComponent, selector: "kendo-chart-crosshair-tooltips-container", inputs: ["popupSettings"] }, { kind: "component", type: TooltipPopupComponent, selector: "kendo-chart-tooltip-popup", inputs: ["animate", "classNames", "wrapperClass"], outputs: ["leave"] }, { kind: "component", type: ResizeSensorComponent, selector: "kendo-resize-sensor", inputs: ["rateLimit"], outputs: ["resize"] }, { kind: "directive", type: NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: WatermarkOverlayComponent, selector: "div[kendoWatermarkOverlay]" }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: StockChartComponent, decorators: [{
            type: Component,
            args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    exportAs: 'kendoStockChart',
                    providers: [
                        ConfigurationService,
                        TooltipTemplateService,
                        { provide: RootConfigurationService, useExisting: ConfigurationService },
                        StockInstanceEventService,
                        LocalizationService,
                        {
                            provide: L10N_PREFIX,
                            useValue: 'kendo.chart'
                        }
                    ],
                    selector: 'kendo-stockchart',
                    template: `
        <div #surface class="k-chart-surface"></div>
        <kendo-chart-crosshair-tooltips-container [popupSettings]="popupSettings">
        </kendo-chart-crosshair-tooltips-container>
        <kendo-chart-tooltip-popup (leave)="tooltipMouseleave($event)" [popupSettings]="popupSettings">
        </kendo-chart-tooltip-popup>
        <kendo-resize-sensor (resize)="onResize()"></kendo-resize-sensor>

        <div kendoWatermarkOverlay *ngIf="showLicenseWatermark"></div>
    `,
                    standalone: true,
                    imports: [CrosshairTooltipsContainerComponent, TooltipPopupComponent, ResizeSensorComponent, NgIf, WatermarkOverlayComponent]
                }]
        }], ctorParameters: function () { return [{ type: ConfigurationService }, { type: ThemeService }, { type: i0.ElementRef }, { type: i3.IntlService }, { type: i1$1.LocalizationService }, { type: i0.NgZone }, { type: StockInstanceEventService }, { type: i0.ChangeDetectorRef }, { type: i0.Renderer2 }]; }, propDecorators: { navigator: [{
                type: Input
            }], pannable: [{
                type: Input
            }], zoomable: [{
                type: Input
            }], drilldown: [{
                type: Output
            }], drilldownLevelChange: [{
                type: Output
            }], drilldownLevel: [{
                type: Input
            }], navigatorFilter: [{
                type: Output
            }] } });

/**
 * @hidden
 */
const PREFIX = new InjectionToken('configuration prefix');
/**
 * @hidden
 */
class PrefixConfigurationService extends ConfigurationService {
    rootService;
    prefix;
    constructor(rootService, prefix, ngZone) {
        super(ngZone);
        this.rootService = rootService;
        this.prefix = prefix;
    }
    push(store) {
        this.rootService.notify(new Change(this.prefix, store));
    }
    notify(change) {
        change.key = this.prefix + (change.key ? `.${change.key}` : '');
        this.rootService.notify(change);
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: PrefixConfigurationService, deps: [{ token: RootConfigurationService }, { token: PREFIX }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Injectable });
    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: PrefixConfigurationService });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: PrefixConfigurationService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: RootConfigurationService, decorators: [{
                    type: Inject,
                    args: [RootConfigurationService]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [PREFIX]
                }] }, { type: i0.NgZone }]; } });

/**
 * Represents the Kendo UI StockChart Navigator component for Angular ([see runnable example](slug:overview_stockchart_charts)).
 *
 * @example
 * ```ts
 * _@Component({
 *     selector: 'my-app',
 *       template: `
 *         <kendo-stockchart (navigatorFilter)="onNavigatorFilter($event)">
 *             <kendo-chart-series>
 *                <kendo-chart-series-item
 *                type="candlestick"
 *                 [data]="seriesData"
 *                 openField="Open"
 *                 closeField="Close"
 *                 lowField="Low"
 *                 highField="High"
 *                 categoryField="Date">
 *             </kendo-chart-series-item>
 *          </kendo-chart-series>
 *          <kendo-chart-navigator
 *            [categoryAxis]="categoryAxisOptions"
 *            [hint]="hintOptions"
 *            [pane]="paneOptions"
 *            [visible]="isVisible">
 *            <kendo-chart-navigator-select [from]="from" [to]="to">
 *            </kendo-chart-navigator-select>
 *            <kendo-chart-navigator-series>
 *              <kendo-chart-navigator-series-item type="area" [data]="navigatorData" field="Close" categoryField="Date">
 *              </kendo-chart-navigator-series-item>
 *           </kendo-chart-navigator-series>
 *          </kendo-chart-navigator>
 *        </kendo-stockchart>
 *        <br /><br />
 *        <button kendoButton (click)="isVisible = !isVisible">Toggle Navigator</button>
 *    `
 * })
 * ```
 *
 * @remarks
 * Supported children components are: {@link NavigatorSelectComponent}, {@link NavigatorSeriesComponent}, {@link NavigatorHintComponent}, {@link CategoryAxisComponent}, and {@link NavigatorPaneComponent}.
 */
class NavigatorComponent extends SettingsComponent {
    configurationService;
    position;
    visible;
    // These options are also available as child components
    categoryAxis;
    hint;
    pane;
    select;
    series;
    constructor(configurationService) {
        super('', configurationService);
        this.configurationService = configurationService;
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: NavigatorComponent, deps: [{ token: ConfigurationService }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: NavigatorComponent, isStandalone: true, selector: "kendo-chart-navigator", inputs: { position: "position", visible: "visible", categoryAxis: "categoryAxis", hint: "hint", pane: "pane", select: "select", series: "series" }, providers: [{ provide: PREFIX, useValue: 'navigator' }, { provide: ConfigurationService, useClass: PrefixConfigurationService }], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: NavigatorComponent, decorators: [{
            type: Component,
            args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [{ provide: PREFIX, useValue: 'navigator' }, { provide: ConfigurationService, useClass: PrefixConfigurationService }],
                    selector: 'kendo-chart-navigator',
                    template: '',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: ConfigurationService }]; }, propDecorators: { position: [{
                type: Input
            }], visible: [{
                type: Input
            }], categoryAxis: [{
                type: Input
            }], hint: [{
                type: Input
            }], pane: [{
                type: Input
            }], select: [{
                type: Input
            }], series: [{
                type: Input
            }] } });

/**
 * Represents the configuration component for a category axis ([see example]({% slug axes_chart_charts %})).
 *
 * @remarks
 * Supported children components are: {@link CategoryAxisCrosshairComponent}, {@link CategoryAxisLabelsComponent},
 * {@link CategoryAxisNotesComponent}, {@link CategoryAxisSelectComponent}, {@link CategoryAxisTitleComponent}, and {@link CategoryAxisRangeLabelsComponent}.
 */
class CategoryAxisItemComponent extends CollectionItemComponent {
    configurationService;
    collectionService;
    intl;
    /**
     * Specifies the automatic base unit steps configuration.
     */
    autoBaseUnitSteps;
    /**
     * Specifies the axis crossing value or values.
     */
    axisCrossingValue;
    /**
     * Specifies the background color of the axis.
     */
    background;
    /**
     * Specifies the base unit of the axis.
     */
    baseUnit;
    /**
     * Specifies the base unit step of the axis.
     */
    baseUnitStep;
    /**
     * Specifies the categories for the axis.
     */
    categories;
    /**
     * Specifies the color of the axis.
     */
    color;
    /**
     * Determines whether the axis is justified.
     */
    justified;
    /**
     * Specifies the line configuration of the axis.
     */
    line;
    /**
     * Specifies the major grid lines configuration of the axis.
     */
    majorGridLines;
    /**
     * Specifies the major ticks configuration of the axis.
     */
    majorTicks;
    /**
     * Specifies the maximum value of the axis.
     */
    max;
    /**
     * Specifies the maximum number of groups (categories) to display when
     * [`categoryAxis.baseUnit`]({% slug api_charts_categoryaxis %}#toc-baseunit) is set to `"fit"` or
     * [`categoryAxis.baseUnitStep`]({% slug api_charts_categoryaxis %}#toc-baseunitstep) is set to `"auto"`.
     * @default 10
     */
    maxDateGroups;
    /**
     * Specifies the maximum divisions of the axis.
     */
    maxDivisions;
    /**
     * Specifies the minimum value of the axis.
     */
    min;
    /**
     * Specifies the minor grid lines configuration of the axis.
     */
    minorGridLines;
    /**
     * Specifies the minor ticks configuration of the axis.
     */
    minorTicks;
    /**
     * Specifies the unique axis name. Use it to associate a series with a category axis,
     * which utilizes the [`series.categoryAxis`]({% slug api_charts_series %}#toc-categoryaxis) option.
     * @default 'primary'
     */
    name;
    /**
     * Specifies the pane of the axis.
     */
    pane;
    /**
     * Specifies the plot bands configuration of the axis.
     */
    plotBands;
    /**
     * Determines whether the category axis direction is reversed.
     * Categories are listed from left to right and from bottom to top by default.
     * @default false
     */
    reverse;
    /**
     * Determines whether the Chart rounds the first and last date to the nearest base unit.
     * @default true
     */
    roundToBaseUnit;
    /**
     * Specifies the angle (degrees) of the first category on the axis.
     * Use positive values to increase the angle clockwise with zero to the left. Negative values are acceptable.
     * @default 90
     */
    startAngle;
    /**
     * Specifies the category axis type.
     * Use `category` for a discrete category axis and `date` for a specialized axis for displaying chronological data.
     * @default 'category'
     */
    type;
    /**
     * Determines whether the Chart displays the category axis. The category axis is visible by default.
     * @default true
     */
    visible;
    /**
     * Specifies the week start day when the `baseUnit` is set to `"weeks"`.
     * @default 'Sunday'
     */
    weekStartDay;
    // These options are also available as child components
    /**
     * Specifies the crosshair configuration of the axis.
     */
    crosshair;
    /**
     * Specifies the labels configuration of the axis.
     */
    labels;
    /**
     * Specifies the notes configuration of the axis.
     */
    notes;
    /**
     * Specifies the selection configuration of the axis.
     */
    select;
    /**
     * Specifies the title configuration of the axis.
     */
    title;
    /**
     * Specifies the range labels configuration of the axis.
     */
    rangeLabels;
    intlSubscription;
    constructor(configurationService, collectionService, intl, localeId) {
        super(configurationService, collectionService);
        this.configurationService = configurationService;
        this.collectionService = collectionService;
        this.intl = intl;
        intl.localeId = localeId;
        this.notifyChanges({ weekStartDay: intl.firstDay(intl.localeId) });
        this.intlSubscription = intl.changes.subscribe(() => {
            this.notifyChanges({ weekStartDay: intl.firstDay(intl.localeId) });
        });
    }
    ngOnDestroy() {
        if (this.intlSubscription) {
            this.intlSubscription.unsubscribe();
        }
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: CategoryAxisItemComponent, deps: [{ token: ConfigurationService }, { token: CollectionService }, { token: i3.IntlService }, { token: LOCALE_ID }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: CategoryAxisItemComponent, isStandalone: true, selector: "kendo-chart-category-axis-item", inputs: { autoBaseUnitSteps: "autoBaseUnitSteps", axisCrossingValue: "axisCrossingValue", background: "background", baseUnit: "baseUnit", baseUnitStep: "baseUnitStep", categories: "categories", color: "color", justified: "justified", line: "line", majorGridLines: "majorGridLines", majorTicks: "majorTicks", max: "max", maxDateGroups: "maxDateGroups", maxDivisions: "maxDivisions", min: "min", minorGridLines: "minorGridLines", minorTicks: "minorTicks", name: "name", pane: "pane", plotBands: "plotBands", reverse: "reverse", roundToBaseUnit: "roundToBaseUnit", startAngle: "startAngle", type: "type", visible: "visible", weekStartDay: "weekStartDay", crosshair: "crosshair", labels: "labels", notes: "notes", select: "select", title: "title", rangeLabels: "rangeLabels" }, providers: [ConfigurationService], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: CategoryAxisItemComponent, decorators: [{
            type: Component,
            args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [ConfigurationService],
                    selector: 'kendo-chart-category-axis-item',
                    template: '',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: ConfigurationService }, { type: CollectionService }, { type: i3.IntlService }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [LOCALE_ID]
                }] }]; }, propDecorators: { autoBaseUnitSteps: [{
                type: Input
            }], axisCrossingValue: [{
                type: Input
            }], background: [{
                type: Input
            }], baseUnit: [{
                type: Input
            }], baseUnitStep: [{
                type: Input
            }], categories: [{
                type: Input
            }], color: [{
                type: Input
            }], justified: [{
                type: Input
            }], line: [{
                type: Input
            }], majorGridLines: [{
                type: Input
            }], majorTicks: [{
                type: Input
            }], max: [{
                type: Input
            }], maxDateGroups: [{
                type: Input
            }], maxDivisions: [{
                type: Input
            }], min: [{
                type: Input
            }], minorGridLines: [{
                type: Input
            }], minorTicks: [{
                type: Input
            }], name: [{
                type: Input
            }], pane: [{
                type: Input
            }], plotBands: [{
                type: Input
            }], reverse: [{
                type: Input
            }], roundToBaseUnit: [{
                type: Input
            }], startAngle: [{
                type: Input
            }], type: [{
                type: Input
            }], visible: [{
                type: Input
            }], weekStartDay: [{
                type: Input
            }], crosshair: [{
                type: Input
            }], labels: [{
                type: Input
            }], notes: [{
                type: Input
            }], select: [{
                type: Input
            }], title: [{
                type: Input
            }], rangeLabels: [{
                type: Input
            }] } });

/**
 * Represents the category axis of the navigator in a Kendo UI Stock Chart.
 *
 * @example
 *
 * ```html
 * <kendo-stockchart>
 *   <kendo-chart-navigator>
 *     <kendo-chart-navigator-category-axis
 *       color="maroon"
 *       [labels]="{color: 'green'}">
 *     </kendo-chart-navigator-category-axis>
 *   </kendo-chart-navigator>
 * </kendo-stockchart>
 * ```
 *
 * @remarks
 * Supported children components are: {@link NavigatorCategoryAxisCrosshairComponent}, {@link NavigatorCategoryAxisLabelsComponent}, {@link NavigatorCategoryAxisNotesComponent},
 * {@link NavigatorCategoryAxisSelectComponent}, and {@link NavigatorCategoryAxisTitleComponent} .
 */
class NavigatorCategoryAxisComponent extends CategoryAxisItemComponent {
    configurationService;
    constructor(configurationService, intl, localeId) {
        super(configurationService, null, intl, localeId);
        this.configurationService = configurationService;
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: NavigatorCategoryAxisComponent, deps: [{ token: ConfigurationService }, { token: i3.IntlService }, { token: LOCALE_ID }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: NavigatorCategoryAxisComponent, isStandalone: true, selector: "kendo-chart-navigator-category-axis", providers: [{
                provide: PREFIX,
                useValue: 'navigator.categoryAxis'
            }, {
                provide: ConfigurationService,
                useClass: PrefixConfigurationService
            }], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: NavigatorCategoryAxisComponent, decorators: [{
            type: Component,
            args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [{
                            provide: PREFIX,
                            useValue: 'navigator.categoryAxis'
                        }, {
                            provide: ConfigurationService,
                            useClass: PrefixConfigurationService
                        }],
                    selector: 'kendo-chart-navigator-category-axis',
                    template: '',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: ConfigurationService }, { type: i3.IntlService }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [LOCALE_ID]
                }] }]; } });

/**
 * Configures the crosshair for the category axis in the Chart ([see example]({% slug crosshairs_chart_charts %})).
 *
 * @remarks
 * Supported children components are: {@link CategoryAxisCrosshairTooltipComponent}.
 */
class CategoryAxisCrosshairComponent extends SettingsComponent {
    configurationService;
    /**
     * Specifies the color of the crosshair.
     */
    color;
    /**
     * Defines the dash type of the crosshair.
     * @default 'solid'
     */
    dashType;
    /**
     * Specifies the opacity of the crosshair. By default, the crosshair is opaque.
     * @default 1
     */
    opacity;
    /**
     * Determines whether the Chart displays the category axis crosshair.
     * By default, the category axis crosshair is not visible.
     * @default false
     */
    visible;
    /**
     * Sets the width of the crosshair in pixels.
     * @default 1
     */
    width;
    // These options are also available as child components
    /**
     * Configures the tooltip configuration of the crosshair.
     */
    tooltip;
    constructor(configurationService) {
        super('crosshair', configurationService);
        this.configurationService = configurationService;
        this.markAsVisible();
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: CategoryAxisCrosshairComponent, deps: [{ token: ConfigurationService }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: CategoryAxisCrosshairComponent, isStandalone: true, selector: "kendo-chart-category-axis-item-crosshair", inputs: { color: "color", dashType: "dashType", opacity: "opacity", visible: "visible", width: "width", tooltip: "tooltip" }, usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: CategoryAxisCrosshairComponent, decorators: [{
            type: Component,
            args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    selector: 'kendo-chart-category-axis-item-crosshair',
                    template: '',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: ConfigurationService }]; }, propDecorators: { color: [{
                type: Input
            }], dashType: [{
                type: Input
            }], opacity: [{
                type: Input
            }], visible: [{
                type: Input
            }], width: [{
                type: Input
            }], tooltip: [{
                type: Input
            }] } });

/**
 * Represents the crosshair options for the navigator category axis.
 *
 * @remarks
 * Supported children components are: {@link NavigatorCategoryAxisCrosshairTooltipComponent}.
 */
class NavigatorCategoryAxisCrosshairComponent extends CategoryAxisCrosshairComponent {
    configurationService;
    constructor(configurationService) {
        super(configurationService);
        this.configurationService = configurationService;
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: NavigatorCategoryAxisCrosshairComponent, deps: [{ token: ConfigurationService }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: NavigatorCategoryAxisCrosshairComponent, isStandalone: true, selector: "kendo-chart-navigator-category-axis-crosshair", usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: NavigatorCategoryAxisCrosshairComponent, decorators: [{
            type: Component,
            args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    selector: 'kendo-chart-navigator-category-axis-crosshair',
                    template: '',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: ConfigurationService }]; } });

/**
 * Represents the configuration options of the crosshair tooltip for the category axis of the Chart ([see example]({% slug crosshairs_chart_charts %})).
 * The crosshair tooltip is displayed when the `visible` option is set to `true`.
 */
class CategoryAxisCrosshairTooltipComponent extends SettingsComponent {
    configurationService;
    /**
     * Sets the background color of the tooltip.
     */
    background;
    /**
     * Specifies the border configuration of the tooltip.
     */
    border;
    /**
     * Defines the text color of the tooltip.
     */
    color;
    /**
     * Sets the font of the tooltip.
     * @default '12px sans-serif'
     */
    font;
    /**
     * Specifies the format used to display the tooltip. Uses the [`format`]({% slug api_intl_intlservice %}#toc-format) method of IntlService.
     * Contains one placeholder (`"{0}"`) which represents the category value.
     * @default '{0}'
     */
    format;
    /**
     * Specifies the padding of the crosshair tooltip. A numeric value sets all paddings.
     * @default 0
     */
    padding;
    /**
     * Determines whether the Chart displays the category axis crosshair tooltip.
     * By default, the category axis crosshair tooltip is not visible.
     * @default false
     */
    visible;
    constructor(configurationService) {
        super('crosshair.tooltip', configurationService);
        this.configurationService = configurationService;
        this.markAsVisible();
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: CategoryAxisCrosshairTooltipComponent, deps: [{ token: ConfigurationService }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: CategoryAxisCrosshairTooltipComponent, isStandalone: true, selector: "kendo-chart-category-axis-item-crosshair-tooltip", inputs: { background: "background", border: "border", color: "color", font: "font", format: "format", padding: "padding", visible: "visible" }, usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: CategoryAxisCrosshairTooltipComponent, decorators: [{
            type: Component,
            args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    selector: 'kendo-chart-category-axis-item-crosshair-tooltip',
                    template: '',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: ConfigurationService }]; }, propDecorators: { background: [{
                type: Input
            }], border: [{
                type: Input
            }], color: [{
                type: Input
            }], font: [{
                type: Input
            }], format: [{
                type: Input
            }], padding: [{
                type: Input
            }], visible: [{
                type: Input
            }] } });

/**
 * Represents the crosshair tooltip options for the navigator category axis.
 * The crosshair tooltip displays when you set the `visible` option to `true`.
 */
class NavigatorCategoryAxisCrosshairTooltipComponent extends CategoryAxisCrosshairTooltipComponent {
    configurationService;
    constructor(configurationService) {
        super(configurationService);
        this.configurationService = configurationService;
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: NavigatorCategoryAxisCrosshairTooltipComponent, deps: [{ token: ConfigurationService }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: NavigatorCategoryAxisCrosshairTooltipComponent, isStandalone: true, selector: "kendo-chart-navigator-category-axis-crosshair-tooltip", usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: NavigatorCategoryAxisCrosshairTooltipComponent, decorators: [{
            type: Component,
            args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    selector: 'kendo-chart-navigator-category-axis-crosshair-tooltip',
                    template: '',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: ConfigurationService }]; } });

/**
 * Represents the labels configuration for the category axis of the Chart ([see example]({% slug labels_chart_charts %})).
 */
class CategoryAxisLabelsComponent extends SettingsComponent {
    configurationService;
    /**
     * Specifies the background color of the labels.
     */
    background;
    /**
     * Specifies the border configuration of the labels.
     */
    border;
    /**
     * Sets the text color of the labels.
     */
    color;
    /**
     * Specifies a function that creates the content of the label.
     */
    content;
    /**
     * Defines the culture info used for formatting the dates.
     */
    culture;
    /**
     * Specifies the format for different date parts.
     */
    dateFormats;
    /**
     * Specifies the font style of the labels.
     * @default '12px sans-serif'
     */
    font;
    /**
     * Specifies the format for displaying the labels. Uses the [`format`]({% slug api_intl_intlservice %}#toc-format) method of IntlService.
     * Contains one placeholder (`"{0}"`) which represents the category value.
     * @default '{0}'
     */
    format;
    /**
     * Specifies the margin of the labels. A numeric value sets all margins.
     * @default 0
     */
    margin;
    /**
     * Determines whether the Chart mirrors the axis labels and ticks. If the labels are normally on the
     * left side of the axis, the mirroring of the axis renders them to the right.
     * @default false
     */
    mirror;
    /**
     * Specifies the padding of the labels. A numeric value sets all paddings.
     * @default 0
     */
    padding;
    /**
     * Specifies the position of the axis labels. By default, the labels are positioned next to the axis.
     *
     * @default 'onAxis'
     */
    position;
    /**
     * Specifies the rotation angle of the labels. By default, the labels are not rotated.
     *
     * If the axis is horizontal, can be set to `"auto"`. In this case, the labels are rotated
     * only if the slot size is not sufficient for the entire labels.
     * @default 0
     */
    rotation;
    /**
     * Specifies the number of labels to skip. By default, no labels are skipped.
     * @default 0
     */
    skip;
    /**
     * Specifies the rendering step of the label&mdash;renders every n<sup>th</sup> label. By default, every label is rendered.
     * @default 1
     */
    step;
    /**
     * Determines whether the Chart displays the category axis labels.
     * By default, the category axis labels are visible.
     * @default true
     */
    visible;
    /**
     * Specifies a function that creates a visual for the label.
     */
    visual;
    constructor(configurationService) {
        super('labels', configurationService);
        this.configurationService = configurationService;
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: CategoryAxisLabelsComponent, deps: [{ token: ConfigurationService }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: CategoryAxisLabelsComponent, isStandalone: true, selector: "kendo-chart-category-axis-item-labels", inputs: { background: "background", border: "border", color: "color", content: "content", culture: "culture", dateFormats: "dateFormats", font: "font", format: "format", margin: "margin", mirror: "mirror", padding: "padding", position: "position", rotation: "rotation", skip: "skip", step: "step", visible: "visible", visual: "visual" }, usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: CategoryAxisLabelsComponent, decorators: [{
            type: Component,
            args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    selector: 'kendo-chart-category-axis-item-labels',
                    template: '',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: ConfigurationService }]; }, propDecorators: { background: [{
                type: Input
            }], border: [{
                type: Input
            }], color: [{
                type: Input
            }], content: [{
                type: Input
            }], culture: [{
                type: Input
            }], dateFormats: [{
                type: Input
            }], font: [{
                type: Input
            }], format: [{
                type: Input
            }], margin: [{
                type: Input
            }], mirror: [{
                type: Input
            }], padding: [{
                type: Input
            }], position: [{
                type: Input
            }], rotation: [{
                type: Input
            }], skip: [{
                type: Input
            }], step: [{
                type: Input
            }], visible: [{
                type: Input
            }], visual: [{
                type: Input
            }] } });

/**
 * Represents the navigator category axis labels.
 */
class NavigatorCategoryAxisLabelsComponent extends CategoryAxisLabelsComponent {
    configurationService;
    constructor(configurationService) {
        super(configurationService);
        this.configurationService = configurationService;
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: NavigatorCategoryAxisLabelsComponent, deps: [{ token: ConfigurationService }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: NavigatorCategoryAxisLabelsComponent, isStandalone: true, selector: "kendo-chart-navigator-category-axis-labels", usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: NavigatorCategoryAxisLabelsComponent, decorators: [{
            type: Component,
            args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    selector: 'kendo-chart-navigator-category-axis-labels',
                    template: '',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: ConfigurationService }]; } });

/**
 * Configures the notes for the category axis in the Chart ([see example]({% slug notes_chart_charts %}#toc-axis-notes))
 */
class CategoryAxisNotesComponent extends SettingsComponent {
    configurationService;
    /**
     * Defines the data items for the notes.
     */
    data;
    /**
     * Specifies the line configuration of the notes.
     */
    line;
    /**
     * Sets the position of the notes.
     */
    position;
    /**
     * Provides a function that creates a custom visual for the notes.
     */
    visual;
    // These options are also available as child components
    /**
     * Specifies the icon configuration of the notes.
     */
    icon;
    /**
     * Specifies the label configuration of the notes.
     */
    label;
    constructor(configurationService) {
        super('notes', configurationService);
        this.configurationService = configurationService;
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: CategoryAxisNotesComponent, deps: [{ token: ConfigurationService }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: CategoryAxisNotesComponent, isStandalone: true, selector: "kendo-chart-category-axis-item-notes", inputs: { data: "data", line: "line", position: "position", visual: "visual", icon: "icon", label: "label" }, usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: CategoryAxisNotesComponent, decorators: [{
            type: Component,
            args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    selector: 'kendo-chart-category-axis-item-notes',
                    template: '',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: ConfigurationService }]; }, propDecorators: { data: [{
                type: Input
            }], line: [{
                type: Input
            }], position: [{
                type: Input
            }], visual: [{
                type: Input
            }], icon: [{
                type: Input
            }], label: [{
                type: Input
            }] } });

/**
 * Represents notes configuration of the navigator category axis.
 *
 * @example
 * ```html
 * <kendo-stockchart>
 *  <kendo-chart-navigator>
 *   <kendo-chart-navigator-category-axis>
 *    <kendo-chart-navigator-category-axis-notes [visible]="true">
 *    </kendo-chart-navigator-category-axis-notes>
 *   </kendo-chart-navigator-category-axis>
 *  </kendo-chart-navigator>
 * </kendo-stockchart>
 * ```
 *
 * @remarks
 * Supported children components are: {@link NavigatorCategoryAxisNotesIconComponent} and {@link NavigatorCategoryAxisNotesLabelComponent}.
 */
class NavigatorCategoryAxisNotesComponent extends CategoryAxisNotesComponent {
    configurationService;
    constructor(configurationService) {
        super(configurationService);
        this.configurationService = configurationService;
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: NavigatorCategoryAxisNotesComponent, deps: [{ token: ConfigurationService }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: NavigatorCategoryAxisNotesComponent, isStandalone: true, selector: "kendo-chart-navigator-category-axis-notes", usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: NavigatorCategoryAxisNotesComponent, decorators: [{
            type: Component,
            args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    selector: 'kendo-chart-navigator-category-axis-notes',
                    template: '',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: ConfigurationService }]; } });

/**
 * Represents the icon configuration for the category axis notes in the Chart.
 */
class CategoryAxisNotesIconComponent extends SettingsComponent {
    configurationService;
    /**
     * Sets the background color of the icon.
     */
    background;
    /**
     * Configures the border of the icon.
     */
    border;
    /**
     * Specifies the size of the icon.
     */
    size;
    /**
     * Sets the type of the icon.
     */
    type;
    /**
     * Determines whether the icon is visible.
     */
    visible;
    constructor(configurationService) {
        super('notes.icon', configurationService);
        this.configurationService = configurationService;
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: CategoryAxisNotesIconComponent, deps: [{ token: ConfigurationService }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: CategoryAxisNotesIconComponent, isStandalone: true, selector: "kendo-chart-category-axis-item-notes-icon", inputs: { background: "background", border: "border", size: "size", type: "type", visible: "visible" }, usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: CategoryAxisNotesIconComponent, decorators: [{
            type: Component,
            args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    selector: 'kendo-chart-category-axis-item-notes-icon',
                    template: '',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: ConfigurationService }]; }, propDecorators: { background: [{
                type: Input
            }], border: [{
                type: Input
            }], size: [{
                type: Input
            }], type: [{
                type: Input
            }], visible: [{
                type: Input
            }] } });

/**
 * Represents the icon configuration for the navigator category axis notes.
 */
class NavigatorCategoryAxisNotesIconComponent extends CategoryAxisNotesIconComponent {
    configurationService;
    constructor(configurationService) {
        super(configurationService);
        this.configurationService = configurationService;
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: NavigatorCategoryAxisNotesIconComponent, deps: [{ token: ConfigurationService }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: NavigatorCategoryAxisNotesIconComponent, isStandalone: true, selector: "kendo-chart-navigator-category-axis-notes-icon", usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: NavigatorCategoryAxisNotesIconComponent, decorators: [{
            type: Component,
            args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    selector: 'kendo-chart-navigator-category-axis-notes-icon',
                    template: '',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: ConfigurationService }]; } });

/**
 * Represents the label configuration for the category axis notes in the Chart.
 */
class CategoryAxisNotesLabelComponent extends SettingsComponent {
    configurationService;
    /**
     * Sets the background color of the label.
     */
    background;
    /**
     * Configures the border of the label.
     */
    border;
    /**
     * Sets the text color of the label.
     */
    color;
    /**
     * Provides a function that creates the content of the label.
     */
    content;
    /**
     * Specifies the font style of the label.
     * @default '12px, sans-serif'
     */
    font;
    /**
     * Specifies the format for displaying the notes label. Uses the [`format`]({% slug api_intl_intlservice %}#toc-format) method of IntlService.
     * Contains one placeholder (`"{0}"`) which represents the category value.
     * @default '{0}'
     */
    format;
    /**
     * Specifies the position of the label.
     * @default "inside"
     */
    position;
    /**
     * Specifies the rotation angle of the label. By default, the label is not rotated.
     * @default 0
     */
    rotation;
    /**
     * Determines whether the Chart displays the category notes label.
     * By default, the category notes label is visible.
     * @default true
     */
    visible;
    constructor(configurationService) {
        super('notes.label', configurationService);
        this.configurationService = configurationService;
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: CategoryAxisNotesLabelComponent, deps: [{ token: ConfigurationService }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: CategoryAxisNotesLabelComponent, isStandalone: true, selector: "kendo-chart-category-axis-item-notes-label", inputs: { background: "background", border: "border", color: "color", content: "content", font: "font", format: "format", position: "position", rotation: "rotation", visible: "visible" }, usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: CategoryAxisNotesLabelComponent, decorators: [{
            type: Component,
            args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    selector: 'kendo-chart-category-axis-item-notes-label',
                    template: '',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: ConfigurationService }]; }, propDecorators: { background: [{
                type: Input
            }], border: [{
                type: Input
            }], color: [{
                type: Input
            }], content: [{
                type: Input
            }], font: [{
                type: Input
            }], format: [{
                type: Input
            }], position: [{
                type: Input
            }], rotation: [{
                type: Input
            }], visible: [{
                type: Input
            }] } });

/**
 * Represents the label configuration for the navigator category axis notes.
 */
class NavigatorCategoryAxisNotesLabelComponent extends CategoryAxisNotesLabelComponent {
    configurationService;
    constructor(configurationService) {
        super(configurationService);
        this.configurationService = configurationService;
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: NavigatorCategoryAxisNotesLabelComponent, deps: [{ token: ConfigurationService }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: NavigatorCategoryAxisNotesLabelComponent, isStandalone: true, selector: "kendo-chart-navigator-category-axis-notes-label", usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: NavigatorCategoryAxisNotesLabelComponent, decorators: [{
            type: Component,
            args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    selector: 'kendo-chart-navigator-category-axis-notes-label',
                    template: '',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: ConfigurationService }]; } });

/**
 * Configures the selection for the category axis in the Chart. When set, axis selection is enabled and the range is index-based, starting from zero. You can specify the lower and upper boundaries, minimum and maximum values, and mousewheel configuration. If the categories are dates, specify the range with date values.
 */
class CategoryAxisSelectComponent extends SettingsComponent {
    configurationService;
    /**
     * Sets the lower boundary of the selected range.
     */
    from;
    /**
     * Sets the maximum value for the selection.
     */
    max;
    /**
     * Sets the minimum value for the selection.
     */
    min;
    /**
     * Specifies the mousewheel configuration for the selection.
     */
    mousewheel;
    /**
     * Specifies the upper boundary of the selected range.
     */
    to;
    constructor(configurationService) {
        super('select', configurationService);
        this.configurationService = configurationService;
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: CategoryAxisSelectComponent, deps: [{ token: ConfigurationService }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: CategoryAxisSelectComponent, isStandalone: true, selector: "kendo-chart-category-axis-item-select", inputs: { from: "from", max: "max", min: "min", mousewheel: "mousewheel", to: "to" }, usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: CategoryAxisSelectComponent, decorators: [{
            type: Component,
            args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    selector: 'kendo-chart-category-axis-item-select',
                    template: '',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: ConfigurationService }]; }, propDecorators: { from: [{
                type: Input
            }], max: [{
                type: Input
            }], min: [{
                type: Input
            }], mousewheel: [{
                type: Input
            }], to: [{
                type: Input
            }] } });

/**
 * Specifies the selected axis range.
 * When set, axis selection is enabled. The range uses zero-based indexes.
 * Selects categories with indexes in the range (`select.from`, `select.to`).
 * The last category in the range is not included in the selection.
 * If categories are dates, specify the range with date values.
 *
 * @example
 * ```typescript
 * <kendo-chart-navigator-category-axis-select [from]="1" [to]="3"></kendo-chart-navigator-category-axis-select>
 * ```
 */
class NavigatorCategoryAxisSelectComponent extends CategoryAxisSelectComponent {
    configurationService;
    constructor(configurationService) {
        super(configurationService);
        this.configurationService = configurationService;
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: NavigatorCategoryAxisSelectComponent, deps: [{ token: ConfigurationService }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: NavigatorCategoryAxisSelectComponent, isStandalone: true, selector: "kendo-chart-navigator-category-axis-select", usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: NavigatorCategoryAxisSelectComponent, decorators: [{
            type: Component,
            args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    selector: 'kendo-chart-navigator-category-axis-select',
                    template: '',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: ConfigurationService }]; } });

/**
 * Represents the title configuration for the category axis in the Chart.
 */
class CategoryAxisTitleComponent extends SettingsComponent {
    configurationService;
    /**
     * Sets the background color of the title.
     */
    background;
    /**
     * Configures the border of the title.
     */
    border;
    /**
     * Specifies the text color of the title.
     */
    color;
    /**
     * Sets the font style of the title.
     * @default 'bold 16px sans-serif'
     */
    font;
    /**
     * Specifies the margin of the title. A numeric value sets all margins.
     * @default 5
     */
    margin;
    /**
     * Specifies the padding of the title. A numeric value sets all paddings.
     * @default 0
     */
    padding;
    /**
     * Sets the position of the title.
     * @default 'center'
     */
    position;
    /**
     * Specifies the rotation angle of the title. By default, the title is not rotated.
     * @default 0
     */
    rotation;
    /**
     * Specifies the text of the title.
     */
    text;
    /**
     * Determines whether the Chart displays the category axis title.
     * By default, the category axis title is visible.
     * @default true
     */
    visible;
    /**
     * Provides a function that creates a custom visual for the title.
     */
    visual;
    constructor(configurationService) {
        super('title', configurationService);
        this.configurationService = configurationService;
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: CategoryAxisTitleComponent, deps: [{ token: ConfigurationService }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: CategoryAxisTitleComponent, isStandalone: true, selector: "kendo-chart-category-axis-item-title", inputs: { background: "background", border: "border", color: "color", font: "font", margin: "margin", padding: "padding", position: "position", rotation: "rotation", text: "text", visible: "visible", visual: "visual" }, usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: CategoryAxisTitleComponent, decorators: [{
            type: Component,
            args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    selector: 'kendo-chart-category-axis-item-title',
                    template: '',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: ConfigurationService }]; }, propDecorators: { background: [{
                type: Input
            }], border: [{
                type: Input
            }], color: [{
                type: Input
            }], font: [{
                type: Input
            }], margin: [{
                type: Input
            }], padding: [{
                type: Input
            }], position: [{
                type: Input
            }], rotation: [{
                type: Input
            }], text: [{
                type: Input
            }], visible: [{
                type: Input
            }], visual: [{
                type: Input
            }] } });

/**
 * Represents the title configuration of the navigator category axis.
 */
class NavigatorCategoryAxisTitleComponent extends CategoryAxisTitleComponent {
    configurationService;
    constructor(configurationService) {
        super(configurationService);
        this.configurationService = configurationService;
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: NavigatorCategoryAxisTitleComponent, deps: [{ token: ConfigurationService }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: NavigatorCategoryAxisTitleComponent, isStandalone: true, selector: "kendo-chart-navigator-category-axis-title", usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: NavigatorCategoryAxisTitleComponent, decorators: [{
            type: Component,
            args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    selector: 'kendo-chart-navigator-category-axis-title',
                    template: '',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: ConfigurationService }]; } });

/**
 * Represents the default options of the navigator hint
 * ([see example](slug:overview_stockchart_charts)).
 */
class NavigatorHintComponent extends SettingsComponent {
    configurationService;
    content;
    format;
    visible;
    constructor(configurationService) {
        super('hint', configurationService);
        this.configurationService = configurationService;
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: NavigatorHintComponent, deps: [{ token: ConfigurationService }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: NavigatorHintComponent, isStandalone: true, selector: "kendo-chart-navigator-hint", inputs: { content: "content", format: "format", visible: "visible" }, usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: NavigatorHintComponent, decorators: [{
            type: Component,
            args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    selector: 'kendo-chart-navigator-hint',
                    template: '',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: ConfigurationService }]; }, propDecorators: { content: [{
                type: Input
            }], format: [{
                type: Input
            }], visible: [{
                type: Input
            }] } });

/**
 * Represents the Kendo UI for Angular Chart Pane component.
 *
 * @example
 * ```html
 * <kendo-chart>
 *   <kendo-chart-panes>
 *     <kendo-chart-pane
 *         name="top"
 *         background="pink"
 *         [border]="{ color: 'black', dashType: 'dash', width: 2 }">
 *     </kendo-chart-pane>
 *   </kendo-chart-panes>
 * </kendo-chart>
 * ```
 *
 * @remarks
 * Supported children components are: {@link PanesTitleComponent}.
 */
class PaneComponent extends CollectionItemComponent {
    configurationService;
    collectionService;
    /**
     * Specifies the background color of the pane.
     */
    background;
    /**
     * Specifies the border configuration of the pane.
     */
    border;
    /**
     * Determines whether to clip the content of the pane to its boundaries.
     */
    clip;
    /**
     * Specifies the height of the pane in pixels.
     */
    height;
    /**
     * Specifies the margin of the pane. A numeric value sets all margins.
     * @default 0
     */
    margin;
    /**
     * Specifies the name of the pane.
     */
    name;
    /**
     * Specifies the padding of the pane. A numeric value sets all paddings.
     * @default 0
     */
    padding;
    /**
     * Specifies the title configuration of the pane.
     */
    title;
    constructor(configurationService, collectionService) {
        super(configurationService, collectionService);
        this.configurationService = configurationService;
        this.collectionService = collectionService;
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: PaneComponent, deps: [{ token: ConfigurationService }, { token: CollectionService }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: PaneComponent, isStandalone: true, selector: "kendo-chart-pane, kendo-chart-panes-item", inputs: { background: "background", border: "border", clip: "clip", height: "height", margin: "margin", name: "name", padding: "padding", title: "title" }, providers: [ConfigurationService], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: PaneComponent, decorators: [{
            type: Component,
            args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [ConfigurationService],
                    selector: 'kendo-chart-pane, kendo-chart-panes-item',
                    template: '',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: ConfigurationService }, { type: CollectionService }]; }, propDecorators: { background: [{
                type: Input
            }], border: [{
                type: Input
            }], clip: [{
                type: Input
            }], height: [{
                type: Input
            }], margin: [{
                type: Input
            }], name: [{
                type: Input
            }], padding: [{
                type: Input
            }], title: [{
                type: Input
            }] } });

/**
 * Represents the navigator pane of the StockChart
 * ([see example](slug:overview_stockchart_charts)).
 */
class NavigatorPaneComponent extends PaneComponent {
    configurationService;
    constructor(configurationService) {
        super(configurationService, null);
        this.configurationService = configurationService;
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: NavigatorPaneComponent, deps: [{ token: ConfigurationService }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: NavigatorPaneComponent, isStandalone: true, selector: "kendo-chart-navigator-pane", providers: [{ provide: PREFIX, useValue: 'navigator.pane' }, { provide: ConfigurationService, useClass: PrefixConfigurationService }], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: NavigatorPaneComponent, decorators: [{
            type: Component,
            args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [{ provide: PREFIX, useValue: 'navigator.pane' }, { provide: ConfigurationService, useClass: PrefixConfigurationService }],
                    selector: 'kendo-chart-navigator-pane',
                    template: '',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: ConfigurationService }]; } });

/**
 * Represents the title configuration for the Chart panes.
 */
class PanesTitleComponent extends SettingsComponent {
    configurationService;
    /**
     * Sets the background color of the title.
     */
    background;
    /**
     * Specifies the border configuration of the title.
     */
    border;
    /**
     * Sets the text color of the title.
     */
    color;
    /**
     * Defines the font style of the title.
     * @default '700 18px sans-serif'
     */
    font;
    /**
     * Specifies the margin of the title. A numeric value sets all margins.
     * @default 5
     */
    margin;
    /**
     * Specifies the position of the title.
     * @default 'center'
     */
    position;
    /**
     * Sets the text content of the title.
     */
    text;
    /**
     * Determines whether the Chart displays the pane title.
     * @default true
     */
    visible;
    /**
     * Provides a function that creates a custom visual for the title.
     */
    visual;
    constructor(configurationService) {
        super('title', configurationService);
        this.configurationService = configurationService;
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: PanesTitleComponent, deps: [{ token: ConfigurationService }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: PanesTitleComponent, isStandalone: true, selector: "kendo-chart-pane-title", inputs: { background: "background", border: "border", color: "color", font: "font", margin: "margin", position: "position", text: "text", visible: "visible", visual: "visual" }, usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: PanesTitleComponent, decorators: [{
            type: Component,
            args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    selector: 'kendo-chart-pane-title',
                    template: '',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: ConfigurationService }]; }, propDecorators: { background: [{
                type: Input
            }], border: [{
                type: Input
            }], color: [{
                type: Input
            }], font: [{
                type: Input
            }], margin: [{
                type: Input
            }], position: [{
                type: Input
            }], text: [{
                type: Input
            }], visible: [{
                type: Input
            }], visual: [{
                type: Input
            }] } });

/**
 * Represents the title configuration of the navigator pane of the StockChart.
 */
class NavigatorPaneTitleComponent extends PanesTitleComponent {
    configurationService;
    constructor(configurationService) {
        super(configurationService);
        this.configurationService = configurationService;
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: NavigatorPaneTitleComponent, deps: [{ token: ConfigurationService }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: NavigatorPaneTitleComponent, isStandalone: true, selector: "kendo-chart-navigator-pane-title", usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: NavigatorPaneTitleComponent, decorators: [{
            type: Component,
            args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    selector: 'kendo-chart-navigator-pane-title',
                    template: '',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: ConfigurationService }]; } });

/**
 * Specifies the initially selected range.
 * If no range is specified, the full range of values is rendered.
 */
class NavigatorSelectComponent extends SettingsComponent {
    configurationService;
    from;
    to;
    mousewheel;
    constructor(configurationService) {
        super('select', configurationService);
        this.configurationService = configurationService;
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: NavigatorSelectComponent, deps: [{ token: ConfigurationService }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: NavigatorSelectComponent, isStandalone: true, selector: "kendo-chart-navigator-select", inputs: { from: "from", to: "to", mousewheel: "mousewheel" }, usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: NavigatorSelectComponent, decorators: [{
            type: Component,
            args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    selector: 'kendo-chart-navigator-select',
                    template: '',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: ConfigurationService }]; }, propDecorators: { from: [{
                type: Input
            }], to: [{
                type: Input
            }], mousewheel: [{
                type: Input
            }] } });

/**
 * Represents a series item in the StockChart navigator
 * ([see example]({% slug overview_stockchart_charts %})).
 *
 * @example
 * ```html
 * <kendo-stockchart>
 *  <kendo-chart-navigator>
 *   <kendo-chart-navigator-series>
 *    <kendo-chart-navigator-series-item type="area" [data]="data" field="value" categoryField="date">
 *    </kendo-chart-navigator-series-item>
 *   </kendo-chart-navigator-series>
 *  </kendo-chart-navigator>
 * <kendo-stockchart>
 * ```
 *
 * @remarks
 * Supported children components are: {@link NavigatorSeriesHighlightComponent}, {@link NavigatorSeriesErrorBarsComponent}, {@link NavigatorSeriesExtremesComponent},
 * {@link NavigatorSeriesLabelsComponent}, {@link NavigatorSeriesMarkersComponent}, {@link NavigatorSeriesNotesComponent}, and {@link NavigatorSeriesTooltipComponent}.
 */
class NavigatorSeriesItemComponent extends SeriesItemComponent {
    configurationService;
    collectionService;
    /**
     * @hidden
     */
    drilldownField;
    constructor(configurationService, collectionService) {
        super(configurationService, collectionService);
        this.configurationService = configurationService;
        this.collectionService = collectionService;
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: NavigatorSeriesItemComponent, deps: [{ token: ConfigurationService }, { token: CollectionService }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: NavigatorSeriesItemComponent, isStandalone: true, selector: "kendo-chart-navigator-series-item", inputs: { drilldownField: "drilldownField" }, providers: [ConfigurationService], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: NavigatorSeriesItemComponent, decorators: [{
            type: Component,
            args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [ConfigurationService],
                    selector: 'kendo-chart-navigator-series-item',
                    template: '',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: ConfigurationService }, { type: CollectionService }]; }, propDecorators: { drilldownField: [{
                type: Input
            }] } });

/**
 * Represents a collection of one or more navigator series items.
 *
 * @example
 * ```ts
 * import { Component } from '@angular/core';
 *
 *  @Component({
 *   selector: 'my-app',
 *   template: `
 *     <kendo-stockchart>
 *         <kendo-chart-navigator>
 *             <kendo-chart-navigator-series>
 *                 <kendo-chart-navigator-series-item type="area" [data]="data" field="value" categoryField="date">
 *                 </kendo-chart-navigator-series-item>
 *             </kendo-chart-navigator-series>
 *         </kendo-chart-navigator>
 *     </kendo-stockchart>
 *   `
 * })
 * class AppComponent {
 *   public data: any[] = [];
 *
 *   constructor() {
 *      for (let idx = 0; idx < 100; idx++) {
 *          this.data.push({
 *              date: new Date(2017, 0, idx),
 *              value: Math.random() * 100
 *          });
 *      }
 *   }
 * }
 * ```
 *
 * @remarks
 * Supported children components are: {@link NavigatorSeriesItemComponent}.
 */
class NavigatorSeriesComponent extends SeriesComponent {
    configurationService;
    collectionService;
    tooltipTemplateService;
    viewContainer;
    children;
    constructor(configurationService, collectionService, tooltipTemplateService, viewContainer) {
        super(configurationService, collectionService, tooltipTemplateService, viewContainer);
        this.configurationService = configurationService;
        this.collectionService = collectionService;
        this.tooltipTemplateService = tooltipTemplateService;
        this.viewContainer = viewContainer;
    }
    readTooltipTemplates() {
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: NavigatorSeriesComponent, deps: [{ token: ConfigurationService }, { token: CollectionService }, { token: TooltipTemplateService }, { token: i0.ViewContainerRef }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: NavigatorSeriesComponent, isStandalone: true, selector: "kendo-chart-navigator-series", providers: [CollectionService], queries: [{ propertyName: "children", predicate: NavigatorSeriesItemComponent }], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: NavigatorSeriesComponent, decorators: [{
            type: Component,
            args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [CollectionService],
                    selector: 'kendo-chart-navigator-series',
                    template: '',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: ConfigurationService }, { type: CollectionService }, { type: TooltipTemplateService }, { type: i0.ViewContainerRef }]; }, propDecorators: { children: [{
                type: ContentChildren,
                args: [NavigatorSeriesItemComponent]
            }] } });

/**
 * Represents the configuration of the Chart series error bars
 * ([see example]({% slug errorbars_chart_charts %})).
 */
class SeriesErrorBarsComponent extends SettingsComponent {
    configurationService;
    /**
     * Specifies the color of the error bars.
     */
    color;
    /**
     * Determines whether the caps of the error bars are displayed. By default, the caps are visible.
     * @default true
     */
    endCaps;
    /**
     * Specifies the line configuration of the error bars.
     */
    line;
    /**
     * Specifies the value for the error bars.
     */
    value;
    /**
     * Specifies a function that creates a custom visual for the error bars.
     */
    visual;
    /**
     * Specifies the x-axis value for the error bars.
     */
    xValue;
    /**
     * Specifies the y-axis value for the error bars.
     */
    yValue;
    constructor(configurationService) {
        super('errorBars', configurationService);
        this.configurationService = configurationService;
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: SeriesErrorBarsComponent, deps: [{ token: ConfigurationService }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: SeriesErrorBarsComponent, isStandalone: true, selector: "kendo-chart-series-item-error-bars", inputs: { color: "color", endCaps: "endCaps", line: "line", value: "value", visual: "visual", xValue: "xValue", yValue: "yValue" }, usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: SeriesErrorBarsComponent, decorators: [{
            type: Component,
            args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    selector: 'kendo-chart-series-item-error-bars',
                    template: '',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: ConfigurationService }]; }, propDecorators: { color: [{
                type: Input
            }], endCaps: [{
                type: Input
            }], line: [{
                type: Input
            }], value: [{
                type: Input
            }], visual: [{
                type: Input
            }], xValue: [{
                type: Input
            }], yValue: [{
                type: Input
            }] } });

/**
 * Represents the error bars of the StockChart navigator series.
 *
 * @example
 * ```html
 * <kendo-stockchart>
 *  <kendo-chart-navigator>
 *   <kendo-chart-navigator-series>
 *    <kendo-chart-navigator-series-item type="area" [data]="data" field="value" categoryField="date">
 *     <kendo-chart-navigator-series-item-error-bars>
 *     </kendo-chart-navigator-series-item-error-bars>
 *    </kendo-chart-navigator-series-item>
 *   </kendo-chart-navigator-series>
 *  </kendo-chart-navigator>
 * </kendo-stockchart>
 * ```
 */
class NavigatorSeriesErrorBarsComponent extends SeriesErrorBarsComponent {
    configurationService;
    constructor(configurationService) {
        super(configurationService);
        this.configurationService = configurationService;
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: NavigatorSeriesErrorBarsComponent, deps: [{ token: ConfigurationService }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: NavigatorSeriesErrorBarsComponent, isStandalone: true, selector: "kendo-chart-navigator-series-item-error-bars", usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: NavigatorSeriesErrorBarsComponent, decorators: [{
            type: Component,
            args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    selector: 'kendo-chart-navigator-series-item-error-bars',
                    template: '',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: ConfigurationService }]; } });

/**
 * Represents the configuration of the Chart series extremes.
 * Applies to extreme outliers.
 * For more information, refer to the [`series.extremes`]({% slug api_charts_seriesitemcomponent %}#toc-extremes) option.
 */
class SeriesExtremesComponent extends SettingsComponent {
    configurationService;
    /**
     * Specifies the background color of the extremes.
     */
    background;
    /**
     * Specifies the border configuration of the extremes.
     */
    border;
    /**
     * Specifies the rotation angle of the extremes.
     */
    rotation;
    /**
     * Specifies the extremes size in pixels.
     * @default 6
     */
    size;
    /**
     * Specifies the shape of the series extremes.
     * @default 'circle'
     */
    type;
    constructor(configurationService) {
        super('extremes', configurationService);
        this.configurationService = configurationService;
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: SeriesExtremesComponent, deps: [{ token: ConfigurationService }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: SeriesExtremesComponent, isStandalone: true, selector: "kendo-chart-series-item-extremes", inputs: { background: "background", border: "border", rotation: "rotation", size: "size", type: "type" }, usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: SeriesExtremesComponent, decorators: [{
            type: Component,
            args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    selector: 'kendo-chart-series-item-extremes',
                    template: '',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: ConfigurationService }]; }, propDecorators: { background: [{
                type: Input
            }], border: [{
                type: Input
            }], rotation: [{
                type: Input
            }], size: [{
                type: Input
            }], type: [{
                type: Input
            }] } });

/**
 * Represents the extremes configuration of the StockChart navigator series.
 * Applies to extreme outliers.
 */
class NavigatorSeriesExtremesComponent extends SeriesExtremesComponent {
    configurationService;
    constructor(configurationService) {
        super(configurationService);
        this.configurationService = configurationService;
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: NavigatorSeriesExtremesComponent, deps: [{ token: ConfigurationService }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: NavigatorSeriesExtremesComponent, isStandalone: true, selector: "kendo-chart-navigator-series-item-extremes", usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: NavigatorSeriesExtremesComponent, decorators: [{
            type: Component,
            args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    selector: 'kendo-chart-navigator-series-item-extremes',
                    template: '',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: ConfigurationService }]; } });

/**
 * Represents the Chart series highlighting configuration options.
 */
class SeriesHighlightComponent extends SettingsComponent {
    configurationService;
    /**
     * Specifies the border configuration of the highlight.
     */
    border;
    /**
     * Specifies the color of the highlight.
     */
    color;
    /**
     * Specifies the line configuration of the highlight.
     */
    line;
    /**
     * Specifies the markers configuration of the highlight.
     */
    markers;
    /**
     * Specifies the opacity of the highlight.
     */
    opacity;
    /**
     * Specifies a function that handles the highlight toggle event.
     */
    toggle;
    /**
     * Determines whether the Chart highlights the series when the user hovers over it with the mouse.
     * @default true
     */
    visible;
    /**
     * Specifies a function that creates a custom visual for the highlight.
     */
    visual;
    constructor(configurationService) {
        super('highlight', configurationService);
        this.configurationService = configurationService;
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: SeriesHighlightComponent, deps: [{ token: ConfigurationService }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: SeriesHighlightComponent, isStandalone: true, selector: "kendo-chart-series-item-highlight", inputs: { border: "border", color: "color", line: "line", markers: "markers", opacity: "opacity", toggle: "toggle", visible: "visible", visual: "visual" }, usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: SeriesHighlightComponent, decorators: [{
            type: Component,
            args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    selector: 'kendo-chart-series-item-highlight',
                    template: '',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: ConfigurationService }]; }, propDecorators: { border: [{
                type: Input
            }], color: [{
                type: Input
            }], line: [{
                type: Input
            }], markers: [{
                type: Input
            }], opacity: [{
                type: Input
            }], toggle: [{
                type: Input
            }], visible: [{
                type: Input
            }], visual: [{
                type: Input
            }] } });

/**
 * Represents the configuration options of the StockChart series highlight.
 */
class NavigatorSeriesHighlightComponent extends SeriesHighlightComponent {
    configurationService;
    constructor(configurationService) {
        super(configurationService);
        this.configurationService = configurationService;
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: NavigatorSeriesHighlightComponent, deps: [{ token: ConfigurationService }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: NavigatorSeriesHighlightComponent, isStandalone: true, selector: "kendo-chart-navigator-series-item-highlight", usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: NavigatorSeriesHighlightComponent, decorators: [{
            type: Component,
            args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    selector: 'kendo-chart-navigator-series-item-highlight',
                    template: '',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: ConfigurationService }]; } });

/**
 * Represents the configuration of the Chart series labels
 * ([see example]({% slug labels_chart_charts %})).
 *
 * @example
 * ```html
 * <kendo-chart>
 *  <kendo-chart-series>
 *   <kendo-chart-series-item [data]="[1, 2, 3] type="line">
 *    <kendo-chart-series-item-labels format="c">
 *    </kendo-chart-series-item-labels>
 *  </kendo-chart-series-item>
 *  </kendo-chart-series>
 * </kendo-chart>
 * ```
 *
 * @remarks
 * Supported children components are: {@link SeriesLabelsFromComponent} and {@link SeriesLabelsToComponent}.
 */
class SeriesLabelsComponent extends SettingsComponent {
    configurationService;
    /**
     * Specifies the alignment of the labels.
     */
    align;
    /**
     * Specifies the background color of the labels.
     */
    background;
    /**
     * Specifies the border configuration of the labels.
     */
    border;
    /**
     * Specifies the text color of the labels.
     */
    color;
    /**
     * Specifies a function that returns the content of the labels.
     */
    content;
    /**
     * Specifies a function that returns the ARIA content of the labels.
     */
    ariaContent;
    /**
     * Specifies the distance between the labels when [`series.type`]({% slug api_charts_series %}#toc-type) is set to `"donut"` or `"pie"`.
     * @default 35
     */
    distance;
    /**
     * Specifies the font style of the labels.
     * @default '12px sans-serif'
     */
    font;
    /**
     * Specifies the format of the labels. Uses the [`format`]({% slug api_intl_intlservice %}#toc-format) method of the `IntlService`.
     * @default '{0}'
     */
    format;
    /**
     * Specifies the margin of the labels. A numeric value sets all margins.
     * @default 5
     */
    margin;
    /**
     * Specifies the padding of the labels. A numeric value sets all paddings.
     * Bar and Column series always apply full padding and ignore this setting.
     * @default 0
     */
    padding;
    /**
     * Specifies the position of the labels.
     */
    position;
    /**
     * Specifies the rotation angle of the labels.
     */
    rotation;
    /**
     * Determines whether the Chart displays the series labels.
     * @default false
     */
    visible;
    /**
     * Specifies a function that creates a custom visual for the labels.
     */
    visual;
    // These options are also available as child components
    /**
     * Specifies the `from` labels configuration.
     */
    from;
    /**
     * Specifies the `to` labels configuration.
     */
    to;
    constructor(configurationService) {
        super('labels', configurationService);
        this.configurationService = configurationService;
        this.markAsVisible();
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: SeriesLabelsComponent, deps: [{ token: ConfigurationService }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: SeriesLabelsComponent, isStandalone: true, selector: "kendo-chart-series-item-labels", inputs: { align: "align", background: "background", border: "border", color: "color", content: "content", ariaContent: "ariaContent", distance: "distance", font: "font", format: "format", margin: "margin", padding: "padding", position: "position", rotation: "rotation", visible: "visible", visual: "visual", from: "from", to: "to" }, usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: SeriesLabelsComponent, decorators: [{
            type: Component,
            args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    selector: 'kendo-chart-series-item-labels',
                    template: '',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: ConfigurationService }]; }, propDecorators: { align: [{
                type: Input
            }], background: [{
                type: Input
            }], border: [{
                type: Input
            }], color: [{
                type: Input
            }], content: [{
                type: Input
            }], ariaContent: [{
                type: Input
            }], distance: [{
                type: Input
            }], font: [{
                type: Input
            }], format: [{
                type: Input
            }], margin: [{
                type: Input
            }], padding: [{
                type: Input
            }], position: [{
                type: Input
            }], rotation: [{
                type: Input
            }], visible: [{
                type: Input
            }], visual: [{
                type: Input
            }], from: [{
                type: Input
            }], to: [{
                type: Input
            }] } });

/**
 * Represents the label configuration of the StockChart navigator series.
 *
 * @example
 * ```html
 * <kendo-stockchart>
 *  <kendo-chart-navigator>
 *   <kendo-chart-navigator-series>
 *    <kendo-chart-navigator-series-item type="area" [data]="data" field="value" categoryField="date">
 *    <kendo-chart-navigator-series-item-labels color="peachpuff">
 *    </kendo-chart-navigator-series-item-labels>
 *   </kendo-chart-navigator-series-item>
 *   </kendo-chart-navigator-series>
 *  </kendo-chart-navigator>
 * </kendo-stockchart>
 * ```
 *
 * @remarks
 * Supported children components are: {@link NavigatorSeriesLabelsFromComponent} and {@link NavigatorSeriesLabelsToComponent}.
 */
class NavigatorSeriesLabelsComponent extends SeriesLabelsComponent {
    configurationService;
    constructor(configurationService) {
        super(configurationService);
        this.configurationService = configurationService;
        this.markAsVisible();
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: NavigatorSeriesLabelsComponent, deps: [{ token: ConfigurationService }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: NavigatorSeriesLabelsComponent, isStandalone: true, selector: "kendo-chart-navigator-series-item-labels", usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: NavigatorSeriesLabelsComponent, decorators: [{
            type: Component,
            args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    selector: 'kendo-chart-navigator-series-item-labels',
                    template: '',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: ConfigurationService }]; } });

/**
 * Represents the `from` labels configuration of the Chart series.
 */
class SeriesLabelsFromComponent extends SettingsComponent {
    configurationService;
    /**
     * Specifies the background color of the `from` labels.
     */
    background;
    /**
     * Specifies the border configuration of the `from` labels.
     */
    border;
    /**
     * Specifies the text color of the `from` labels.
     */
    color;
    /**
     * Specifies a function that returns the content of the `from` labels.
     */
    content;
    /**
     * Specifies the font style of the `from` labels.
     * @default '12px sans-serif'
     */
    font;
    /**
     * Specifies the format of the `from` labels. Uses the `IntlService` [`format`]({% slug api_intl_intlservice %}#toc-format) method.
     * @default '{0}'
     */
    format;
    /**
     * Specifies the margin of the `from` labels. A numeric value sets all margins.
     * @default 5
     */
    margin;
    /**
     * Specifies the padding of the `from` labels. A numeric value sets all paddings.
     * @default 0
     */
    padding;
    /**
     * Specifies the position of the `from` labels.
     */
    position;
    /**
     * Determines whether the Chart displays the series `from` labels.
     * @default false
     */
    visible;
    constructor(configurationService) {
        super('labels.from', configurationService);
        this.configurationService = configurationService;
        this.markAsVisible();
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: SeriesLabelsFromComponent, deps: [{ token: ConfigurationService }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: SeriesLabelsFromComponent, isStandalone: true, selector: "kendo-chart-series-item-labels-from", inputs: { background: "background", border: "border", color: "color", content: "content", font: "font", format: "format", margin: "margin", padding: "padding", position: "position", visible: "visible" }, usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: SeriesLabelsFromComponent, decorators: [{
            type: Component,
            args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    selector: 'kendo-chart-series-item-labels-from',
                    template: '',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: ConfigurationService }]; }, propDecorators: { background: [{
                type: Input
            }], border: [{
                type: Input
            }], color: [{
                type: Input
            }], content: [{
                type: Input
            }], font: [{
                type: Input
            }], format: [{
                type: Input
            }], margin: [{
                type: Input
            }], padding: [{
                type: Input
            }], position: [{
                type: Input
            }], visible: [{
                type: Input
            }] } });

/**
 * Represents the `from` label configuration of the StockChart navigator series.
 */
class NavigatorSeriesLabelsFromComponent extends SeriesLabelsFromComponent {
    configurationService;
    constructor(configurationService) {
        super(configurationService);
        this.configurationService = configurationService;
        this.markAsVisible();
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: NavigatorSeriesLabelsFromComponent, deps: [{ token: ConfigurationService }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: NavigatorSeriesLabelsFromComponent, isStandalone: true, selector: "kendo-chart-navigator-series-item-labels-from", usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: NavigatorSeriesLabelsFromComponent, decorators: [{
            type: Component,
            args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    selector: 'kendo-chart-navigator-series-item-labels-from',
                    template: '',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: ConfigurationService }]; } });

/**
 * Represents the `to` labels configuration of the Chart series.
 */
class SeriesLabelsToComponent extends SettingsComponent {
    configurationService;
    /**
     * Specifies the background color of the `to` labels.
     */
    background;
    /**
     * Specifies the border configuration of the `to` labels.
     */
    border;
    /**
     * Specifies the text color of the `to` labels.
     */
    color;
    /**
     * Specifies a function that returns the content of the `to` labels.
     */
    content;
    /**
     * Specifies the font style of the `to` labels.
     * @default '12px sans-serif'
     */
    font;
    /**
     * Specifies the format of the `to` labels. Uses [IntlService format]({% slug api_intl_intlservice %}#toc-format).
     * @default '{0}'
     */
    format;
    /**
     * Specifies the margin of the `to` labels. A numeric value sets all margins.
     * @default 5
     */
    margin;
    /**
     * Specifies the padding of the `to` labels. A numeric value sets all paddings.
     * @default 0
     */
    padding;
    /**
     * Specifies the position of the `to` labels.
     */
    position;
    /**
     * Determines whether the Chart displays the series `to` labels.
     * @default false
     */
    visible;
    constructor(configurationService) {
        super('labels.to', configurationService);
        this.configurationService = configurationService;
        this.markAsVisible();
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: SeriesLabelsToComponent, deps: [{ token: ConfigurationService }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: SeriesLabelsToComponent, isStandalone: true, selector: "kendo-chart-series-item-labels-to", inputs: { background: "background", border: "border", color: "color", content: "content", font: "font", format: "format", margin: "margin", padding: "padding", position: "position", visible: "visible" }, usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: SeriesLabelsToComponent, decorators: [{
            type: Component,
            args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    selector: 'kendo-chart-series-item-labels-to',
                    template: '',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: ConfigurationService }]; }, propDecorators: { background: [{
                type: Input
            }], border: [{
                type: Input
            }], color: [{
                type: Input
            }], content: [{
                type: Input
            }], font: [{
                type: Input
            }], format: [{
                type: Input
            }], margin: [{
                type: Input
            }], padding: [{
                type: Input
            }], position: [{
                type: Input
            }], visible: [{
                type: Input
            }] } });

/**
 * Represents the `to` label configuration of the StockChart navigator series.
 */
class NavigatorSeriesLabelsToComponent extends SeriesLabelsToComponent {
    configurationService;
    constructor(configurationService) {
        super(configurationService);
        this.configurationService = configurationService;
        this.markAsVisible();
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: NavigatorSeriesLabelsToComponent, deps: [{ token: ConfigurationService }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: NavigatorSeriesLabelsToComponent, isStandalone: true, selector: "kendo-chart-navigator-series-item-labels-to", usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: NavigatorSeriesLabelsToComponent, decorators: [{
            type: Component,
            args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    selector: 'kendo-chart-navigator-series-item-labels-to',
                    template: '',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: ConfigurationService }]; } });

/**
 * Represents the configuration of the Chart series marker.
 *
 * @example
 * ```html
 * <kendo-chart ...>
 *   <kendo-chart-series>
 *     <kendo-chart-series-item type="line"...>
 *       <kendo-chart-series-item-markers background="blue"> </kendo-chart-series-item-markers>
 *     </kendo-chart-series-item>
 *   </kendo-chart-series>
 * </kendo-chart>
 * ```
 */
class SeriesMarkersComponent extends SettingsComponent {
    configurationService;
    /**
     * Specifies the background color of the markers.
     */
    background;
    /**
     * Specifies the border configuration of the markers.
     */
    border;
    /**
     * Specifies the rotation angle of the markers.
     */
    rotation;
    /**
     * Specifies the marker size in pixels.
     * @default 6
     */
    size;
    /**
     * Specifies the shape of the series markers.
     * @default 'cirlce'
     */
    type;
    /**
     * Determines whether the Chart displays the series markers.
     * @default true
     */
    visible;
    /**
     * Specifies a function that creates a custom visual for the markers.
     */
    visual;
    /**
     * Specifies the `from` markers configuration.
     */
    from;
    /**
     * Specifies the `to` markers configuration.
     */
    to;
    constructor(configurationService) {
        super('markers', configurationService);
        this.configurationService = configurationService;
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: SeriesMarkersComponent, deps: [{ token: ConfigurationService }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: SeriesMarkersComponent, isStandalone: true, selector: "kendo-chart-series-item-markers", inputs: { background: "background", border: "border", rotation: "rotation", size: "size", type: "type", visible: "visible", visual: "visual", from: "from", to: "to" }, usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: SeriesMarkersComponent, decorators: [{
            type: Component,
            args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    selector: 'kendo-chart-series-item-markers',
                    template: '',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: ConfigurationService }]; }, propDecorators: { background: [{
                type: Input
            }], border: [{
                type: Input
            }], rotation: [{
                type: Input
            }], size: [{
                type: Input
            }], type: [{
                type: Input
            }], visible: [{
                type: Input
            }], visual: [{
                type: Input
            }], from: [{
                type: Input
            }], to: [{
                type: Input
            }] } });

/**
 * Represents the marker configuration of the StockChart navigator series.
 */
class NavigatorSeriesMarkersComponent extends SeriesMarkersComponent {
    configurationService;
    constructor(configurationService) {
        super(configurationService);
        this.configurationService = configurationService;
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: NavigatorSeriesMarkersComponent, deps: [{ token: ConfigurationService }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: NavigatorSeriesMarkersComponent, isStandalone: true, selector: "kendo-chart-navigator-series-item-markers", usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: NavigatorSeriesMarkersComponent, decorators: [{
            type: Component,
            args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    selector: 'kendo-chart-navigator-series-item-markers',
                    template: '',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: ConfigurationService }]; } });

/**
 * Represents the Chart series notes configuration
 * ([see example]({% slug notes_chart_charts %})).
 *
 * @example
 * ```html
 * <kendo-chart
 *   <kendo-chart-series>
 *     <kendo-chart-series-item type="line" [data]="[1, 2, 3]">
 *       <kendo-chart-series-item-notes [icon]="{type: 'square'}"> </kendo-chart-series-item-notes>
 *     </kendo-chart-series-item>
 *   </kendo-chart-series>
 * </kendo-chart>
 * ```
 *
 * @remarks
 * Supported children components are: {@link SeriesNotesIconComponent} and {@link SeriesNotesLabelComponent}.
 */
class SeriesNotesComponent extends SettingsComponent {
    configurationService;
    /**
     * Specifies the line configuration for the notes.
     */
    line;
    /**
     * Specifies the position of the notes.
     */
    position;
    /**
     * Specifies a function that creates a custom visual for the notes.
     */
    visual;
    // These options are also available as child components
    /**
     * Specifies the icon configuration for the notes.
     */
    icon;
    /**
     * Specifies the label configuration for the notes.
     */
    label;
    constructor(configurationService) {
        super('notes', configurationService);
        this.configurationService = configurationService;
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: SeriesNotesComponent, deps: [{ token: ConfigurationService }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: SeriesNotesComponent, isStandalone: true, selector: "kendo-chart-series-item-notes", inputs: { line: "line", position: "position", visual: "visual", icon: "icon", label: "label" }, usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: SeriesNotesComponent, decorators: [{
            type: Component,
            args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    selector: 'kendo-chart-series-item-notes',
                    template: '',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: ConfigurationService }]; }, propDecorators: { line: [{
                type: Input
            }], position: [{
                type: Input
            }], visual: [{
                type: Input
            }], icon: [{
                type: Input
            }], label: [{
                type: Input
            }] } });

/**
 * Represents the notes configuration of the StockChart navigator series.
 *
 * @example
 * ```html
 * <kendo-stockchart>
 *  <kendo-chart-navigator>
 *   <kendo-chart-navigator-series>
 *    <kendo-chart-navigator-series-item type="area" [data]="data" field="value" categoryField="date">
 *     <kendo-chart-navigator-series-item-notes [visible]="true">
 *     </kendo-chart-navigator-series-item-notes>
 *   </kendo-chart-navigator-series-item>
 *   </kendo-chart-navigator-series>
 *  </kendo-chart-navigator>
 * </kendo-stockchart>
 * ```
 *
 * @remarks
 * Supported children components are: {@link NavigatorSeriesNotesIconComponent} and {@link NavigatorSeriesNotesLabelComponent}.
 */
class NavigatorSeriesNotesComponent extends SeriesNotesComponent {
    configurationService;
    constructor(configurationService) {
        super(configurationService);
        this.configurationService = configurationService;
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: NavigatorSeriesNotesComponent, deps: [{ token: ConfigurationService }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: NavigatorSeriesNotesComponent, isStandalone: true, selector: "kendo-chart-navigator-series-item-notes", usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: NavigatorSeriesNotesComponent, decorators: [{
            type: Component,
            args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    selector: 'kendo-chart-navigator-series-item-notes',
                    template: '',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: ConfigurationService }]; } });

/**
 * Represents the configuration of the Chart series notes icon.
 */
class SeriesNotesIconComponent extends SettingsComponent {
    configurationService;
    /**
     * Specifies the background color of the notes icon.
     */
    background;
    /**
     * Specifies the border configuration of the notes icon.
     */
    border;
    /**
     * Specifies the size of the notes icon.
     */
    size;
    /**
     * Specifies the icon shape.
     *
     * @default 'circle'
     */
    type;
    /**
     * Determines whether the notes icon is visible.
     *
     * @default true
     */
    visible;
    constructor(configurationService) {
        super('notes.icon', configurationService);
        this.configurationService = configurationService;
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: SeriesNotesIconComponent, deps: [{ token: ConfigurationService }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: SeriesNotesIconComponent, isStandalone: true, selector: "kendo-chart-series-item-notes-icon", inputs: { background: "background", border: "border", size: "size", type: "type", visible: "visible" }, usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: SeriesNotesIconComponent, decorators: [{
            type: Component,
            args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    selector: 'kendo-chart-series-item-notes-icon',
                    template: '',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: ConfigurationService }]; }, propDecorators: { background: [{
                type: Input
            }], border: [{
                type: Input
            }], size: [{
                type: Input
            }], type: [{
                type: Input
            }], visible: [{
                type: Input
            }] } });

/**
 * Represents the icon of the notes.
 */
class NavigatorSeriesNotesIconComponent extends SeriesNotesIconComponent {
    configurationService;
    constructor(configurationService) {
        super(configurationService);
        this.configurationService = configurationService;
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: NavigatorSeriesNotesIconComponent, deps: [{ token: ConfigurationService }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: NavigatorSeriesNotesIconComponent, isStandalone: true, selector: "kendo-chart-navigator-series-item-notes-icon", usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: NavigatorSeriesNotesIconComponent, decorators: [{
            type: Component,
            args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    selector: 'kendo-chart-navigator-series-item-notes-icon',
                    template: '',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: ConfigurationService }]; } });

/**
 * Represents the configuration of the Chart series notes label.
 */
class SeriesNotesLabelComponent extends SettingsComponent {
    configurationService;
    /**
     * Specifies the background color of the label.
     */
    background;
    /**
     * Specifies the border of the label.
     */
    border;
    /**
     * Specifies the color of the label.
     */
    color;
    /**
     * Specifies the content of the note.
     */
    content;
    /**
     * Specifies the font style of the label.
     *
     * @default '12px sans-serif'
     */
    font;
    /**
     * Specifies the format for displaying the notes label. Uses the [`format`]({% slug api_intl_intlservice %}#toc-format) method of `IntlService`.
     * Contains one placeholder (`"{0}"`) which represents the axis value.
     *
     * @default '{0}'
     */
    format;
    /**
     * Specifies the position of the labels.
     *
     * @default 'inside'
     */
    position;
    /**
     * Specifies the rotation angle of the label.
     *
     * @default 0
     */
    rotation;
    /**
     * Determines whether the Chart displays the series notes label.
     *
     * @default true
     */
    visible;
    constructor(configurationService) {
        super('notes.label', configurationService);
        this.configurationService = configurationService;
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: SeriesNotesLabelComponent, deps: [{ token: ConfigurationService }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: SeriesNotesLabelComponent, isStandalone: true, selector: "kendo-chart-series-item-notes-label", inputs: { background: "background", border: "border", color: "color", content: "content", font: "font", format: "format", position: "position", rotation: "rotation", visible: "visible" }, usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: SeriesNotesLabelComponent, decorators: [{
            type: Component,
            args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    selector: 'kendo-chart-series-item-notes-label',
                    template: '',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: ConfigurationService }]; }, propDecorators: { background: [{
                type: Input
            }], border: [{
                type: Input
            }], color: [{
                type: Input
            }], content: [{
                type: Input
            }], font: [{
                type: Input
            }], format: [{
                type: Input
            }], position: [{
                type: Input
            }], rotation: [{
                type: Input
            }], visible: [{
                type: Input
            }] } });

/**
 * Represents the label of the notes.
 */
class NavigatorSeriesNotesLabelComponent extends SeriesNotesLabelComponent {
    configurationService;
    constructor(configurationService) {
        super(configurationService);
        this.configurationService = configurationService;
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: NavigatorSeriesNotesLabelComponent, deps: [{ token: ConfigurationService }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: NavigatorSeriesNotesLabelComponent, isStandalone: true, selector: "kendo-chart-navigator-series-item-notes-label", usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: NavigatorSeriesNotesLabelComponent, decorators: [{
            type: Component,
            args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    selector: 'kendo-chart-navigator-series-item-notes-label',
                    template: '',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: ConfigurationService }]; } });

/**
 * Represents the configuration of the Chart series outliers.
 * Applies to mild outliers.
 * For more information, refer to [`series.outliers`]({% slug api_charts_seriesitemcomponent %}#toc-outliers).
 */
class SeriesOutliersComponent extends SettingsComponent {
    configurationService;
    /**
     * Specifies the background color of the outliers.
     */
    background;
    /**
     * Specifies the border configuration of the outliers.
     */
    border;
    /**
     * Specifies the rotation angle of the outliers.
     */
    rotation;
    /**
     * Specifies the marker size in pixels.
     *
     * @default 6
     */
    size;
    /**
     * Specifies the outliers shape.
     *
     * @default 'circle'
     */
    type;
    constructor(configurationService) {
        super('outliers', configurationService);
        this.configurationService = configurationService;
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: SeriesOutliersComponent, deps: [{ token: ConfigurationService }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: SeriesOutliersComponent, isStandalone: true, selector: "kendo-chart-series-item-outliers", inputs: { background: "background", border: "border", rotation: "rotation", size: "size", type: "type" }, usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: SeriesOutliersComponent, decorators: [{
            type: Component,
            args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    selector: 'kendo-chart-series-item-outliers',
                    template: '',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: ConfigurationService }]; }, propDecorators: { background: [{
                type: Input
            }], border: [{
                type: Input
            }], rotation: [{
                type: Input
            }], size: [{
                type: Input
            }], type: [{
                type: Input
            }] } });

/**
 * Represents the outliers configuration of the StockChart navigator series.
 * Applies to mild outliers.
 */
class NavigatorSeriesOutliersComponent extends SeriesOutliersComponent {
    configurationService;
    constructor(configurationService) {
        super(configurationService);
        this.configurationService = configurationService;
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: NavigatorSeriesOutliersComponent, deps: [{ token: ConfigurationService }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: NavigatorSeriesOutliersComponent, isStandalone: true, selector: "kendo-chart-navigator-series-item-outliers", usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: NavigatorSeriesOutliersComponent, decorators: [{
            type: Component,
            args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    selector: 'kendo-chart-navigator-series-item-outliers',
                    template: '',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: ConfigurationService }]; } });

/**
 * Represents the tooltip configuration of the StockChart navigator series.
 * Displays when you set the `navigator.series.tooltip.visible` option to `true`.
 */
class NavigatorSeriesTooltipComponent extends SeriesTooltipComponent {
    configurationService;
    constructor(configurationService) {
        super(configurationService);
        this.configurationService = configurationService;
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: NavigatorSeriesTooltipComponent, deps: [{ token: ConfigurationService }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: NavigatorSeriesTooltipComponent, isStandalone: true, selector: "kendo-chart-navigator-series-item-tooltip", usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: NavigatorSeriesTooltipComponent, decorators: [{
            type: Component,
            args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    selector: 'kendo-chart-navigator-series-item-tooltip',
                    template: '',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: ConfigurationService }]; } });

/**
 * Represents the Kendo UI for Angular Sparkline component.
 *
 * The Sparkline displays data in a small chart format, typically showing trends and patterns.
 * It provides a compact way to visualize data without detailed axes or legends.
 *
 * @example
 * ```ts
 * import { Component } from '@angular/core';
 *
 * @Component({
 *   selector: 'my-app',
 *   template: `
 *       <kendo-sparkline [data]="[936, 968, 1025, 999]" type="column">
 *       </kendo-sparkline>
 *   `,
 * })
 * export class AppComponent {
 * }
 * ```
 */
class SparklineComponent extends ChartComponent {
    configurationService;
    themeService;
    element;
    intl;
    localizationService;
    ngZone;
    instanceEventService;
    changeDetector;
    renderer;
    /**
     * Specifies the default series type for the Sparkline.
     *
     * @default "line"
     */
    type;
    /**
     * Specifies the data for the default Sparkline series.
     *
     * The component discards this property if you supply series data.
     */
    data;
    /**
     * @hidden
     */
    drilldown = new EventEmitter();
    /**
     * @hidden
     */
    drilldownLevelChange = new EventEmitter();
    /**
     * @hidden
     */
    noData = false;
    /**
     * @hidden
     */
    get drilldownLevel() {
        return this.drilldownState.length;
    }
    /**
     * @hidden
     */
    tooltipWrapperClass = 'k-sparkline-tooltip-wrapper';
    /**
     * @hidden
     */
    tooltipContentClasses = {
        'k-sparkline-tooltip': true
    };
    /**
     * @hidden
     */
    showLicenseWatermark = false;
    hostClasses = ['k-sparkline', 'k-widget'];
    constructor(configurationService, themeService, element, intl, localizationService, ngZone, instanceEventService, changeDetector, renderer) {
        super(configurationService, themeService, element, intl, localizationService, ngZone, instanceEventService, changeDetector, renderer);
        this.configurationService = configurationService;
        this.themeService = themeService;
        this.element = element;
        this.intl = intl;
        this.localizationService = localizationService;
        this.ngZone = ngZone;
        this.instanceEventService = instanceEventService;
        this.changeDetector = changeDetector;
        this.renderer = renderer;
        const isValid = validatePackage(packageMetadata);
        this.showLicenseWatermark = shouldShowValidationUI(isValid);
    }
    createInstance(element, observer) {
        this.instance = new Sparkline(element, Sparkline.normalizeOptions(this.options), this.theme, {
            intlService: this.intl,
            observer: observer,
            rtl: this.rtl,
            sender: this
        });
    }
    updateOptions() {
        this.instance.setOptions(Sparkline.normalizeOptions(this.options));
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: SparklineComponent, deps: [{ token: ConfigurationService }, { token: ThemeService }, { token: i0.ElementRef }, { token: i3.IntlService }, { token: i1$1.LocalizationService }, { token: i0.NgZone }, { token: InstanceEventService$1 }, { token: i0.ChangeDetectorRef }, { token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: SparklineComponent, isStandalone: true, selector: "kendo-sparkline", inputs: { type: "type", data: "data", noData: "noData", drilldownLevel: "drilldownLevel" }, outputs: { drilldown: "drilldown", drilldownLevelChange: "drilldownLevelChange" }, providers: [
            ConfigurationService,
            TooltipTemplateService,
            InstanceEventService$1,
            LocalizationService,
            {
                provide: L10N_PREFIX,
                useValue: 'kendo.chart'
            }
        ], exportAs: ["kendoSparkline"], usesInheritance: true, ngImport: i0, template: `
        <span #surface class="k-chart-surface"></span>
        <kendo-chart-crosshair-tooltips-container [popupSettings]="popupSettings">
        </kendo-chart-crosshair-tooltips-container>
        <kendo-chart-tooltip-popup [animate]="false" [wrapperClass]="tooltipWrapperClass"
            [classNames]="tooltipContentClasses" (leave)="tooltipMouseleave($event)" [popupSettings]="popupSettings">
        </kendo-chart-tooltip-popup>
        <kendo-resize-sensor (resize)="onResize()"></kendo-resize-sensor>

        <div kendoWatermarkOverlay *ngIf="showLicenseWatermark"></div>
    `, isInline: true, dependencies: [{ kind: "component", type: CrosshairTooltipsContainerComponent, selector: "kendo-chart-crosshair-tooltips-container", inputs: ["popupSettings"] }, { kind: "component", type: TooltipPopupComponent, selector: "kendo-chart-tooltip-popup", inputs: ["animate", "classNames", "wrapperClass"], outputs: ["leave"] }, { kind: "component", type: ResizeSensorComponent, selector: "kendo-resize-sensor", inputs: ["rateLimit"], outputs: ["resize"] }, { kind: "directive", type: NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: WatermarkOverlayComponent, selector: "div[kendoWatermarkOverlay]" }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: SparklineComponent, decorators: [{
            type: Component,
            args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    exportAs: 'kendoSparkline',
                    providers: [
                        ConfigurationService,
                        TooltipTemplateService,
                        InstanceEventService$1,
                        LocalizationService,
                        {
                            provide: L10N_PREFIX,
                            useValue: 'kendo.chart'
                        }
                    ],
                    selector: 'kendo-sparkline',
                    template: `
        <span #surface class="k-chart-surface"></span>
        <kendo-chart-crosshair-tooltips-container [popupSettings]="popupSettings">
        </kendo-chart-crosshair-tooltips-container>
        <kendo-chart-tooltip-popup [animate]="false" [wrapperClass]="tooltipWrapperClass"
            [classNames]="tooltipContentClasses" (leave)="tooltipMouseleave($event)" [popupSettings]="popupSettings">
        </kendo-chart-tooltip-popup>
        <kendo-resize-sensor (resize)="onResize()"></kendo-resize-sensor>

        <div kendoWatermarkOverlay *ngIf="showLicenseWatermark"></div>
    `,
                    standalone: true,
                    imports: [CrosshairTooltipsContainerComponent, TooltipPopupComponent, ResizeSensorComponent, NgIf, WatermarkOverlayComponent]
                }]
        }], ctorParameters: function () { return [{ type: ConfigurationService }, { type: ThemeService }, { type: i0.ElementRef }, { type: i3.IntlService }, { type: i1$1.LocalizationService }, { type: i0.NgZone }, { type: InstanceEventService$1 }, { type: i0.ChangeDetectorRef }, { type: i0.Renderer2 }]; }, propDecorators: { type: [{
                type: Input
            }], data: [{
                type: Input
            }], drilldown: [{
                type: Output
            }], drilldownLevelChange: [{
                type: Output
            }], noData: [{
                type: Input
            }], drilldownLevel: [{
                type: Input
            }] } });

/**
 * Represents the default options for all Chart axes ([see example](slug:axes_chart_charts#toc-default-axis-configuration)).
 * Accepts the options which are supported by [`categoryAxis`](slug:api_charts_categoryaxisitemcomponent),
 * [`valueAxis`](slug:api_charts_valueaxisitemcomponent),
 * [`xAxis`](slug:api_charts_xaxisitemcomponent),
 * and [`yAxis`](slug:api_charts_yaxisitemcomponent).
 *
 * @example
 * ```html
 * <kendo-chart>
 *  <kendo-chart-axis-defaults>
 *   <kendo-chart-axis-defaults-crosshair [color]="'red'"></kendo-chart-axis-defaults-crosshair>
 *  <kendo-chart-axis-defaults-labels [color]="'blue'"></kendo-chart-axis-defaults-labels>
 *  <kendo-chart-axis-defaults-title text="My Axis Title"></kendo-chart-axis-defaults-title>
 * </kendo-chart-axis-defaults>
 * </kendo-chart>
 * ```
 *
 * @remarks
 * Supported children components are: {@link AxisDefaultsCrosshairComponent}, {@link AxisDefaultsLabelsComponent}, and {@link AxisDefaultsTitleComponent}.
 */
class AxisDefaultsComponent extends SettingsComponent {
    configurationService;
    /**
     * Specifies the background color of the axis.
     */
    background;
    /**
     * Specifies the color of the axis.
     */
    color;
    /**
     * Specifies the line configuration of the axis.
     */
    line;
    /**
     * Specifies the major grid lines configuration of the axis.
     */
    majorGridLines;
    /**
     * Specifies the major ticks configuration of the axis.
     */
    majorTicks;
    /**
     * Specifies the minor grid lines configuration of the axis.
     */
    minorGridLines;
    /**
     * Specifies the minor ticks configuration of the axis.
     */
    minorTicks;
    /**
     * Determines whether the Chart prevents the axis range from snapping to zero.
     * Set it to `false` to force the axis range to snap to zero.
     * @default false
     */
    narrowRange;
    /**
     * Specifies the pane of the axis.
     */
    pane;
    /**
     * Specifies the plot bands configuration of the axis.
     */
    plotBands;
    /**
     * Determines whether the axis direction is reversed. Categories are listed from left to
     * right and from bottom to top by default.
     * @default false
     */
    reverse;
    /**
     * Specifies the angle (degrees) of the first category on the axis.
     * Use positive values to increase the angle clockwise with zero to the left. Negative values are acceptable.
     * @default 90
     */
    startAngle;
    /**
     * Determines whether the Chart displays the axis.
     * @default true
     */
    visible;
    // These options are also available as child components
    /**
     * Specifies the crosshair configuration of the axis.
     */
    crosshair;
    /**
     * Specifies the labels configuration of the axis.
     */
    labels;
    /**
     * Specifies the title configuration of the axis.
     */
    title;
    constructor(configurationService) {
        super('axisDefaults', configurationService);
        this.configurationService = configurationService;
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: AxisDefaultsComponent, deps: [{ token: ConfigurationService }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: AxisDefaultsComponent, isStandalone: true, selector: "kendo-chart-axis-defaults", inputs: { background: "background", color: "color", line: "line", majorGridLines: "majorGridLines", majorTicks: "majorTicks", minorGridLines: "minorGridLines", minorTicks: "minorTicks", narrowRange: "narrowRange", pane: "pane", plotBands: "plotBands", reverse: "reverse", startAngle: "startAngle", visible: "visible", crosshair: "crosshair", labels: "labels", title: "title" }, usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: AxisDefaultsComponent, decorators: [{
            type: Component,
            args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    selector: 'kendo-chart-axis-defaults',
                    template: '',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: ConfigurationService }]; }, propDecorators: { background: [{
                type: Input
            }], color: [{
                type: Input
            }], line: [{
                type: Input
            }], majorGridLines: [{
                type: Input
            }], majorTicks: [{
                type: Input
            }], minorGridLines: [{
                type: Input
            }], minorTicks: [{
                type: Input
            }], narrowRange: [{
                type: Input
            }], pane: [{
                type: Input
            }], plotBands: [{
                type: Input
            }], reverse: [{
                type: Input
            }], startAngle: [{
                type: Input
            }], visible: [{
                type: Input
            }], crosshair: [{
                type: Input
            }], labels: [{
                type: Input
            }], title: [{
                type: Input
            }] } });

/**
 * Represents the available configuration options of the Chart crosshair ([see example](slug:axes_chart_charts#toc-default-axis-configuration)).
 *
 * @remarks
 * Supported children components are: {@link AxisDefaultsCrosshairTooltipComponent}.
 */
class AxisDefaultsCrosshairComponent extends SettingsComponent {
    configurationService;
    /**
     * Specifies the color of the crosshair.
     */
    color;
    /**
     * Specifies the dash type of the crosshair.
     * @default 'solid'
     */
    dashType;
    /**
     * Sets the opacity of the crosshair. By default, the crosshair is opaque.
     * @default 1
     */
    opacity;
    /**
     * Determines whether the Chart displays the axis crosshair.
     * By default, the axis crosshair is not visible.
     * @default false
     */
    visible;
    /**
     * Defines the width of the crosshair in pixels.
     * @default 1
     */
    width;
    // These options are also available as child components.
    /**
     * Specifies the tooltip configuration of the crosshair.
     */
    tooltip;
    constructor(configurationService) {
        super('axisDefaults.crosshair', configurationService);
        this.configurationService = configurationService;
        this.markAsVisible();
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: AxisDefaultsCrosshairComponent, deps: [{ token: ConfigurationService }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: AxisDefaultsCrosshairComponent, isStandalone: true, selector: "kendo-chart-axis-defaults-crosshair", inputs: { color: "color", dashType: "dashType", opacity: "opacity", visible: "visible", width: "width", tooltip: "tooltip" }, usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: AxisDefaultsCrosshairComponent, decorators: [{
            type: Component,
            args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    selector: 'kendo-chart-axis-defaults-crosshair',
                    template: '',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: ConfigurationService }]; }, propDecorators: { color: [{
                type: Input
            }], dashType: [{
                type: Input
            }], opacity: [{
                type: Input
            }], visible: [{
                type: Input
            }], width: [{
                type: Input
            }], tooltip: [{
                type: Input
            }] } });

/**
 * Represents the available options of the crosshair tooltip ([see example]({% slug crosshairs_chart_charts %})).
 * The crosshair tooltip is displayed when the [`axisDefaults.crosshair.tooltip.visible`]({% slug api_charts_axisdefaultscrosshairtooltipcomponent %}#toc-visible)
 * option is set to `true`.
 */
class AxisDefaultsCrosshairTooltipComponent extends SettingsComponent {
    configurationService;
    /**
     * Sets the background color of the tooltip.
     */
    background;
    /**
     * Specifies the border configuration of the tooltip.
     */
    border;
    /**
     * Sets the text color of the tooltip.
     */
    color;
    /**
     * Specifies the tooltip font.
     * @default '12px sans-serif'
     */
    font;
    /**
     * Specifies the format for displaying the tooltip. Uses the [`format`](slug:api_intl_intlservice#toc-format) method of `IntlService`.
     * Contains one placeholder (`"{0}"`) which represents the category value.
     * @default '{0}'
     */
    format;
    /**
     * Specifies the padding of the crosshair tooltip. A numeric value sets all paddings.
     * @default 0
     */
    padding;
    /**
     * Determines whether the Chart displays the axis crosshair tooltip.
     * By default, the axis crosshair tooltip is not visible.
     * @default false
     */
    visible;
    constructor(configurationService) {
        super('axisDefaults.crosshair.tooltip', configurationService);
        this.configurationService = configurationService;
        this.markAsVisible();
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: AxisDefaultsCrosshairTooltipComponent, deps: [{ token: ConfigurationService }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: AxisDefaultsCrosshairTooltipComponent, isStandalone: true, selector: "kendo-chart-axis-defaults-crosshair-tooltip", inputs: { background: "background", border: "border", color: "color", font: "font", format: "format", padding: "padding", visible: "visible" }, usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: AxisDefaultsCrosshairTooltipComponent, decorators: [{
            type: Component,
            args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    selector: 'kendo-chart-axis-defaults-crosshair-tooltip',
                    template: '',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: ConfigurationService }]; }, propDecorators: { background: [{
                type: Input
            }], border: [{
                type: Input
            }], color: [{
                type: Input
            }], font: [{
                type: Input
            }], format: [{
                type: Input
            }], padding: [{
                type: Input
            }], visible: [{
                type: Input
            }] } });

/**
 * Represents the configuration of the axis labels ([see example](slug:axes_chart_charts#toc-default-axis-configuration)).
 */
class AxisDefaultsLabelsComponent extends SettingsComponent {
    configurationService;
    /**
     * Specifies a `content` function that customizes the appearance of the labels.
     */
    content;
    /**
     * Specifies the font style of the labels.
     * @default '12px sans-serif'
     */
    font;
    /**
     * Specifies the format for displaying the labels. Uses the [`format`]({% slug api_intl_intlservice %}#toc-format) method of `IntlService`.
     * Contains one placeholder (`"{0}"`) which represents the category value.
     * @default '{0}'
     */
    format;
    /**
     * Specifies the margin of the labels. A numeric value sets all margins.
     * @default 0
     */
    margin;
    /**
     * Determines whether the Chart mirrors the axis labels and ticks.
     * If the labels are normally on the left side of the axis,
     * the mirroring of the axis renders them to the right.
     * @default false
     */
    mirror;
    /**
     * Sets the padding of the labels. A numeric value sets all paddings.
     * @default 0
     */
    padding;
    /**
     * Specifies the rotation angle of the labels. By default, the labels are not rotated.
     *
     * If the axis is horizontal, can be set to `"auto"`. In this case, the labels are rotated only if the slot size is not sufficient for the entire labels.
     * @default 0
     */
    rotation;
    /**
     * Specifies the number of labels to skip. By default, no labels are skipped.
     * @default 0
     */
    skip;
    /**
     * Specifies the step for rendering the labels&mdash;renders every n<sup>th</sup> label. By default, each label is rendered.
     * @default 1
     */
    step;
    /**
     * Determines whether the Chart displays the axis labels. By default, the axis labels are visible.
     * @default true
     */
    visible;
    /**
     * Specifies a `visual` function that customizes the appearance of the labels.
     */
    visual;
    constructor(configurationService) {
        super('axisDefaults.labels', configurationService);
        this.configurationService = configurationService;
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: AxisDefaultsLabelsComponent, deps: [{ token: ConfigurationService }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: AxisDefaultsLabelsComponent, isStandalone: true, selector: "kendo-chart-axis-defaults-labels", inputs: { content: "content", font: "font", format: "format", margin: "margin", mirror: "mirror", padding: "padding", rotation: "rotation", skip: "skip", step: "step", visible: "visible", visual: "visual" }, usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: AxisDefaultsLabelsComponent, decorators: [{
            type: Component,
            args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    selector: 'kendo-chart-axis-defaults-labels',
                    template: '',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: ConfigurationService }]; }, propDecorators: { content: [{
                type: Input
            }], font: [{
                type: Input
            }], format: [{
                type: Input
            }], margin: [{
                type: Input
            }], mirror: [{
                type: Input
            }], padding: [{
                type: Input
            }], rotation: [{
                type: Input
            }], skip: [{
                type: Input
            }], step: [{
                type: Input
            }], visible: [{
                type: Input
            }], visual: [{
                type: Input
            }] } });

/**
 * Represents the configuration of the axis title ([see example](slug:axes_chart_charts#toc-default-axis-configuration)).
 */
class AxisDefaultsTitleComponent extends SettingsComponent {
    configurationService;
    /**
     * Specifies the background color of the title.
     */
    background;
    /**
     * Specifies the border configuration of the title.
     */
    border;
    /**
     * Specifies the text color of the title.
     */
    color;
    /**
     * Specifies the font style of the title.
     * @default 'bold 16px sans-serif'
     */
    font;
    /**
     * Specifies the margin of the title. A numeric value sets all margins.
     * @default 5
     */
    margin;
    /**
     * Specifies the padding of the title. A numeric value sets all paddings.
     * @default 0
     */
    padding;
    /**
     * Specifies the position of the title.
     * @default 'center'
     */
    position;
    /**
     * Specifies the rotation angle of the title. By default, the title is not rotated.
     * @default 0
     */
    rotation;
    /**
     * Specifies the text content of the title.
     */
    text;
    /**
     * Determines whether the Chart displays the axis title. By default, the axis title is visible.
     * @default true
     */
    visible;
    /**
     * Specifies a `visual` function that customizes the appearance of the title.
     */
    visual;
    constructor(configurationService) {
        super('axisDefaults.title', configurationService);
        this.configurationService = configurationService;
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: AxisDefaultsTitleComponent, deps: [{ token: ConfigurationService }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: AxisDefaultsTitleComponent, isStandalone: true, selector: "kendo-chart-axis-defaults-title", inputs: { background: "background", border: "border", color: "color", font: "font", margin: "margin", padding: "padding", position: "position", rotation: "rotation", text: "text", visible: "visible", visual: "visual" }, usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: AxisDefaultsTitleComponent, decorators: [{
            type: Component,
            args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    selector: 'kendo-chart-axis-defaults-title',
                    template: '',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: ConfigurationService }]; }, propDecorators: { background: [{
                type: Input
            }], border: [{
                type: Input
            }], color: [{
                type: Input
            }], font: [{
                type: Input
            }], margin: [{
                type: Input
            }], padding: [{
                type: Input
            }], position: [{
                type: Input
            }], rotation: [{
                type: Input
            }], text: [{
                type: Input
            }], visible: [{
                type: Input
            }], visual: [{
                type: Input
            }] } });

/**
 * Represents a collection of one or more category axis items.
 *
 * @example
 * ```ts
 * import { Component } from '@angular/core';
 *
 *  @Component({
 *   selector: 'my-app',
 *   template: `
 *     <kendo-chart>
 *       <kendo-chart-category-axis>
 *         <kendo-chart-category-axis-item [categories]="[2015, 2016]" color="#f00">
 *         </kendo-chart-category-axis-item>
 *       </kendo-chart-category-axis>
 *       <kendo-chart-series>
 *         <kendo-chart-series-item type="line" [data]="[1, 2, 3]">
 *         </kendo-chart-series-item>
 *       </kendo-chart-series>
 *     </kendo-chart>
 *   `
 * })
 * class AppComponent {
 * }
 * ```
 *
 * @remarks
 * Supported children components are: {@link CategoryAxisItemComponent}.
 */
class CategoryAxisComponent extends CollectionComponent {
    configurationService;
    collectionService;
    children;
    constructor(configurationService, collectionService) {
        super('categoryAxis', configurationService, collectionService);
        this.configurationService = configurationService;
        this.collectionService = collectionService;
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: CategoryAxisComponent, deps: [{ token: ConfigurationService }, { token: CollectionService }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: CategoryAxisComponent, isStandalone: true, selector: "kendo-chart-category-axis", providers: [CollectionService], queries: [{ propertyName: "children", predicate: CategoryAxisItemComponent }], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: CategoryAxisComponent, decorators: [{
            type: Component,
            args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [CollectionService],
                    selector: 'kendo-chart-category-axis',
                    template: '',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: ConfigurationService }, { type: CollectionService }]; }, propDecorators: { children: [{
                type: ContentChildren,
                args: [CategoryAxisItemComponent]
            }] } });

/**
 * Represents the range labels configuration for the category axis in the Chart ([see example]({% slug labels_chart_charts %})).
 */
class CategoryAxisRangeLabelsComponent extends CategoryAxisLabelsComponent {
    configurationService;
    constructor(configurationService) {
        super(configurationService);
        this.configurationService = configurationService;
        this.configKey = 'rangeLabels';
        this.markAsVisible();
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: CategoryAxisRangeLabelsComponent, deps: [{ token: ConfigurationService }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: CategoryAxisRangeLabelsComponent, isStandalone: true, selector: "kendo-chart-category-axis-item-range-labels", usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: CategoryAxisRangeLabelsComponent, decorators: [{
            type: Component,
            args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    selector: 'kendo-chart-category-axis-item-range-labels',
                    template: '',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: ConfigurationService }]; } });

/**
 * Represents the Kendo UI for Angular Chart Area configuration.
 * Represents the entire visible area of the Chart
 * ([see example]({% slug chartarea_chart_charts %})).
 *
 * @example
 * ```html
 * <kendo-chart>
 *  <kendo-chart-area background="#f0f0f0" [border]="{ color: '#ccc', width: 1 }">
 *  </kendo-chart-area>
 * </kendo-chart>
 * ```
 */
class ChartAreaComponent extends SettingsComponent {
    configurationService;
    /**
     * Specifies the background color of the Chart area. Accepts a valid CSS color string, including hex and rgb.
     * @default 'white'
     */
    background;
    /**
     * Specifies the border configuration of the Chart area.
     */
    border;
    /**
     * Specifies the height of the Chart area.
     * @default 400
     */
    height;
    /**
     * Specifies the margin of the Chart area. A numeric value sets all margins.
     * @default 5
     */
    margin;
    /**
     * Specifies the background opacity of the Chart area. By default, the background is opaque.
     * @default 1
     */
    opacity;
    /**
     * Specifies the width of the Chart area.
     * @default 600
     */
    width;
    constructor(configurationService) {
        super('chartArea', configurationService);
        this.configurationService = configurationService;
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: ChartAreaComponent, deps: [{ token: ConfigurationService }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: ChartAreaComponent, isStandalone: true, selector: "kendo-chart-area", inputs: { background: "background", border: "border", height: "height", margin: "margin", opacity: "opacity", width: "width" }, usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: ChartAreaComponent, decorators: [{
            type: Component,
            args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    selector: 'kendo-chart-area',
                    template: '',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: ConfigurationService }]; }, propDecorators: { background: [{
                type: Input
            }], border: [{
                type: Input
            }], height: [{
                type: Input
            }], margin: [{
                type: Input
            }], opacity: [{
                type: Input
            }], width: [{
                type: Input
            }] } });

/**
 * Represents the Kendo UI for Angular Chart Legend configuration
 * ([see example]({% slug legend_chart_charts %})).
 *
 * @example
 * ```html
 * <kendo-chart>
 *  <kendo-chart-legend position="top" [visible]="true">
 *  </kendo-chart-legend>
 * </kendo-chart>
 * ```
 *
 * @remarks
 * Supported children components are: {@link LegendInactiveItemsComponent} and {@link LegendItemComponent}.
 */
class LegendComponent extends SettingsComponent {
    configurationService;
    /**
     * Specifies the alignment of the legend.
     * The legend is horizontally aligned when [`legend.position`]({% slug api_charts_legend %}#toc-position) is set to `"top"` or `"bottom"`.
     * The legend is vertically aligned when [`legend.position`]({% slug api_charts_legend %}#toc-position) is set to `"left"` or `"right"`.
     * @default 'center'
     */
    align;
    /**
     * Specifies the background color of the legend. Accepts a valid CSS color string, including hex and rgb.
     * @default 'white'
     */
    background;
    /**
     * Specifies the border configuration of the legend.
     */
    border;
    /**
     * Specifies the height of the legend.
     */
    height;
    /**
     * Specifies the labels configuration of the legend.
     */
    labels;
    /**
     * Specifies the margin of the Chart legend. A numeric value sets all paddings.
     * @default 5
     */
    margin;
    /**
     * Specifies the X offset of the Chart legend. The offset is relative to the default position of the legend.
     * For example, a value of `20` moves the legend 20 pixels to the right of its initial position.
     * Negative values move the legend to the left of its current position.
     * @default 0
     */
    offsetX;
    /**
     * Specifies the Y offset of the chart legend. The offset is relative to the current position of the legend.
     * For example, a value of `20` moves the legend 20 pixels down from its initial position.
     * Negative values move the legend upwards from its current position.
     * @default 0
     */
    offsetY;
    /**
     * Specifies the orientation of the legend items.
     * @default 'vertical'
     */
    orientation;
    /**
     * Specifies the padding of the Chart legend. A numeric value sets all paddings.
     * @default 5
     */
    padding;
    /**
     * Specifies the positions of the Chart legend.
     * Setting the legend position to `custom` allows you to position the legend using the [`legend.offsetX`](slug:api_charts_legend#toc-offsetx) and [`legend.offsetY`](slug:api_charts_legend#toc-offsety) options.
     * @default 'right'
     */
    position;
    /**
     * Determines whether the legend items are reversed.
     * @default false
     */
    reverse;
    /**
     * Determines whether the Chart displays the legend. By default, the Chart legend is visible.
     * @default true
     */
    visible;
    /**
     * Specifies the width of the legend.
     */
    width;
    /**
     * Specifies the markers configuration of the legend.
     */
    markers;
    /**
     * Specifies the spacing between legend items.
     */
    spacing;
    // These options are also available as child components
    /**
     * Specifies the inactive items configuration of the legend.
     */
    inactiveItems;
    /**
     * Specifies the item configuration of the legend.
     */
    item;
    /**
     * Specifies the title configuration of the legend.
     */
    title;
    /**
     * Specifies the focus highlight configuration of the legend.
     */
    focusHighlight;
    constructor(configurationService) {
        super('legend', configurationService);
        this.configurationService = configurationService;
        this.markAsVisible();
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: LegendComponent, deps: [{ token: ConfigurationService }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: LegendComponent, isStandalone: true, selector: "kendo-chart-legend", inputs: { align: "align", background: "background", border: "border", height: "height", labels: "labels", margin: "margin", offsetX: "offsetX", offsetY: "offsetY", orientation: "orientation", padding: "padding", position: "position", reverse: "reverse", visible: "visible", width: "width", markers: "markers", spacing: "spacing", inactiveItems: "inactiveItems", item: "item", title: "title", focusHighlight: "focusHighlight" }, usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: LegendComponent, decorators: [{
            type: Component,
            args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    selector: 'kendo-chart-legend',
                    template: '',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: ConfigurationService }]; }, propDecorators: { align: [{
                type: Input
            }], background: [{
                type: Input
            }], border: [{
                type: Input
            }], height: [{
                type: Input
            }], labels: [{
                type: Input
            }], margin: [{
                type: Input
            }], offsetX: [{
                type: Input
            }], offsetY: [{
                type: Input
            }], orientation: [{
                type: Input
            }], padding: [{
                type: Input
            }], position: [{
                type: Input
            }], reverse: [{
                type: Input
            }], visible: [{
                type: Input
            }], width: [{
                type: Input
            }], markers: [{
                type: Input
            }], spacing: [{
                type: Input
            }], inactiveItems: [{
                type: Input
            }], item: [{
                type: Input
            }], title: [{
                type: Input
            }], focusHighlight: [{
                type: Input
            }] } });

/**
 * Represents the Kendo UI for Angular Chart Legend Inactive Items configuration.
 *
 * @example
 *
 * ```html
 * <kendo-chart>
 *   <kendo-chart-legend>
 *      <kendo-chart-legend-inactive-items [labels]="{color: 'pink'}"></kendo-chart-legend-inactive-items>
 *   </kendo-chart-legend>
 * </kendo-chart>
 * ```
 */
class LegendInactiveItemsComponent extends SettingsComponent {
    configurationService;
    /**
     * Specifies the labels configuration for inactive legend items.
     */
    labels;
    constructor(configurationService) {
        super('legend.inactiveItems', configurationService);
        this.configurationService = configurationService;
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: LegendInactiveItemsComponent, deps: [{ token: ConfigurationService }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: LegendInactiveItemsComponent, isStandalone: true, selector: "kendo-chart-legend-inactive-items", inputs: { labels: "labels" }, usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: LegendInactiveItemsComponent, decorators: [{
            type: Component,
            args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    selector: 'kendo-chart-legend-inactive-items',
                    template: '',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: ConfigurationService }]; }, propDecorators: { labels: [{
                type: Input
            }] } });

/**
 * Represents the Kendo UI for Angular Chart Legend Item configuration.
 *
 * @example
 *
 * ```html
 * <kendo-chart>
 *   <kendo-chart-legend>
 *      <kendo-chart-legend-item cursor="crosshair"></kendo-chart-legend-item>
 *   </kendo-chart-legend>
 * </kendo-chart>
 * ```
 */
class LegendItemComponent extends SettingsComponent {
    configurationService;
    /**
     * Specifies the cursor style for legend items.
     */
    cursor;
    /**
     * Specifies the type of the legend item.
     */
    type;
    /**
     * Specifies the line configuration for the legend item.
     */
    line;
    /**
     * Specifies the area configuration for the legend item.
     */
    area;
    /**
     * Specifies the markers configuration for the legend item.
     */
    markers;
    /**
     * Specifies the highlight configuration for the legend item.
     */
    highlight;
    /**
     * Specifies a function that creates a custom visual for the legend item.
     */
    visual;
    constructor(configurationService) {
        super('legend.item', configurationService);
        this.configurationService = configurationService;
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: LegendItemComponent, deps: [{ token: ConfigurationService }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: LegendItemComponent, isStandalone: true, selector: "kendo-chart-legend-item", inputs: { cursor: "cursor", type: "type", line: "line", area: "area", markers: "markers", highlight: "highlight", visual: "visual" }, usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: LegendItemComponent, decorators: [{
            type: Component,
            args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    selector: 'kendo-chart-legend-item',
                    template: '',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: ConfigurationService }]; }, propDecorators: { cursor: [{
                type: Input
            }], type: [{
                type: Input
            }], line: [{
                type: Input
            }], area: [{
                type: Input
            }], markers: [{
                type: Input
            }], highlight: [{
                type: Input
            }], visual: [{
                type: Input
            }] } });

/**
 * Represents the default options for all Chart panes
 * ([see example](slug:panes_chart_charts#toc-default-settings)).
 *
 * @example
 * ```html
 * <kendo-chart>
 *  <kendo-chart-pane-defaults background="#f0f0f0" [border]="{ color: '#ccc', width: 1 }">
 *   <kendo-chart-pane-defaults-title [visible]="true"></kendo-chart-pane-defaults-title>
 *  </kendo-chart-pane-defaults>
 * </kendo-chart>
 * ```
 *
 * @remarks
 * Supported children components are: {@link PaneDefaultsTitleComponent}.
 */
class PaneDefaultsComponent extends SettingsComponent {
    configurationService;
    /**
     * Specifies the background color of the pane.
     */
    background;
    /**
     * Specifies the border configuration of the pane.
     */
    border;
    /**
     * Determines whether the pane clips its content.
     */
    clip;
    /**
     * Specifies the height of the pane.
     */
    height;
    /**
     * Specifies the margin of the pane. A numeric value sets all margins.
     * @default 0
     */
    margin;
    /**
     * Specifies the padding of the pane. A numeric value sets all paddings.
     * @default 0
     */
    padding;
    /**
     * Specifies the title configuration of the pane.
     */
    title;
    constructor(configurationService) {
        super('paneDefaults', configurationService);
        this.configurationService = configurationService;
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: PaneDefaultsComponent, deps: [{ token: ConfigurationService }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: PaneDefaultsComponent, isStandalone: true, selector: "kendo-chart-pane-defaults", inputs: { background: "background", border: "border", clip: "clip", height: "height", margin: "margin", padding: "padding", title: "title" }, usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: PaneDefaultsComponent, decorators: [{
            type: Component,
            args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    selector: 'kendo-chart-pane-defaults',
                    template: '',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: ConfigurationService }]; }, propDecorators: { background: [{
                type: Input
            }], border: [{
                type: Input
            }], clip: [{
                type: Input
            }], height: [{
                type: Input
            }], margin: [{
                type: Input
            }], padding: [{
                type: Input
            }], title: [{
                type: Input
            }] } });

/**
 * Represents the default title configuration of all Chart panes.
 */
class PaneDefaultsTitleComponent extends SettingsComponent {
    configurationService;
    /**
     * Specifies the background color of the title.
     */
    background;
    /**
     * Specifies the border configuration of the title.
     */
    border;
    /**
     * Specifies the text color of the title.
     */
    color;
    /**
     * Specifies the font style of the title.
     * @default '16px sans-serif'
     */
    font;
    /**
     * Specifies the margin of the title. A numeric value sets all margins.
     * @default 5
     */
    margin;
    /**
     * Specifies the position of the title.
     *
     * The positioning of the axis title can be set to `left` for left positioning, `right` for right positioning (both applicable to the horizontal axis), or `center` for positioning in the center.
     * @default 'center'
     */
    position;
    /**
     * Determines whether the Chart displays the pane title.
     * @default true
     */
    visible;
    /**
     * Specifies a function that creates a custom visual for the title.
     */
    visual;
    constructor(configurationService) {
        super('paneDefaults.title', configurationService);
        this.configurationService = configurationService;
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: PaneDefaultsTitleComponent, deps: [{ token: ConfigurationService }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: PaneDefaultsTitleComponent, isStandalone: true, selector: "kendo-chart-pane-defaults-title", inputs: { background: "background", border: "border", color: "color", font: "font", margin: "margin", position: "position", visible: "visible", visual: "visual" }, usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: PaneDefaultsTitleComponent, decorators: [{
            type: Component,
            args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    selector: 'kendo-chart-pane-defaults-title',
                    template: '',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: ConfigurationService }]; }, propDecorators: { background: [{
                type: Input
            }], border: [{
                type: Input
            }], color: [{
                type: Input
            }], font: [{
                type: Input
            }], margin: [{
                type: Input
            }], position: [{
                type: Input
            }], visible: [{
                type: Input
            }], visual: [{
                type: Input
            }] } });

/**
 * Represents collection of one or more pane configuration components.
 *
 * @example
 * ```html
 * <kendo-chart>
 *   <kendo-chart-panes>
 *     <kendo-chart-pane name="topPane"></kendo-chart-pane>
 *     <kendo-chart-pane name="bottomPane"></kendo-chart-pane>
 *   </kendo-chart-panes>
 *   ...
 * </kendo-chart>
 * ```
 *
 * @remarks
 * Supported children components are: {@link PaneComponent}.
 */
class PanesComponent extends CollectionComponent {
    configurationService;
    collectionService;
    children;
    constructor(configurationService, collectionService) {
        super('panes', configurationService, collectionService);
        this.configurationService = configurationService;
        this.collectionService = collectionService;
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: PanesComponent, deps: [{ token: ConfigurationService }, { token: CollectionService }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: PanesComponent, isStandalone: true, selector: "kendo-chart-panes", providers: [CollectionService], queries: [{ propertyName: "children", predicate: PaneComponent }], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: PanesComponent, decorators: [{
            type: Component,
            args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [CollectionService],
                    selector: 'kendo-chart-panes',
                    template: '',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: ConfigurationService }, { type: CollectionService }]; }, propDecorators: { children: [{
                type: ContentChildren,
                args: [PaneComponent]
            }] } });

/**
 * Represents the Kendo UI for Angular Chart Plot Area component
 * ([see example]({% slug plotarea_chart_charts %})).
 * The plot area is the area which displays the series.
 */
class PlotAreaComponent extends SettingsComponent {
    configurationService;
    /**
     * Specifies the background color of the Chart plot area.
     * Accepts a valid CSS color string, including HEX and RGB.
     * @default 'white'
     */
    background;
    /**
     * Specifies the border configuration of the plot area.
     */
    border;
    /**
     * Specifies the margin of the plot area. A numeric value sets all margins.
     * @default 5
     */
    margin;
    /**
     * Specifies the background opacity of the plot area. By default, the background is opaque.
     * @default 1
     */
    opacity;
    /**
     * Specifies the padding of the plot area. A numeric value sets all paddings.
     * Use proportional padding for the Pie, Donut, Radar, and Polar Charts based on the Chart size.
     * @default 5
     */
    padding;
    constructor(configurationService) {
        super('plotArea', configurationService);
        this.configurationService = configurationService;
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: PlotAreaComponent, deps: [{ token: ConfigurationService }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: PlotAreaComponent, isStandalone: true, selector: "kendo-chart-plot-area", inputs: { background: "background", border: "border", margin: "margin", opacity: "opacity", padding: "padding" }, usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: PlotAreaComponent, decorators: [{
            type: Component,
            args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    selector: 'kendo-chart-plot-area',
                    template: '',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: ConfigurationService }]; }, propDecorators: { background: [{
                type: Input
            }], border: [{
                type: Input
            }], margin: [{
                type: Input
            }], opacity: [{
                type: Input
            }], padding: [{
                type: Input
            }] } });

/**
 * Represents the default options for all Chart series
 * ([see example]({% slug series_chart_charts %}#toc-default-series-configuration)).
 *
 * @example
 * ```html
 * <kendo-chart>
 *  <kendo-chart-series-defaults type="line">
 *   <kendo-chart-series-defaults-labels format="c"></kendo-chart-series-defaults-labels>
 *   <kendo-chart-series-defaults-notes position="above"></kendo-chart-series-defaults-notes>
 *   <kendo-chart-series-defaults-tooltip [visible]="true"></kendo-chart-series-defaults-tooltip>
 *  </kendo-chart-series-defaults>
 * </kendo-chart>
 * ```
 *
 * @remarks
 * Supported children components are: {@link SeriesDefaultsLabelsComponent}, {@link SeriesDefaultsNotesComponent}, and {@link SeriesDefaultsTooltipComponent}.
 */
class SeriesDefaultsComponent extends SettingsComponent {
    configurationService;
    /**
     * Specifies the border configuration of the series.
     */
    border;
    /**
     * Specifies the distance between category clusters.
     * @default 1.5
     */
    gap;
    /**
     * Specifies the highlight configuration of the series.
     */
    highlight;
    /**
     * Specifies the overlay configuration of the series.
     */
    overlay;
    /**
     * Specifies the space between the Chart series as a proportion of the series width.
     * Use this option when [`series.type`]({% slug api_charts_series %}#toc-type) is set to `"bar"`, `"column"`, `"candlestick"`, `"ohlc"`,
     * and `"waterfall"`.
     * @default 0.4
     */
    spacing;
    /**
     * Determines whether the series has to be stacked.
     * Use this option when [`series.type`]({% slug api_charts_series %}#toc-type) is set to `"bar"`, `"column"`, `"line"`, `"area"`,
     * `"verticalLine"`, `"verticalArea"`, `"radarLine"`, `"radarArea"`, and `"radarColumn"`.
     * @default false
     */
    stack;
    /**
     * Specifies the type of the series.
     */
    type;
    /**
     * Specifies a function that returns a visual element for the series.
     */
    visual;
    // These options are also available as child components
    /**
     * Specifies the labels configuration of the series.
     */
    labels;
    /**
     * Specifies the notes configuration of the series.
     */
    notes;
    /**
     * Specifies the tooltip configuration of the series.
     */
    tooltip;
    /**
     * Specifies the focus highlight configuration of the series.
     */
    focusHighlight;
    constructor(configurationService) {
        super('seriesDefaults', configurationService);
        this.configurationService = configurationService;
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: SeriesDefaultsComponent, deps: [{ token: ConfigurationService }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: SeriesDefaultsComponent, isStandalone: true, selector: "kendo-chart-series-defaults", inputs: { border: "border", gap: "gap", highlight: "highlight", overlay: "overlay", spacing: "spacing", stack: "stack", type: "type", visual: "visual", labels: "labels", notes: "notes", tooltip: "tooltip", focusHighlight: "focusHighlight" }, usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: SeriesDefaultsComponent, decorators: [{
            type: Component,
            args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    selector: 'kendo-chart-series-defaults',
                    template: '',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: ConfigurationService }]; }, propDecorators: { border: [{
                type: Input
            }], gap: [{
                type: Input
            }], highlight: [{
                type: Input
            }], overlay: [{
                type: Input
            }], spacing: [{
                type: Input
            }], stack: [{
                type: Input
            }], type: [{
                type: Input
            }], visual: [{
                type: Input
            }], labels: [{
                type: Input
            }], notes: [{
                type: Input
            }], tooltip: [{
                type: Input
            }], focusHighlight: [{
                type: Input
            }] } });

/**
 * Represents the configuration of the Chart series labels.
 *
 * @example
 * ```html
 * <kendo-chart>
 *  <kendo-chart-series-defaults>
 *   <kendo-chart-series-defaults-labels format="c">
 *   </kendo-chart-series-defaults-labels>
 *  </kendo-chart-series-defaults>
 * </kendo-chart>
 * ```
 *
 * @remarks
 * Supported children components are: {@link SeriesDefaultsLabelsFromComponent} and {@link SeriesDefaultsLabelsToComponent}.
 */
class SeriesDefaultsLabelsComponent extends SettingsComponent {
    configurationService;
    /**
     * Specifies the background color of the labels.
     */
    background;
    /**
     * Specifies the border configuration of the labels.
     */
    border;
    /**
     * Specifies the text color of the labels.
     */
    color;
    /**
     * Specifies a function that returns the content of the labels.
     */
    content;
    /**
     * Specifies the font style of the labels.
     * @default '12px sans-serif'
     */
    font;
    /**
     * Specifies the format of the labels. Uses the [`format`]({% slug api_intl_intlservice %}#toc-format) method of `IntlService`.
     * @default '{0}'
     */
    format;
    /**
     * Specifies the margin of the labels. A numeric value sets all margins.
     * @default 0
     */
    margin;
    /**
     * Specifies the padding of the labels. A numeric value sets all paddings.
     * @default 0
     */
    padding;
    /**
     * Determines whether the Chart displays the series labels.
     * @default false
     */
    visible;
    /**
     * Specifies a function that creates a custom visual for the labels.
     */
    visual;
    // These options are also available as child components
    /**
     * Specifies the `from` labels configuration.
     */
    from;
    /**
     * Specifies the `to` labels configuration.
     */
    to;
    constructor(configurationService) {
        super('seriesDefaults.labels', configurationService);
        this.configurationService = configurationService;
        this.markAsVisible();
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: SeriesDefaultsLabelsComponent, deps: [{ token: ConfigurationService }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: SeriesDefaultsLabelsComponent, isStandalone: true, selector: "kendo-chart-series-defaults-labels", inputs: { background: "background", border: "border", color: "color", content: "content", font: "font", format: "format", margin: "margin", padding: "padding", visible: "visible", visual: "visual", from: "from", to: "to" }, usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: SeriesDefaultsLabelsComponent, decorators: [{
            type: Component,
            args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    selector: 'kendo-chart-series-defaults-labels',
                    template: '',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: ConfigurationService }]; }, propDecorators: { background: [{
                type: Input
            }], border: [{
                type: Input
            }], color: [{
                type: Input
            }], content: [{
                type: Input
            }], font: [{
                type: Input
            }], format: [{
                type: Input
            }], margin: [{
                type: Input
            }], padding: [{
                type: Input
            }], visible: [{
                type: Input
            }], visual: [{
                type: Input
            }], from: [{
                type: Input
            }], to: [{
                type: Input
            }] } });

/**
 * Represents the `from` label configuration of the Chart series.
 */
class SeriesDefaultsLabelsFromComponent extends SettingsComponent {
    configurationService;
    /**
     * Specifies the background color of the `from` labels.
     */
    background;
    /**
     * Specifies the border configuration of the `from` labels.
     */
    border;
    /**
     * Specifies the text color of the `from` labels.
     */
    color;
    /**
     * Specifies a function that returns the content of the `from` labels.
     */
    content;
    /**
     * Specifies the font style of the `from` labels.
     * @default '12px sans-serif'
     */
    font;
    /**
     * Specifies the format of the `from` labels. Uses the [`format`]({% slug api_intl_intlservice %}#toc-format) of `IntlService`.
     * @default '{0}'
     */
    format;
    /**
     * Specifies the margin of the `from` labels. A numeric value sets all margins.
     * @default 0
     */
    margin;
    /**
     * Specifies the padding of the `from` labels. A numeric value sets all paddings.
     * @default 0
     */
    padding;
    /**
     * Determines whether the Chart displays the series `from` labels.
     * @default false
     */
    visible;
    constructor(configurationService) {
        super('seriesDefaults.labels.from', configurationService);
        this.configurationService = configurationService;
        this.markAsVisible();
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: SeriesDefaultsLabelsFromComponent, deps: [{ token: ConfigurationService }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: SeriesDefaultsLabelsFromComponent, isStandalone: true, selector: "kendo-chart-series-defaults-labels-from", inputs: { background: "background", border: "border", color: "color", content: "content", font: "font", format: "format", margin: "margin", padding: "padding", visible: "visible" }, usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: SeriesDefaultsLabelsFromComponent, decorators: [{
            type: Component,
            args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    selector: 'kendo-chart-series-defaults-labels-from',
                    template: '',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: ConfigurationService }]; }, propDecorators: { background: [{
                type: Input
            }], border: [{
                type: Input
            }], color: [{
                type: Input
            }], content: [{
                type: Input
            }], font: [{
                type: Input
            }], format: [{
                type: Input
            }], margin: [{
                type: Input
            }], padding: [{
                type: Input
            }], visible: [{
                type: Input
            }] } });

/**
 * Represents the `to` label configuration of the Chart series.
 */
class SeriesDefaultsLabelsToComponent extends SettingsComponent {
    configurationService;
    /**
     * Specifies the background color of the `to` labels.
     */
    background;
    /**
     * Specifies the border configuration of the `to` labels.
     */
    border;
    /**
     * Specifies the text color of the `to` labels.
     */
    color;
    /**
     * Specifies a function that returns the content of the `to` labels.
     */
    content;
    /**
     * Specifies the font style of the `to` labels.
     * @default '12px sans-serif"'
     */
    font;
    /**
     * Specifies the format of the `to` labels. Uses the [`format`]({% slug api_intl_intlservice %}#toc-format) method of `IntlService`.
     * @default '{0}'
     */
    format;
    /**
     * Specifies the margin of the `to` labels. A numeric value sets all margins.
     * @default 0
     */
    margin;
    /**
     * Specifies the padding of the `to` labels. A numeric value sets all paddings.
     * @default 0
     */
    padding;
    /**
     * Determines whether the Chart displays the `to` labels of the series.
     * @default false
     */
    visible;
    constructor(configurationService) {
        super('seriesDefaults.labels.to', configurationService);
        this.configurationService = configurationService;
        this.markAsVisible();
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: SeriesDefaultsLabelsToComponent, deps: [{ token: ConfigurationService }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: SeriesDefaultsLabelsToComponent, isStandalone: true, selector: "kendo-chart-series-defaults-labels-to", inputs: { background: "background", border: "border", color: "color", content: "content", font: "font", format: "format", margin: "margin", padding: "padding", visible: "visible" }, usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: SeriesDefaultsLabelsToComponent, decorators: [{
            type: Component,
            args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    selector: 'kendo-chart-series-defaults-labels-to',
                    template: '',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: ConfigurationService }]; }, propDecorators: { background: [{
                type: Input
            }], border: [{
                type: Input
            }], color: [{
                type: Input
            }], content: [{
                type: Input
            }], font: [{
                type: Input
            }], format: [{
                type: Input
            }], margin: [{
                type: Input
            }], padding: [{
                type: Input
            }], visible: [{
                type: Input
            }] } });

/**
 * Represents the configuration of the [`seriesDefaults`]({% slug api_charts_seriesdefaultscomponent %}) notes.
 *
 * @example
 * ```html
 * <kendo-chart>
 * <kendo-chart-series-defaults>
 *   <kendo-chart-series-defaults-notes position="above">
 *   </kendo-chart-series-defaults-notes>
 *  </kendo-chart-series-defaults>
 * </kendo-chart>
 * ```
 *
 * @remarks
 * Supported children components are: {@link SeriesDefaultsNotesIconComponent} and {@link SeriesDefaultsNotesLabelComponent}.
 */
class SeriesDefaultsNotesComponent extends SettingsComponent {
    configurationService;
    /**
     * Specifies the line configuration for the notes.
     */
    line;
    /**
     * Specifies a function that creates a custom visual for the notes.
     */
    visual;
    // These options are also available as child components
    /**
     * Specifies the icon configuration for the notes.
     */
    icon;
    /**
     * Specifies the label configuration for the notes.
     */
    label;
    constructor(configurationService) {
        super('seriesDefaults.notes', configurationService);
        this.configurationService = configurationService;
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: SeriesDefaultsNotesComponent, deps: [{ token: ConfigurationService }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: SeriesDefaultsNotesComponent, isStandalone: true, selector: "kendo-chart-series-defaults-notes", inputs: { line: "line", visual: "visual", icon: "icon", label: "label" }, usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: SeriesDefaultsNotesComponent, decorators: [{
            type: Component,
            args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    selector: 'kendo-chart-series-defaults-notes',
                    template: '',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: ConfigurationService }]; }, propDecorators: { line: [{
                type: Input
            }], visual: [{
                type: Input
            }], icon: [{
                type: Input
            }], label: [{
                type: Input
            }] } });

/**
 * Represents the configuration of the Chart notes icon.
 */
class SeriesDefaultsNotesIconComponent extends SettingsComponent {
    configurationService;
    /**
     * Specifies the background color of the notes icon.
     */
    background;
    /**
     * Specifies the border configuration of the notes icon.
     */
    border;
    /**
     * Specifies the size of the notes icon.
     */
    size;
    /**
     * Specifies the shape of the notes icon.
     * @default 'circle'
     */
    type;
    /**
     * Determines whether the notes icon is visible.
     * @default true
     */
    visible;
    constructor(configurationService) {
        super('seriesDefaults.notes.icon', configurationService);
        this.configurationService = configurationService;
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: SeriesDefaultsNotesIconComponent, deps: [{ token: ConfigurationService }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: SeriesDefaultsNotesIconComponent, isStandalone: true, selector: "kendo-chart-series-defaults-notes-icon", inputs: { background: "background", border: "border", size: "size", type: "type", visible: "visible" }, usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: SeriesDefaultsNotesIconComponent, decorators: [{
            type: Component,
            args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    selector: 'kendo-chart-series-defaults-notes-icon',
                    template: '',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: ConfigurationService }]; }, propDecorators: { background: [{
                type: Input
            }], border: [{
                type: Input
            }], size: [{
                type: Input
            }], type: [{
                type: Input
            }], visible: [{
                type: Input
            }] } });

/**
 * Represents the configuration of the Chart notes label.
 */
class SeriesDefaultsNotesLabelComponent extends SettingsComponent {
    configurationService;
    /**
     * Specifies the background color of the notes label.
     */
    background;
    /**
     * Specifies the border configuration of the notes label.
     */
    border;
    /**
     * Specifies the text color of the notes label.
     */
    color;
    /**
     * Specifies a function that returns the content of the notes label.
     */
    content;
    /**
     * Specifies the font style of the label.
     * @default '12px sans-serif'
     */
    font;
    /**
     * Specifies the format for displaying the notes label. Uses the [`format`]({% slug api_intl_intlservice %}#toc-format) method of `IntlService`.
     * Contains one placeholder (`"{0}"`) which represents the axis value.
     * @default '{0}'
     */
    format;
    /**
     * Specifies the position of the labels.
     * @default 'inside'
     */
    position;
    /**
     * Specifies the rotation angle of the label. By default, the label is not rotated.
     * @default 0
     */
    rotation;
    /**
     * Determines whether the Chart displays the [`seriesDefaults`]({% slug api_charts_seriesdefaults %}) notes label.
     * @default true
     */
    visible;
    constructor(configurationService) {
        super('seriesDefaults.notes.label', configurationService);
        this.configurationService = configurationService;
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: SeriesDefaultsNotesLabelComponent, deps: [{ token: ConfigurationService }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: SeriesDefaultsNotesLabelComponent, isStandalone: true, selector: "kendo-chart-series-defaults-notes-label", inputs: { background: "background", border: "border", color: "color", content: "content", font: "font", format: "format", position: "position", rotation: "rotation", visible: "visible" }, usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: SeriesDefaultsNotesLabelComponent, decorators: [{
            type: Component,
            args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    selector: 'kendo-chart-series-defaults-notes-label',
                    template: '',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: ConfigurationService }]; }, propDecorators: { background: [{
                type: Input
            }], border: [{
                type: Input
            }], color: [{
                type: Input
            }], content: [{
                type: Input
            }], font: [{
                type: Input
            }], format: [{
                type: Input
            }], position: [{
                type: Input
            }], rotation: [{
                type: Input
            }], visible: [{
                type: Input
            }] } });

/**
 * Represents the configuration options of the Chart series tooltip.
 */
class SeriesDefaultsTooltipComponent extends SettingsComponent {
    configurationService;
    /**
     * Specifies the background color of the tooltip.
     */
    background;
    /**
     * Specifies the border configuration of the tooltip.
     */
    border;
    /**
     * Specifies the text color of the tooltip.
     */
    color;
    /**
     * Specifies the tooltip font.
     * @default '12px sans serif'
     */
    font;
    /**
     * Specifies the format of the tooltip.
     */
    format;
    /**
     * Specifies the padding of the tooltip. A numeric value sets all paddings.
     * @default 0
     */
    padding;
    /**
     * Determines whether the Chart displays the series tooltip.
     * @default false
     */
    visible;
    constructor(configurationService) {
        super('seriesDefaults.tooltip', configurationService);
        this.configurationService = configurationService;
        this.markAsVisible();
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: SeriesDefaultsTooltipComponent, deps: [{ token: ConfigurationService }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: SeriesDefaultsTooltipComponent, isStandalone: true, selector: "kendo-chart-series-defaults-tooltip", inputs: { background: "background", border: "border", color: "color", font: "font", format: "format", padding: "padding", visible: "visible" }, usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: SeriesDefaultsTooltipComponent, decorators: [{
            type: Component,
            args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    selector: 'kendo-chart-series-defaults-tooltip',
                    template: '',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: ConfigurationService }]; }, propDecorators: { background: [{
                type: Input
            }], border: [{
                type: Input
            }], color: [{
                type: Input
            }], font: [{
                type: Input
            }], format: [{
                type: Input
            }], padding: [{
                type: Input
            }], visible: [{
                type: Input
            }] } });

/**
 * Represents the configuration options of the Chart trendline series
 * ([see example]({% slug trendlines_chart_charts %})).
 *
 * @example
 * ```html
 * <kendo-chart [pannable]="{ lock: 'y' }" [zoomable]="{ mousewheel: { lock: 'y' } }">
 *   <kendo-chart-series>
 *     <kendo-chart-series-item
 *       name="Sales By Quarter"
 *       type="line"
 *       [data]="salesByQuarter"
 *       field="count"
 *       categoryField="date">
 *     </kendo-chart-series-item>
 *     <kendo-chart-series-item
 *       name="Sales Forecast"
 *       type="linearTrendline"
 *       for="Sales By Quarter">
 *       <kendo-chart-series-item-trendline [forecast]="{ after: 10 }">
 *       </kendo-chart-series-item-trendline>
 *     </kendo-chart-series-item>
 *   </kendo-chart-series>
 * </kendo-chart>
 * ```
 *
 * @remarks
 * Supported children components are: {@link TrendlineForecastComponent}.
 */
class SeriesTrendlineComponent extends SettingsComponent {
    configurationService;
    /**
     * Specifies the period for the trendline.
     */
    period;
    /**
     * Specifies the order for the trendline.
     */
    order;
    // These options are also available as child components
    /**
     * Specifies the forecast configuration for the trendline.
     */
    forecast;
    constructor(configurationService) {
        super('trendline', configurationService);
        this.configurationService = configurationService;
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: SeriesTrendlineComponent, deps: [{ token: ConfigurationService }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: SeriesTrendlineComponent, isStandalone: true, selector: "kendo-chart-series-item-trendline", inputs: { period: "period", order: "order", forecast: "forecast" }, usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: SeriesTrendlineComponent, decorators: [{
            type: Component,
            args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    selector: 'kendo-chart-series-item-trendline',
                    template: '',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: ConfigurationService }]; }, propDecorators: { period: [{
                type: Input
            }], order: [{
                type: Input
            }], forecast: [{
                type: Input
            }] } });

/**
 * Represents the configuration options of the Chart trendline forecast
 * ([see example]({% slug trendlines_chart_charts %})).
 */
class SeriesTrendlineForecastComponent extends SettingsComponent {
    configurationService;
    /**
     * Specifies the number of periods before the series.
     */
    before;
    /**
     * Specifies the number of periods after the series.
     */
    after;
    /**
     * Specifies the series trendline forecast settings.
     *
     * The `forecast` option is supported  when [`series.type`]({% slug api_charts_series %}#toc-type) is set to `"linearTrendline"` and the parent series are either date series, `"scatter"` or `"scatterLine"` series.
     */
    forecast;
    constructor(configurationService) {
        super('forecast', configurationService);
        this.configurationService = configurationService;
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: SeriesTrendlineForecastComponent, deps: [{ token: ConfigurationService }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: SeriesTrendlineForecastComponent, isStandalone: true, selector: "kendo-chart-series-item-trendline-forecast", inputs: { before: "before", after: "after", forecast: "forecast" }, usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: SeriesTrendlineForecastComponent, decorators: [{
            type: Component,
            args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    selector: 'kendo-chart-series-item-trendline-forecast',
                    template: '',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: ConfigurationService }]; }, propDecorators: { before: [{
                type: Input
            }], after: [{
                type: Input
            }], forecast: [{
                type: Input
            }] } });

/**
 * Represents the Kendo UI for Angular Chart Subtitle component
 * ([see example]({% slug title_chart_charts %})).
 *
 * @example
 * ```html
 * <kendo-chart [categoryAxis]="{ categories: categories }">
 *     <kendo-chart-subtitle text="/GDP annual %/"></kendo-chart-subtitle>
 * </kendo-chart>
 * ```
 */
class SubtitleComponent extends SettingsComponent {
    configurationService;
    /**
     * Specifies the horizontal alignment of the subtitle.
     */
    align;
    /**
     * Specifies the background color of the subtitle. Accepts a valid CSS color string, including HEX and RGB.
     *
     * @default 'white'
     */
    background;
    /**
     * Specifies the border configuration of the subtitle.
     */
    border;
    /**
     * Specifies the color of the subtitle text.
     */
    color;
    /**
     * Specifies the font of the subtitle.
     *
     * @default '12px sans-serif'
     */
    font;
    /**
     * Specifies the margin configuration of the subtitle.
     */
    margin;
    /**
     * Specifies the padding of the subtitle. A numeric value sets all paddings.
     *
     * @default 5
     */
    padding;
    /**
     * Specifies the position of the subtitle.
     *
     * @default 'top'
     */
    position;
    /**
     * Specifies the text content of the subtitle.
     */
    text;
    /**
     * Determines whether the Chart displays the subtitle.
     *
     * @default true
     */
    visible;
    constructor(configurationService) {
        super('subtitle', configurationService);
        this.configurationService = configurationService;
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: SubtitleComponent, deps: [{ token: ConfigurationService }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: SubtitleComponent, isStandalone: true, selector: "kendo-chart-subtitle", inputs: { align: "align", background: "background", border: "border", color: "color", font: "font", margin: "margin", padding: "padding", position: "position", text: "text", visible: "visible" }, usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: SubtitleComponent, decorators: [{
            type: Component,
            args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    selector: 'kendo-chart-subtitle',
                    template: '',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: ConfigurationService }]; }, propDecorators: { align: [{
                type: Input
            }], background: [{
                type: Input
            }], border: [{
                type: Input
            }], color: [{
                type: Input
            }], font: [{
                type: Input
            }], margin: [{
                type: Input
            }], padding: [{
                type: Input
            }], position: [{
                type: Input
            }], text: [{
                type: Input
            }], visible: [{
                type: Input
            }] } });

/**
 * Represents the Kendo UI for Angular Chart Title configuration
 * ([see example]({% slug title_chart_charts %})).
 *
 * @example
 * ```html
 * <kendo-chart [categoryAxis]="{ categories: categories }">
 *     <kendo-chart-title text="Title Text" [padding]="{bottom: 20}"></kendo-chart-title>
 *     ...
 * </kendo-chart>
 * ```
 */
class TitleComponent extends SettingsComponent {
    configurationService;
    /**
     * Specifies the alignment of the title.
     * The alignment options for text include `center` for middle alignment, `left` for left alignment, and `right` for right alignment, allowing for flexible positioning of the title.
     *
     * @default 'center'
     */
    align;
    /**
     * Specifies the background color of the title. Accepts a valid CSS color string, including HEX and RGB.
     *
     * @default 'white'
     */
    background;
    /**
     * Specifies the border configuration of the title.
     */
    border;
    /**
     * Specifies the text color of the title.
     */
    color;
    /**
     * Specifies the font of the title.
     *
     * @default '16px sans-serif'
     */
    font;
    /**
     * Specifies the margin of the title. A numeric value sets all margins.
     */
    margin;
    /**
     * Specifies the padding of the title. A numeric value sets all paddings.
     *
     * @default 5
     */
    padding;
    /**
     * Specifies the position of the title.
     * The positioning options for titles include `bottom` for positioning at the bottom and `top` for positioning at the top, providing flexibility in title placement.
     *
     * @default 'top'
     */
    position;
    /**
     * Specifies the text of the title.
     */
    text;
    /**
     * Specifies the description of the title.
     */
    description;
    /**
     * Determines whether the Chart displays the title.
     *
     * @default true
     */
    visible;
    constructor(configurationService) {
        super('title', configurationService);
        this.configurationService = configurationService;
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TitleComponent, deps: [{ token: ConfigurationService }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: TitleComponent, isStandalone: true, selector: "kendo-chart-title", inputs: { align: "align", background: "background", border: "border", color: "color", font: "font", margin: "margin", padding: "padding", position: "position", text: "text", description: "description", visible: "visible" }, usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TitleComponent, decorators: [{
            type: Component,
            args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    selector: 'kendo-chart-title',
                    template: '',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: ConfigurationService }]; }, propDecorators: { align: [{
                type: Input
            }], background: [{
                type: Input
            }], border: [{
                type: Input
            }], color: [{
                type: Input
            }], font: [{
                type: Input
            }], margin: [{
                type: Input
            }], padding: [{
                type: Input
            }], position: [{
                type: Input
            }], text: [{
                type: Input
            }], description: [{
                type: Input
            }], visible: [{
                type: Input
            }] } });

/**
 * Represents the Kendo UI for Angular Chart Tooltip configuration
 * ([see example]({% slug tooltips_chart_charts %})).
 */
class TooltipComponent extends SettingsComponent {
    configurationService;
    templateService;
    /**
     * Specifies the background color of the tooltip.
     */
    background;
    /**
     * Specifies the border configuration of the tooltip.
     */
    border;
    /**
     * Specifies the text color of the tooltip.
     */
    color;
    /**
     * Specifies the font of the tooltip.
     * @default '12px sans-serif'
     */
    font;
    /**
     * Specifies the format of the tooltip.
     */
    format;
    /**
     * Specifies the opacity of the tooltip.
     * @default 1
     */
    opacity;
    /**
     * Specifies the padding of the tooltip. A numeric value sets all paddings.
     */
    padding;
    /**
     * Determines whether the Chart displays a single tooltip for every category.
     * @default false
     */
    shared;
    /**
     * Determines whether the Chart displays the series tooltip.
     * @default false
     */
    visible;
    seriesTooltipTemplate;
    sharedTooltipTemplate;
    constructor(configurationService, templateService) {
        super('tooltip', configurationService);
        this.configurationService = configurationService;
        this.templateService = templateService;
        this.markAsVisible();
    }
    ngAfterContentChecked() {
        this.templateService.setTemplate(this.seriesTooltipTemplate ? this.seriesTooltipTemplate.templateRef : null);
        this.templateService.setSharedTemplate(this.sharedTooltipTemplate ? this.sharedTooltipTemplate.templateRef : null);
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TooltipComponent, deps: [{ token: ConfigurationService }, { token: TooltipTemplateService }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: TooltipComponent, isStandalone: true, selector: "kendo-chart-tooltip", inputs: { background: "background", border: "border", color: "color", font: "font", format: "format", opacity: "opacity", padding: "padding", shared: "shared", visible: "visible" }, queries: [{ propertyName: "seriesTooltipTemplate", first: true, predicate: SeriesTooltipTemplateDirective, descendants: true }, { propertyName: "sharedTooltipTemplate", first: true, predicate: SharedTooltipTemplateDirective, descendants: true }], usesInheritance: true, ngImport: i0, template: '', isInline: true });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TooltipComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'kendo-chart-tooltip',
                    template: '',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: ConfigurationService }, { type: TooltipTemplateService }]; }, propDecorators: { background: [{
                type: Input
            }], border: [{
                type: Input
            }], color: [{
                type: Input
            }], font: [{
                type: Input
            }], format: [{
                type: Input
            }], opacity: [{
                type: Input
            }], padding: [{
                type: Input
            }], shared: [{
                type: Input
            }], visible: [{
                type: Input
            }], seriesTooltipTemplate: [{
                type: ContentChild,
                args: [SeriesTooltipTemplateDirective, { static: false }]
            }], sharedTooltipTemplate: [{
                type: ContentChild,
                args: [SharedTooltipTemplateDirective, { static: false }]
            }] } });

/**
 * Represents the Kendo UI for Angular Chart Value Axis Item component.
 *
 * @example
 * ```html
 * <kendo-chart>
 *  <kendo-chart-value-axis>
 *   <kendo-chart-value-axis-item>
 *     <kendo-chart-value-axis-item-title text="Value Axis Title"></kendo-chart-value-axis-item-title>
 *   </kendo-chart-value-axis-item>
 *  </kendo-chart-value-axis>
 * </kendo-chart>
 * ```
 *
 * @remarks
 * Supported children components are: {@link ValueAxisCrosshairComponent}, {@link ValueAxisLabelsComponent}, {@link ValueAxisNotesComponent}, and {@link ValueAxisTitleComponent}.
 */
class ValueAxisItemComponent extends CollectionItemComponent {
    configurationService;
    collectionService;
    /**
     * Specifies the value or array of values at which the axis crosses with another axis.
     */
    axisCrossingValue;
    /**
     * Specifies the background color of the axis.
     */
    background;
    /**
     * Specifies the color of the axis.
     */
    color;
    /**
     * Specifies the configuration of the axis line.
     */
    line;
    /**
     * Specifies the configuration of the major grid lines.
     */
    majorGridLines;
    /**
     * Specifies the configuration of the major ticks.
     */
    majorTicks;
    /**
     * Specifies the interval between major divisions.
     */
    majorUnit;
    /**
     * Specifies the maximum value of the axis.
     * @default 1
     */
    max;
    /**
     * Specifies the minimum value of the axis.
     * @default 0
     */
    min;
    /**
     * Specifies the configuration of the minor grid lines.
     */
    minorGridLines;
    /**
     * Specifies the configuration of the minor ticks.
     */
    minorTicks;
    /**
     * Specifies the interval between minor divisions.
     */
    minorUnit;
    /**
     * Specifies the unique axis name. Use this name to associate a series with a value axis by using the [`series.axis`]({% slug api_charts_series %}#toc-axis) option.
     * @default 'primary'
     */
    name;
    /**
     * Determines whether the Chart prevents the automatic axis range from snapping to zero.
     * Set to `false` to force the automatic axis range to snap to zero.
     * @default true
     */
    narrowRange;
    /**
     * Specifies the name of the pane that the axis renders in.
     */
    pane;
    /**
     * Specifies the plot bands configuration.
     */
    plotBands;
    /**
     * Determines whether the value axis direction is reversed.
     * By default, the categories are listed from left to right and from bottom to top.
     *
     * Radar and Polar Charts do not support reverse value axes.
     * @default false
     */
    reverse;
    /**
     * Specifies the axis type.
     *
     * The `numeric` value refers to a numeric axis, while `log` represents a logarithmic axis.
     * @default 'numeric'
     *
     */
    type;
    /**
     * Determines whether the Chart displays the value axis. By default, the value axis is visible.
     * @default true
     */
    visible;
    // These options are also available as child components
    /**
     * Specifies the configuration of the crosshair.
     */
    crosshair;
    /**
     * Specifies the configuration of the labels.
     */
    labels;
    /**
     * Specifies the configuration of the notes.
     */
    notes;
    /**
     * Specifies the configuration of the title.
     */
    title;
    constructor(configurationService, collectionService) {
        super(configurationService, collectionService);
        this.configurationService = configurationService;
        this.collectionService = collectionService;
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: ValueAxisItemComponent, deps: [{ token: ConfigurationService }, { token: CollectionService }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: ValueAxisItemComponent, isStandalone: true, selector: "kendo-chart-value-axis-item", inputs: { axisCrossingValue: "axisCrossingValue", background: "background", color: "color", line: "line", majorGridLines: "majorGridLines", majorTicks: "majorTicks", majorUnit: "majorUnit", max: "max", min: "min", minorGridLines: "minorGridLines", minorTicks: "minorTicks", minorUnit: "minorUnit", name: "name", narrowRange: "narrowRange", pane: "pane", plotBands: "plotBands", reverse: "reverse", type: "type", visible: "visible", crosshair: "crosshair", labels: "labels", notes: "notes", title: "title" }, providers: [ConfigurationService], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: ValueAxisItemComponent, decorators: [{
            type: Component,
            args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [ConfigurationService],
                    selector: 'kendo-chart-value-axis-item',
                    template: '',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: ConfigurationService }, { type: CollectionService }]; }, propDecorators: { axisCrossingValue: [{
                type: Input
            }], background: [{
                type: Input
            }], color: [{
                type: Input
            }], line: [{
                type: Input
            }], majorGridLines: [{
                type: Input
            }], majorTicks: [{
                type: Input
            }], majorUnit: [{
                type: Input
            }], max: [{
                type: Input
            }], min: [{
                type: Input
            }], minorGridLines: [{
                type: Input
            }], minorTicks: [{
                type: Input
            }], minorUnit: [{
                type: Input
            }], name: [{
                type: Input
            }], narrowRange: [{
                type: Input
            }], pane: [{
                type: Input
            }], plotBands: [{
                type: Input
            }], reverse: [{
                type: Input
            }], type: [{
                type: Input
            }], visible: [{
                type: Input
            }], crosshair: [{
                type: Input
            }], labels: [{
                type: Input
            }], notes: [{
                type: Input
            }], title: [{
                type: Input
            }] } });

/**
 * Represents a collection of one or more value axis configuration components.
 *
 * @example
 * ```html
 * <kendo-chart>
 *     <kendo-chart-value-axis>
 *     </kendo-chart-value-axis>
 * </kendo-chart>
 * ```
 *
 * @remarks
 * Supported children components are: {@link ValueAxisItemComponent}.
 */
class ValueAxisComponent extends CollectionComponent {
    configurationService;
    collectionService;
    children;
    constructor(configurationService, collectionService) {
        super('valueAxis', configurationService, collectionService);
        this.configurationService = configurationService;
        this.collectionService = collectionService;
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: ValueAxisComponent, deps: [{ token: ConfigurationService }, { token: CollectionService }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: ValueAxisComponent, isStandalone: true, selector: "kendo-chart-value-axis", providers: [CollectionService], queries: [{ propertyName: "children", predicate: ValueAxisItemComponent }], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: ValueAxisComponent, decorators: [{
            type: Component,
            args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [CollectionService],
                    selector: 'kendo-chart-value-axis',
                    template: '',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: ConfigurationService }, { type: CollectionService }]; }, propDecorators: { children: [{
                type: ContentChildren,
                args: [ValueAxisItemComponent]
            }] } });

/**
 * Represents the crosshair configuration options of the Chart value axis ([see example]({% slug crosshairs_chart_charts %})).
 *
 * @example
 * ```html
 * <kendo-chart>
 *  <kendo-chart-value-axis>
 *   <kendo-chart-value-axis-item>
 *    <kendo-chart-value-axis-item-crosshair [visible]="true" color="#ff0000" [width]="2">
 *     <kendo-chart-value-axis-item-crosshair-tooltip format="c"></kendo-chart-value-axis-item-crosshair-tooltip>
 *    </kendo-chart-value-axis-item-crosshair>
 *   </kendo-chart-value-axis-item>
 *  </kendo-chart-value-axis>
 * </kendo-chart>
 * ```
 *
 * @remarks
 * Supported children components are: {@link ValueAxisCrosshairTooltipComponent}.
 */
class ValueAxisCrosshairComponent extends SettingsComponent {
    configurationService;
    /**
     * Specifies the color of the crosshair.
     */
    color;
    /**
     * Specifies the opacity of the crosshair.
     *
     * @default 1
     */
    opacity;
    /**
     * Determines whether the Chart displays the value axis crosshair.
     *
     * @default false
     */
    visible;
    /**
     * Specifies the width of the crosshair in pixels.
     *
     * @default 1
     */
    width;
    // These options are also available as child components
    /**
     * Specifies the tooltip configuration of the crosshair.
     */
    tooltip;
    constructor(configurationService) {
        super('crosshair', configurationService);
        this.configurationService = configurationService;
        this.markAsVisible();
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: ValueAxisCrosshairComponent, deps: [{ token: ConfigurationService }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: ValueAxisCrosshairComponent, isStandalone: true, selector: "kendo-chart-value-axis-item-crosshair", inputs: { color: "color", opacity: "opacity", visible: "visible", width: "width", tooltip: "tooltip" }, usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: ValueAxisCrosshairComponent, decorators: [{
            type: Component,
            args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    selector: 'kendo-chart-value-axis-item-crosshair',
                    template: '',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: ConfigurationService }]; }, propDecorators: { color: [{
                type: Input
            }], opacity: [{
                type: Input
            }], visible: [{
                type: Input
            }], width: [{
                type: Input
            }], tooltip: [{
                type: Input
            }] } });

/**
 * Represents the configuration options of the crosshair tooltip in the Chart value axis ([see example]({% slug crosshairs_chart_charts %})).
 * The crosshair tooltip is displayed when the `visible` option is set to `true`.
 */
class ValueAxisCrosshairTooltipComponent extends SettingsComponent {
    configurationService;
    /**
     * Specifies the background color of the tooltip.
     */
    background;
    /**
     * Specifies the border configuration of the tooltip.
     */
    border;
    /**
     * Specifies the text color of the tooltip.
     */
    color;
    /**
     * Specifies the font of the tooltip.
     *
     * @default '12px sans-serif'
     */
    font;
    /**
   * Specifies the format for displaying the tooltip. Uses the [`format`]({% slug api_intl_intlservice %}#toc-format) method of `IntlService`.
   * Contains one placeholder (`"{0}"`) which represents the value.
   *
   * @default '{0}'
   */
    format;
    /**
     * Specifies the padding of the tooltip. A numeric value sets all paddings.
     */
    padding;
    /**
     * Determines whether the chart displays the value axis crosshair tooltip.
     *
     * @default false
     */
    visible;
    constructor(configurationService) {
        super('crosshair.tooltip', configurationService);
        this.configurationService = configurationService;
        this.markAsVisible();
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: ValueAxisCrosshairTooltipComponent, deps: [{ token: ConfigurationService }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: ValueAxisCrosshairTooltipComponent, isStandalone: true, selector: "kendo-chart-value-axis-item-crosshair-tooltip", inputs: { background: "background", border: "border", color: "color", font: "font", format: "format", padding: "padding", visible: "visible" }, usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: ValueAxisCrosshairTooltipComponent, decorators: [{
            type: Component,
            args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    selector: 'kendo-chart-value-axis-item-crosshair-tooltip',
                    template: '',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: ConfigurationService }]; }, propDecorators: { background: [{
                type: Input
            }], border: [{
                type: Input
            }], color: [{
                type: Input
            }], font: [{
                type: Input
            }], format: [{
                type: Input
            }], padding: [{
                type: Input
            }], visible: [{
                type: Input
            }] } });

/**
 * Represents the value axis labels configuration.
 */
class ValueAxisLabelsComponent extends SettingsComponent {
    configurationService;
    /**
     * Specifies the background color of the labels.
     */
    background;
    /**
     * Specifies the border configuration of the labels.
     */
    border;
    /**
     * Specifies the text color of the labels.
     */
    color;
    /**
     * Specifies a function that creates the content of the label.
     */
    content;
    /**
     * The font style of the labels.
     * @default '12px sans-serif'
     */
    font;
    /**
     * The format for displaying the labels. Uses the [`format`]({% slug api_intl_intlservice %}#toc-format) method of IntlService.
     * Contains one placeholder (`"{0}"`) which represents the category value.
     * @default '{0}'
     */
    format;
    /**
     * The margin of the labels. A numeric value sets all margins.
     * @default 0
     */
    margin;
    mirror;
    /**
     * The padding of the labels. A numeric value sets all paddings.
     * @default 0
     */
    padding;
    /**
     * The position of the axis labels. By default, labels are positioned next to the axis.
     * When `position` is set to `end`, the labels are placed at the end of the crossing axis, usually at the top or right end of the Chart unless the crossing axis has been reversed.
     * Alternatively, when the `position` property is set to `start`, the axis labels will be positioned at the beginning of the crossing axis, typically located at the left or bottom end of the Chart, unless the crossing axis has been reversed.
     * @default 'onAxis'
     */
    position;
    /**
     * The rotation angle (in degrees) of the labels. By default, the labels are not rotated. Angles
     * increase clockwise and zero is to the left. Negative values are acceptable. Can be set to `"auto"` if
     * the axis is horizontal. In this case, the labels will be rotated only if the slot size is not
     * sufficient for the entire labels.
     * @default 0
     */
    rotation;
    /**
     * The number of labels to skip. By default, no labels are skipped.
     * @default 0
     */
    skip;
    /**
     * The label rendering step.
     * Every n<sup>th</sup> label is rendered where `n` is the step.
     * @default 1
     */
    step;
    /**
     * If set to `true`, the Chart displays the value axis labels.
     * @default true
     */
    visible;
    visual;
    constructor(configurationService) {
        super('labels', configurationService);
        this.configurationService = configurationService;
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: ValueAxisLabelsComponent, deps: [{ token: ConfigurationService }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: ValueAxisLabelsComponent, isStandalone: true, selector: "kendo-chart-value-axis-item-labels", inputs: { background: "background", border: "border", color: "color", content: "content", font: "font", format: "format", margin: "margin", mirror: "mirror", padding: "padding", position: "position", rotation: "rotation", skip: "skip", step: "step", visible: "visible", visual: "visual" }, usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: ValueAxisLabelsComponent, decorators: [{
            type: Component,
            args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    selector: 'kendo-chart-value-axis-item-labels',
                    template: '',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: ConfigurationService }]; }, propDecorators: { background: [{
                type: Input
            }], border: [{
                type: Input
            }], color: [{
                type: Input
            }], content: [{
                type: Input
            }], font: [{
                type: Input
            }], format: [{
                type: Input
            }], margin: [{
                type: Input
            }], mirror: [{
                type: Input
            }], padding: [{
                type: Input
            }], position: [{
                type: Input
            }], rotation: [{
                type: Input
            }], skip: [{
                type: Input
            }], step: [{
                type: Input
            }], visible: [{
                type: Input
            }], visual: [{
                type: Input
            }] } });

/**
 * Represents the configuration of the value axis notes ([see example]({% slug notes_chart_charts %}#toc-axis-notes)).
 *
 * @example
 * ```html
 * <kendo-chart>
 *  <kendo-chart-value-axis>
 *   <kendo-chart-value-axis-item>
 *    <kendo-chart-value-axis-item-notes>
 *    </kendo-chart-value-axis-item-notes>
 *  </kendo-chart-value-axis-item>
 *  </kendo-chart-value-axis>
 * </kendo-chart>
 * ```
 *
 * @remarks
 * Supported children components are: {@link ValueAxisNotesIconComponent} and {@link ValueAxisNotesLabelComponent}.
 */
class ValueAxisNotesComponent extends SettingsComponent {
    configurationService;
    /**
     * Specifies the data for the notes.
     */
    data;
    /**
     * Specifies the line configuration of the notes.
     */
    line;
    /**
     * Specifies the position of the notes.
     */
    position;
    /**
     * Specifies a function that returns a custom visual for the notes.
     */
    visual;
    // These options are also available as child components
    /**
     * Specifies the icon configuration of the notes.
     */
    icon;
    /**
     * Specifies the label configuration of the notes.
     */
    label;
    constructor(configurationService) {
        super('notes', configurationService);
        this.configurationService = configurationService;
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: ValueAxisNotesComponent, deps: [{ token: ConfigurationService }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: ValueAxisNotesComponent, isStandalone: true, selector: "kendo-chart-value-axis-item-notes", inputs: { data: "data", line: "line", position: "position", visual: "visual", icon: "icon", label: "label" }, usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: ValueAxisNotesComponent, decorators: [{
            type: Component,
            args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    selector: 'kendo-chart-value-axis-item-notes',
                    template: '',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: ConfigurationService }]; }, propDecorators: { data: [{
                type: Input
            }], line: [{
                type: Input
            }], position: [{
                type: Input
            }], visual: [{
                type: Input
            }], icon: [{
                type: Input
            }], label: [{
                type: Input
            }] } });

/**
 * Represents the configuration of the notes icon in the Chart value axis.
 */
class ValueAxisNotesIconComponent extends SettingsComponent {
    configurationService;
    /**
     * Specifies the background color of the icon.
     */
    background;
    /**
     * Specifies the border configuration of the icon.
     */
    border;
    /**
     * Specifies the size of the icon.
     */
    size;
    /**
     * Specifies the shape of the notes icon.
     * @default 'circle'
     */
    type;
    /**
     * Determines whether the notes icon is visible.
     * @default true
     */
    visible;
    constructor(configurationService) {
        super('notes.icon', configurationService);
        this.configurationService = configurationService;
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: ValueAxisNotesIconComponent, deps: [{ token: ConfigurationService }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: ValueAxisNotesIconComponent, isStandalone: true, selector: "kendo-chart-value-axis-item-notes-icon", inputs: { background: "background", border: "border", size: "size", type: "type", visible: "visible" }, usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: ValueAxisNotesIconComponent, decorators: [{
            type: Component,
            args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    selector: 'kendo-chart-value-axis-item-notes-icon',
                    template: '',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: ConfigurationService }]; }, propDecorators: { background: [{
                type: Input
            }], border: [{
                type: Input
            }], size: [{
                type: Input
            }], type: [{
                type: Input
            }], visible: [{
                type: Input
            }] } });

/**
 * Represents the configuration of the notes label in the Chart value axis.
 */
class ValueAxisNotesLabelComponent extends SettingsComponent {
    configurationService;
    /**
     * Specifies the background color of the label.
     */
    background;
    /**
     * Specifies the border configuration of the label.
     */
    border;
    /**
     * Specifies the text color of the label.
     */
    color;
    /**
     * Specifies a function that returns the content of the notes label.
     */
    content;
    /**
     * Specifies the font style of the label.
     * @default '12px sans-serif'
     */
    font;
    /**
     * Specifies the format used to display the notes label. Uses the IntlService [`format`]({% slug api_intl_intlservice %}#toc-format) method.
     * Contains one placeholder (`"{0}"`) which represents the axis value.
     * @default '{0}'
     */
    format;
    /**
     * Specifies the position of the labels.
     * @default 'inside'
     */
    position;
    /**
     * Specifies the rotation angle of the label. By default, the label is not rotated.
     * @default 0
     */
    rotation;
    /**
     * Determines whether the Chart displays the value axis notes label.
     * @default true
     */
    visible;
    constructor(configurationService) {
        super('notes.label', configurationService);
        this.configurationService = configurationService;
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: ValueAxisNotesLabelComponent, deps: [{ token: ConfigurationService }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: ValueAxisNotesLabelComponent, isStandalone: true, selector: "kendo-chart-value-axis-item-notes-label", inputs: { background: "background", border: "border", color: "color", content: "content", font: "font", format: "format", position: "position", rotation: "rotation", visible: "visible" }, usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: ValueAxisNotesLabelComponent, decorators: [{
            type: Component,
            args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    selector: 'kendo-chart-value-axis-item-notes-label',
                    template: '',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: ConfigurationService }]; }, propDecorators: { background: [{
                type: Input
            }], border: [{
                type: Input
            }], color: [{
                type: Input
            }], content: [{
                type: Input
            }], font: [{
                type: Input
            }], format: [{
                type: Input
            }], position: [{
                type: Input
            }], rotation: [{
                type: Input
            }], visible: [{
                type: Input
            }] } });

/**
 * Represents the title configuration of the Chart value axis.
 */
class ValueAxisTitleComponent extends SettingsComponent {
    configurationService;
    /**
     * Specifies the background color of the title.
     */
    background;
    /**
     * Specifies the border configuration of the title.
     */
    border;
    /**
     * Specifies the text color of the title.
     */
    color;
    /**
     * Specifies the font style of the title.
     * @default '16px sans-serif'
     */
    font;
    /**
     * Specifies the margin of the title. A numeric value sets all margins.
     * @default 5
     */
    margin;
    /**
     * Specifies the padding of the title. A numeric value sets all paddings.
     * @default 0
     */
    padding;
    /**
     * Specifies the position of the title.
     * @default 'center'
     */
    position;
    /**
     * Specifies the rotation angle of the title. By default, the title is not rotated.
     * @default 0
     */
    rotation;
    /**
     * Specifies the text of the title.
     */
    text;
    /**
     * Determines whether the Chart displays the value axis title.
     * @default true
     */
    visible;
    /**
     * Specifies a function that returns a custom visual for the title.
     */
    visual;
    constructor(configurationService) {
        super('title', configurationService);
        this.configurationService = configurationService;
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: ValueAxisTitleComponent, deps: [{ token: ConfigurationService }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: ValueAxisTitleComponent, isStandalone: true, selector: "kendo-chart-value-axis-item-title", inputs: { background: "background", border: "border", color: "color", font: "font", margin: "margin", padding: "padding", position: "position", rotation: "rotation", text: "text", visible: "visible", visual: "visual" }, usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: ValueAxisTitleComponent, decorators: [{
            type: Component,
            args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    selector: 'kendo-chart-value-axis-item-title',
                    template: '',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: ConfigurationService }]; }, propDecorators: { background: [{
                type: Input
            }], border: [{
                type: Input
            }], color: [{
                type: Input
            }], font: [{
                type: Input
            }], margin: [{
                type: Input
            }], padding: [{
                type: Input
            }], position: [{
                type: Input
            }], rotation: [{
                type: Input
            }], text: [{
                type: Input
            }], visible: [{
                type: Input
            }], visual: [{
                type: Input
            }] } });

/**
 * Represents the Kendo UI Chart Breadcrumb component for Angular.
 *
 * Use this component to implement navigation for [Drilldown Charts](slug:drilldown_chart_charts).
 * Use the `chart` input to link the Breadcrumb to the Chart instance.
 */
class ChartBreadcrumbComponent {
    /**
     * Defines the Chart instance to link to.
     */
    chart;
    /**
     * Defines the breadcrumb root item.
     *
     * @default "{ icon: 'home', svgIcon: homeIcon, title: 'Home' }"
     */
    rootItem = { icon: 'home', svgIcon: homeIcon, title: 'Home' };
    /**
     * @hidden
     */
    items;
    breadcrumb;
    subscription = new Subscription();
    ngOnInit() {
        this.items = [this.rootItem];
        if (this.chart) {
            this.subscription.add(this.chart.drilldown.subscribe(this.onDrilldown.bind(this)));
            this.subscription.add(this.chart.drilldownLevelChange.subscribe(this.onDrilldownLevelChange.bind(this)));
        }
        else if (isDevMode()) {
            throw new Error('Chart Breadcrumb: No Chart instance supplied. Please add a reference using the "chart" attribute. For example: \n' +
                '<kendo-chart-breadcrumb [chart]="instance" />\n' +
                '<kendo-chart #instance>');
        }
    }
    ngOnChanges(changes) {
        const rootItemChange = changes['rootItem'];
        if (rootItemChange && this.items) {
            this.items[0] = rootItemChange.currentValue;
        }
    }
    ngOnDestroy() {
        if (this.subscription) {
            this.subscription.unsubscribe();
            this.subscription = null;
        }
    }
    /**
     * @hidden
     */
    onItemClick(target) {
        this.chart.drilldownLevel = this.items.findIndex(item => item === target);
    }
    onDrilldown(e) {
        this.items = [...this.items, { text: e.point.category.toString() }];
    }
    onDrilldownLevelChange(level) {
        this.items = this.items.slice(0, level + 1);
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: ChartBreadcrumbComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: ChartBreadcrumbComponent, isStandalone: true, selector: "kendo-chart-breadcrumb", inputs: { chart: "chart", rootItem: "rootItem" }, viewQueries: [{ propertyName: "breadcrumb", first: true, predicate: ["breadcrumb"], descendants: true, static: true }], exportAs: ["kendoChartBreadcrumb"], usesOnChanges: true, ngImport: i0, template: `
        <kendo-breadcrumb [items]="items" (itemClick)="onItemClick($event)">
        </kendo-breadcrumb>
    `, isInline: true, dependencies: [{ kind: "component", type: BreadCrumbComponent, selector: "kendo-breadcrumb", inputs: ["items", "separatorIcon", "separatorSVGIcon", "collapseMode", "size"], outputs: ["itemClick"], exportAs: ["kendoBreadCrumb"] }] });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: ChartBreadcrumbComponent, decorators: [{
            type: Component,
            args: [{
                    exportAs: 'kendoChartBreadcrumb',
                    selector: 'kendo-chart-breadcrumb',
                    template: `
        <kendo-breadcrumb [items]="items" (itemClick)="onItemClick($event)">
        </kendo-breadcrumb>
    `,
                    standalone: true,
                    imports: [BreadCrumbComponent]
                }]
        }], propDecorators: { chart: [{
                type: Input
            }], rootItem: [{
                type: Input
            }], breadcrumb: [{
                type: ViewChild,
                args: ['breadcrumb', { static: true }]
            }] } });

/**
 * @hidden
 */
class SankeyThemeService extends ThemeService {
    readTheme() {
        const theme = sankeyTheme(this.element);
        this.push(theme);
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: SankeyThemeService, deps: null, target: i0.ɵɵFactoryTarget.Injectable });
    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: SankeyThemeService, providedIn: 'root' });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: SankeyThemeService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }] });

/**
 * @hidden
 */
class SankeyBaseEvent extends PreventableEvent$1 {
    /**
     * Stores the `SankeyComponent` that triggered the event.
     */
    sender;
    /**
     * Contains the original DOM event.
     */
    originalEvent;
    /**
     * @hidden
     */
    constructor(e, sender) {
        super();
        this.sender = sender;
        this.originalEvent = e.originalEvent;
    }
}

/**
 * Represents the arguments for the node-related events of the [`SankeyComponent`]({% slug api_charts_sankeycomponent %}).
 */
class SankeyNodeEvent extends SankeyBaseEvent {
    /**
     * Contains the `dataItem` of the related element.
     */
    dataItem;
    /**
     * @hidden
     */
    constructor(e, sender) {
        super(e, sender);
        this.dataItem = e.dataItem;
    }
}

/**
 * Represents the arguments for the link-related events of the [`SankeyComponent`]({% slug api_charts_sankeycomponent %}).
 */
class SankeyLinkEvent extends SankeyBaseEvent {
    /**
     * Contains the `dataItem` of the related element.
     */
    dataItem;
    /**
     * @hidden
     */
    constructor(e, sender) {
        super(e, sender);
        this.dataItem = e.dataItem;
    }
}

const EVENT_MAP = {
    nodeEnter: SankeyNodeEvent,
    nodeLeave: SankeyNodeEvent,
    linkEnter: SankeyLinkEvent,
    linkLeave: SankeyLinkEvent,
    nodeClick: SankeyNodeEvent,
    linkClick: SankeyLinkEvent
};
/**
 * @hidden
 */
class InstanceEventService {
    create(name, args, sender) {
        return new EVENT_MAP[name](args, sender);
    }
}

/**
 * Represents the context that is passed to the Sankey diagram Link tooltip template.
 */
class SankeyLinkTooltipTemplateContext {
    /**
     * Contains the link source data item.
     */
    source;
    /**
     * Contains the link target data item.
     */
    target;
    /**
     * Contains the link value.
     */
    value;
    /**
     * @hidden
     */
    constructor(e) {
        const dataItem = e.dataItem;
        this.source = dataItem.source;
        this.target = dataItem.target;
        this.value = dataItem.value;
    }
}

/**
 * Selects a [template](link:site.data.urls.angular['templatesyntax'])
 * within the `<kendo-sankey-tooltip>` component for the
 * [links tooltip](slug:tooltip_sankey#toc-specifying-a-link-tooltip-template).
 * The following context fields are frequently utilized:
 * - `let-source="source"`&mdash;The link source data item..
 * - `let-target="target"`&mdash;The link target data item.
 * - `let-value="value"`&mdash;The link value.
 * Refer to the [`SankeyLinkTooltipTemplateContext`](slug:api_charts_sankeylinktooltiptemplatecontext) for the full list of available fields.
 *
 * @example
 * ```html
 * <kendo-sankey [data]="data">
 *    <kendo-sankey-tooltip [followPointer]="true">
 *        <ng-template kendoSankeyLinkTooltipTemplate let-source="source" let-target="target" let-value="value">
 *            {{ source.label?.text }} - {{ target.label?.text }}: {{ value }}
 *        </ng-template>
 *    </kendo-sankey-tooltip>
 * </kendo-sankey>
 * ```
 */
class SankeyLinkTooltipTemplateDirective {
    templateRef;
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: SankeyLinkTooltipTemplateDirective, deps: [{ token: i0.TemplateRef, optional: true }], target: i0.ɵɵFactoryTarget.Directive });
    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.2.12", type: SankeyLinkTooltipTemplateDirective, isStandalone: true, selector: "[kendoSankeyLinkTooltipTemplate]", ngImport: i0 });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: SankeyLinkTooltipTemplateDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[kendoSankeyLinkTooltipTemplate]',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: i0.TemplateRef, decorators: [{
                    type: Optional
                }] }]; } });

/**
 * Represents the context that is passed to the Sankey diagram Node tooltip template.
 */
class SankeyNodeTooltipTemplateContext {
    /**
     * Contains the node color.
     */
    color;
    /**
     * Contains the node label data.
     */
    label;
    /**
     * Contains the node value.
     */
    value;
    /**
     * @hidden
     */
    constructor(e) {
        const dataItem = e.dataItem;
        this.label = dataItem.label;
        this.color = dataItem.color;
        this.value = e.nodeValue;
    }
}

/**
 * Selects a [template](link:site.data.urls.angular['templatesyntax'])
 * within the `<kendo-sankey-tooltip>` component for the
 * [series tooltip](slug:tooltip_sankey#toc-specifying-a-node-tooltip-template).
 * The following context fields are frequently utilized:
 * - `let-color="color"`&mdash;The node color.
 * - `let-label="label"`&mdash;The node label data.
 * - `let-value="value"`&mdash;The node value.
 * Refer to the [`SankeyNodeTooltipTemplateContext`](slug:api_charts_sankeynodetooltiptemplatecontext) for the full list of available fields.
 *
 * @example
 * ```ts
 * import { Component } from '@angular/core';
 * import { SankeyData } from '@progress/kendo-angular-charts';
 *
 * _@Component({
 *   selector: 'my-app',
 *   template: `
 *       <kendo-sankey [data]="data">
 *           <ng-template kendoSankeyNodeTooltipTemplate let-color="color" let-label="label" let-value="value">
 *               {{ label.text }}: {{ value }}
 *           </ng-template>
 *       </kendo-sankey>
 *   `,
 * })
 * export class AppComponent {
 *     public data: SankeyData = {
 *         nodes: [
 *           { id: 1, label: { text: 'Linux' } },
 *           { id: 0, label: { text: 'iOS'} },
 *           { id: 2, label: { text: 'Mobile' } },
 *           { id: 3, label: { text: 'Desktop' } },
 *         ],
 *         links: [
 *           { sourceId: 0, targetId: 2, value: 1 },
 *           { sourceId: 1, targetId: 2, value: 2 },
 *           { sourceId: 1, targetId: 3, value: 3 },
 *         ],
 *     };
 * }
 *
 * ```
 */
class SankeyNodeTooltipTemplateDirective {
    templateRef;
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: SankeyNodeTooltipTemplateDirective, deps: [{ token: i0.TemplateRef, optional: true }], target: i0.ɵɵFactoryTarget.Directive });
    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.2.12", type: SankeyNodeTooltipTemplateDirective, isStandalone: true, selector: "[kendoSankeyNodeTooltipTemplate]", ngImport: i0 });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: SankeyNodeTooltipTemplateDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[kendoSankeyNodeTooltipTemplate]',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: i0.TemplateRef, decorators: [{
                    type: Optional
                }] }]; } });

/**
 * @hidden
 */
class SankeyTooltipTemplateService {
    nodeTemplate;
    linkTemplate;
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: SankeyTooltipTemplateService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: SankeyTooltipTemplateService });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: SankeyTooltipTemplateService, decorators: [{
            type: Injectable
        }] });

/**
 * @hidden
 */
class SquareSymbol {
    color;
    size = 15;
    display = 'inline-flex';
    marginLeft = 3;
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: SquareSymbol, deps: [], target: i0.ɵɵFactoryTarget.Directive });
    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.2.12", type: SquareSymbol, isStandalone: true, selector: "[squareSymbol]", inputs: { color: "color", size: "size" }, host: { properties: { "style.backgroundColor": "this.color", "style.width.px": "this.size", "style.height.px": "this.size", "style.display": "this.display", "style.marginLeft.px": "this.marginLeft" } }, ngImport: i0 });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: SquareSymbol, decorators: [{
            type: Directive,
            args: [{
                    selector: '[squareSymbol]',
                    standalone: true
                }]
        }], propDecorators: { color: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['style.backgroundColor']
            }], size: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['style.width.px']
            }, {
                type: HostBinding,
                args: ['style.height.px']
            }], display: [{
                type: HostBinding,
                args: ['style.display']
            }], marginLeft: [{
                type: HostBinding,
                args: ['style.marginLeft.px']
            }] } });

const DEFAULT_OFFSET = 12;
/**
 * @hidden
 */
class SankeyTooltipPopupComponent extends BaseTooltip {
    element;
    popupService;
    templateService;
    localizationService;
    intlService;
    ngZone;
    renderer;
    nodeTooltipTemplateRef;
    linkTooltipTemplateRef;
    nodeTooltipContext;
    linkTooltipContext;
    defaultNodeTooltipTemplate;
    defaultLinkTooltipTemplate;
    templateRef;
    animate = false;
    wrapperClass = 'k-chart-tooltip-wrapper';
    tooltipUnitFormat;
    offset;
    isNode;
    isLink;
    arrowIcon = arrowRightIcon;
    // TODO: Move to themes
    textStyle = { margin: '0 3px' };
    tooltipStyle = { display: 'flex', alignItems: 'center' };
    subscriptions;
    rtl = false;
    constructor(element, popupService, templateService, localizationService, intlService, ngZone, renderer) {
        super(popupService, localizationService);
        this.element = element;
        this.popupService = popupService;
        this.templateService = templateService;
        this.localizationService = localizationService;
        this.intlService = intlService;
        this.ngZone = ngZone;
        this.renderer = renderer;
    }
    onInit() {
        this.popupRef.popupElement.className += ` ${this.wrapperClass}`;
    }
    ngAfterViewInit() {
        this.setDirection();
        this.subscriptions = this.localizationService.changes.subscribe(this.rtlChange.bind(this));
    }
    ngOnDestroy() {
        super.ngOnDestroy();
        if (this.subscriptions) {
            this.subscriptions.unsubscribe();
        }
    }
    show(e) {
        this.isNode = e.targetType === 'node';
        this.isLink = e.targetType === 'link';
        this.nodeTooltipTemplateRef = this.templateService.nodeTemplate || this.defaultNodeTooltipTemplate.templateRef;
        this.nodeTooltipContext = new SankeyNodeTooltipTemplateContext(e);
        this.linkTooltipTemplateRef = this.templateService.linkTemplate || this.defaultLinkTooltipTemplate.templateRef;
        this.linkTooltipContext = new SankeyLinkTooltipTemplateContext(e);
        super.show({
            style: {
                position: 'static' // Override k-tooltip positioning
            },
            anchor: {
                align: e.tooltipData.popupAlign,
                point: this.tooltipAnchor(e),
            },
        });
    }
    tooltipAnchor(e) {
        const element = this.element.nativeElement;
        const size = { width: element.offsetWidth, height: element.offsetHeight };
        const anchor = { ...e.tooltipData.popupOffset };
        const popupAlign = e.tooltipData.popupAlign;
        const offset = this.offset || DEFAULT_OFFSET;
        anchor.left += (popupAlign.horizontal === 'left') ? offset : (-1 * offset);
        if (popupAlign.horizontal === 'right') {
            anchor.left -= size.width;
        }
        if (popupAlign.vertical === 'bottom') {
            anchor.top -= size.height + offset;
        }
        else {
            anchor.top += offset;
        }
        return anchor;
    }
    formatUnits(value) {
        return this.intlService.format(this.tooltipUnitFormat, value ?? 0);
    }
    rtlChange() {
        this.arrowIcon = this.rtl ? arrowLeftIcon : arrowRightIcon;
    }
    setDirection() {
        this.rtl = this.isRTL;
        if (this.element) {
            this.renderer.setAttribute(this.element.nativeElement, 'dir', this.rtl ? 'rtl' : 'ltr');
        }
    }
    get isRTL() {
        return Boolean(this.localizationService.rtl);
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: SankeyTooltipPopupComponent, deps: [{ token: i0.ElementRef }, { token: i1.PopupService }, { token: SankeyTooltipTemplateService }, { token: i1$1.LocalizationService }, { token: i3.IntlService }, { token: i0.NgZone }, { token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: SankeyTooltipPopupComponent, isStandalone: true, selector: "kendo-sankey-tooltip-popup", inputs: { animate: "animate", wrapperClass: "wrapperClass", tooltipUnitFormat: "tooltipUnitFormat", offset: "offset" }, providers: [
            PopupService,
            {
                provide: POPUP_CONTAINER,
                useFactory: bodyFactory,
            },
        ], viewQueries: [{ propertyName: "defaultNodeTooltipTemplate", first: true, predicate: SankeyNodeTooltipTemplateDirective, descendants: true }, { propertyName: "defaultLinkTooltipTemplate", first: true, predicate: SankeyLinkTooltipTemplateDirective, descendants: true }, { propertyName: "templateRef", first: true, predicate: ["content"], descendants: true, static: true }], usesInheritance: true, ngImport: i0, template: `
        <ng-template #content>
            <div class="k-tooltip k-sankey-tooltip k-chart-tooltip k-chart-shared-tooltip" [ngStyle]="style">
                <div class="k-tooltip-content">
                    <ng-template
                        [ngTemplateOutlet]="nodeTooltipTemplateRef"
                        *ngIf="isNode"
                        [ngTemplateOutletContext]="nodeTooltipContext"
                    >
                    </ng-template>
                    <ng-template
                        [ngTemplateOutlet]="linkTooltipTemplateRef"
                        *ngIf="isLink"
                        [ngTemplateOutletContext]="linkTooltipContext"
                    >
                    </ng-template>
                </div>
            </div>
        </ng-template>

        <ng-template kendoSankeyNodeTooltipTemplate let-color="color" let-label="label" let-value="value">
            <div [ngStyle]="tooltipStyle">
                <div squareSymbol [color]="color"></div>
                <span [ngStyle]="textStyle">{{ label.text }}</span>
                <span [ngStyle]="textStyle">{{ formatUnits(value) }}</span>
            </div>
        </ng-template>

        <ng-template kendoSankeyLinkTooltipTemplate let-source="source" let-target="target" let-value="value">
            <div [ngStyle]="tooltipStyle">
                <div squareSymbol [color]="source.color"></div>
                <span [ngStyle]="textStyle">{{ source.label?.text }}</span>
                <kendo-icon-wrapper [name]="arrowIcon.name" [svgIcon]="arrowIcon"></kendo-icon-wrapper>
                <div squareSymbol [color]="target.color"></div>
                <span [ngStyle]="textStyle">{{ target.label?.text }}</span>
                <span [ngStyle]="textStyle">{{ formatUnits(value) }}</span>
            </div>
        </ng-template>
    `, isInline: true, dependencies: [{ kind: "directive", type: NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }, { kind: "directive", type: NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "directive", type: SankeyNodeTooltipTemplateDirective, selector: "[kendoSankeyNodeTooltipTemplate]" }, { kind: "directive", type: SquareSymbol, selector: "[squareSymbol]", inputs: ["color", "size"] }, { kind: "directive", type: SankeyLinkTooltipTemplateDirective, selector: "[kendoSankeyLinkTooltipTemplate]" }, { kind: "component", type: IconWrapperComponent, selector: "kendo-icon-wrapper", inputs: ["name", "svgIcon", "innerCssClass", "customFontClass", "size"], exportAs: ["kendoIconWrapper"] }] });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: SankeyTooltipPopupComponent, decorators: [{
            type: Component,
            args: [{
                    providers: [
                        PopupService,
                        {
                            provide: POPUP_CONTAINER,
                            useFactory: bodyFactory,
                        },
                    ],
                    selector: 'kendo-sankey-tooltip-popup',
                    template: `
        <ng-template #content>
            <div class="k-tooltip k-sankey-tooltip k-chart-tooltip k-chart-shared-tooltip" [ngStyle]="style">
                <div class="k-tooltip-content">
                    <ng-template
                        [ngTemplateOutlet]="nodeTooltipTemplateRef"
                        *ngIf="isNode"
                        [ngTemplateOutletContext]="nodeTooltipContext"
                    >
                    </ng-template>
                    <ng-template
                        [ngTemplateOutlet]="linkTooltipTemplateRef"
                        *ngIf="isLink"
                        [ngTemplateOutletContext]="linkTooltipContext"
                    >
                    </ng-template>
                </div>
            </div>
        </ng-template>

        <ng-template kendoSankeyNodeTooltipTemplate let-color="color" let-label="label" let-value="value">
            <div [ngStyle]="tooltipStyle">
                <div squareSymbol [color]="color"></div>
                <span [ngStyle]="textStyle">{{ label.text }}</span>
                <span [ngStyle]="textStyle">{{ formatUnits(value) }}</span>
            </div>
        </ng-template>

        <ng-template kendoSankeyLinkTooltipTemplate let-source="source" let-target="target" let-value="value">
            <div [ngStyle]="tooltipStyle">
                <div squareSymbol [color]="source.color"></div>
                <span [ngStyle]="textStyle">{{ source.label?.text }}</span>
                <kendo-icon-wrapper [name]="arrowIcon.name" [svgIcon]="arrowIcon"></kendo-icon-wrapper>
                <div squareSymbol [color]="target.color"></div>
                <span [ngStyle]="textStyle">{{ target.label?.text }}</span>
                <span [ngStyle]="textStyle">{{ formatUnits(value) }}</span>
            </div>
        </ng-template>
    `,
                    standalone: true,
                    imports: [NgStyle, NgIf, NgTemplateOutlet, SankeyNodeTooltipTemplateDirective, SquareSymbol, SankeyLinkTooltipTemplateDirective, IconWrapperComponent]
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1.PopupService }, { type: SankeyTooltipTemplateService }, { type: i1$1.LocalizationService }, { type: i3.IntlService }, { type: i0.NgZone }, { type: i0.Renderer2 }]; }, propDecorators: { defaultNodeTooltipTemplate: [{
                type: ViewChild,
                args: [SankeyNodeTooltipTemplateDirective, { static: false }]
            }], defaultLinkTooltipTemplate: [{
                type: ViewChild,
                args: [SankeyLinkTooltipTemplateDirective, { static: false }]
            }], templateRef: [{
                type: ViewChild,
                args: ['content', { static: true }]
            }], animate: [{
                type: Input
            }], wrapperClass: [{
                type: Input
            }], tooltipUnitFormat: [{
                type: Input
            }], offset: [{
                type: Input
            }] } });

/**
 * @hidden
 */
class Messages extends ComponentMessages {
    /**
     * Sets the format string to use when displaying node and link values in the tooltip.
     */
    tooltipUnitFormat;
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: Messages, deps: null, target: i0.ɵɵFactoryTarget.Directive });
    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.2.12", type: Messages, selector: "[kendoSankeyMessages]", inputs: { tooltipUnitFormat: "tooltipUnitFormat" }, usesInheritance: true, ngImport: i0 });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: Messages, decorators: [{
            type: Directive,
            args: [{
                    selector: '[kendoSankeyMessages]'
                }]
        }], propDecorators: { tooltipUnitFormat: [{
                type: Input
            }] } });

/**
 * @hidden
 */
class LocalizedMessagesDirective extends Messages {
    service;
    constructor(service) {
        super();
        this.service = service;
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: LocalizedMessagesDirective, deps: [{ token: i1$1.LocalizationService }], target: i0.ɵɵFactoryTarget.Directive });
    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.2.12", type: LocalizedMessagesDirective, isStandalone: true, selector: "[kendoSankeyLocalizedMessages]", providers: [
            {
                provide: Messages,
                useExisting: forwardRef(() => LocalizedMessagesDirective)
            }
        ], usesInheritance: true, ngImport: i0 });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: LocalizedMessagesDirective, decorators: [{
            type: Directive,
            args: [{
                    providers: [
                        {
                            provide: Messages,
                            useExisting: forwardRef(() => LocalizedMessagesDirective)
                        }
                    ],
                    selector: '[kendoSankeyLocalizedMessages]',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: i1$1.LocalizationService }]; } });

/**
 * Represents the Kendo UI for Angular Sankey diagram component.
 *
 * The Sankey diagram visualizes flow data between different categories or stages.
 * It displays nodes connected by links where the thickness of each link represents the flow value.
 *
 * @example
 * ```ts
 * import { Component } from '@angular/core';
 *
 * @Component({
 *   selector: 'my-app',
 *   template: `
 *       <kendo-sankey [data]="data">
 *       </kendo-sankey>
 *   `,
 * })
 * export class AppComponent {
 *     public data: SankeyData = {
 *         nodes: [
 *           { id: 1, label: { text: 'Linux' } },
 *           { id: 0, label: { text: 'iOS'} },
 *           { id: 2, label: { text: 'Mobile' } },
 *           { id: 3, label: { text: 'Desktop' } },
 *         ],
 *         links: [
 *           { sourceId: 0, targetId: 2, value: 1 },
 *           { sourceId: 1, targetId: 2, value: 2 },
 *           { sourceId: 1, targetId: 3, value: 3 },
 *         ],
 *       };
 * }
 * ```
 *
 * @remarks
 * Supported children components are: {@link SankeyCustomMessagesComponent}, {@link SankeyLabelsComponent}, {@link SankeyLegendComponent}, {@link SankeyLinksComponent}, {@link SankeyNodesComponent}, {@link SankeyTitleComponent}, and {@link SankeyTooltipComponent}.
 */
class SankeyComponent {
    element;
    configurationService;
    themeService;
    localizationService;
    instanceEventService;
    ngZone;
    changeDetector;
    renderer;
    intlService;
    /**
     * Specifies the data for the Sankey component containing the `links` and `nodes`.
     *
     * The data object defines the structure and relationships of your flow diagram.
     */
    data;
    /**
     * Specifies the default configuration for links.
     *
     * The settings are applied to all links unless overridden by individual data items.
     */
    links;
    /**
     * Specifies the default configuration for nodes.
     *
     * The settings are applied to all nodes unless overridden by individual data items.
     */
    nodes;
    /**
     * Specifies the default configuration for labels.
     *
     * The settings are applied to all labels unless overridden by individual data items.
     */
    labels;
    /**
     * Specifies the title configuration for the Sankey component.
     */
    title;
    /**
     * Specifies the legend configuration for the Sankey component.
     */
    legend;
    /**
     * Specifies the configuration for the Sankey tooltip.
     */
    tooltip;
    /**
     * Determines whether the Sankey component performs automatic layout.
     *
     * When set to `true`, the component will not arrange nodes and links automatically.
     *
     * @default false
     */
    disableAutoLayout;
    /**
     * Determines whether keyboard navigation is enabled for the Sankey component.
     *
     * When set to `false`, the keyboard navigation will be disabled.
     *
     * @default true
     */
    navigable = true;
    /**
     * Specifies the settings for the tooltip popup.
     */
    popupSettings;
    /**
     * Fires when the user hovers over a node.
     *
     * Similar to the `mouseenter` event.
     */
    nodeEnter = new EventEmitter();
    /**
     * Fires when the user stops hovering over a node.
     *
     * Similar to the `mouseleave` event.
     */
    nodeLeave = new EventEmitter();
    /**
     * Fires when the user clicks a node.
     */
    nodeClick = new EventEmitter();
    /**
     * Fires when the user hovers over a link.
     *
     * Similar to the `mouseenter` event.
     */
    linkEnter = new EventEmitter();
    /**
     * Fires when the user stops hovering over a link.
     *
     * Similar to the `mouseleave` event.
     */
    linkLeave = new EventEmitter();
    /**
     * Fires when the user clicks a link.
     */
    linkClick = new EventEmitter();
    tooltipInstance;
    instanceElement;
    /**
     * @hidden
     */
    showLicenseWatermark = false;
    instance;
    options;
    theme;
    optionsChange;
    redrawTimeout;
    destroyed;
    subscriptions;
    rtl = false;
    hostClasses = ['k-chart', 'k-sankey'];
    constructor(element, configurationService, themeService, localizationService, instanceEventService, ngZone, changeDetector, renderer, intlService) {
        this.element = element;
        this.configurationService = configurationService;
        this.themeService = themeService;
        this.localizationService = localizationService;
        this.instanceEventService = instanceEventService;
        this.ngZone = ngZone;
        this.changeDetector = changeDetector;
        this.renderer = renderer;
        this.intlService = intlService;
        const isValid = validatePackage(packageMetadata);
        this.showLicenseWatermark = shouldShowValidationUI(isValid);
        this.themeService.loadTheme();
        this.refreshWait();
    }
    ngOnInit() {
        if (this.element) {
            this.hostClasses.forEach(name => {
                this.renderer.addClass(this.element.nativeElement, name);
            });
        }
    }
    ngAfterViewInit() {
        this.setDirection();
        this.subscriptions = this.intlService.changes.subscribe(this.intlChange.bind(this));
        this.subscriptions.add(this.localizationService.changes.subscribe(this.rtlChange.bind(this)));
    }
    ngOnChanges(changes) {
        const store = this.configurationService.store;
        copyChanges(changes, store);
        store.popupSettings = null;
        this.configurationService.push(store);
    }
    /**
     * Updates the component fields with the specified values and refreshes the component.
     *
     * Use this method when you cannot set configuration values through the template.
     *
     * @example
     * ```ts-no-run
     * sankey.notifyChanges({ title: { text: 'New Title' } });
     * ```
     *
     * @param changes An object containing the updated input fields.
     */
    notifyChanges(changes) {
        this.ngOnChanges(toSimpleChanges(changes));
    }
    ngOnDestroy() {
        this.destroyed = true;
        if (this.optionsChange) {
            this.optionsChange.unsubscribe();
        }
        if (this.instance) {
            this.instance.destroy();
            this.instance = null;
        }
        if (this.subscriptions) {
            this.subscriptions.unsubscribe();
        }
        clearTimeout(this.redrawTimeout);
    }
    /**
     * @hidden
     */
    messageFor(key) {
        return this.localizationService.get(key);
    }
    createInstance(element) {
        this.instance = new Sankey(element, this.instanceOptions, this.theme);
        ['nodeEnter', 'nodeLeave', 'nodeClick', 'linkEnter', 'linkLeave', 'linkClick'].forEach((eventName) => this.instance.bind(eventName, (e) => this.trigger(eventName, e)));
        this.instance.bind('tooltipShow', (e) => this.onShowTooltip(e));
        this.instance.bind('tooltipHide', () => this.onHideTooltip());
        this.hostClasses.forEach(name => {
            this.renderer.removeClass(this.instanceElement.nativeElement, name);
        });
    }
    /**
     * Exports the Sankey diagram as an image.
     *
     * The export operation is asynchronous and returns a promise.
     *
     * @param {ImageExportOptions} options - The configuration options for the exported image.
     * @returns {Promise<string>} - A promise that resolves with a PNG image encoded as a Data URI.
     */
    exportImage(options = {}) {
        return exportImage(this.exportVisual(options), options);
    }
    /**
     * Exports the Sankey diagram as an SVG document.
     *
     * The export operation is asynchronous and returns a promise.
     *
     * @param options The parameters for the exported file.
     * @returns A promise that will be resolved with an SVG document that is encoded as a Data URI.
     */
    exportSVG(options = {}) {
        return exportSVG(this.exportVisual(options), options);
    }
    /**
     * Exports the visual of the Sankey component to a drawing group.
     *
     * @param options The parameters for the export operation.
     * @returns The root Group of the scene.
     */
    exportVisual(options = {}) {
        return this.instance.exportVisual(options);
    }
    init() {
        if (!this.canRender) {
            return;
        }
        const element = this.instanceElement.nativeElement;
        this.createInstance(element);
    }
    /**
     * Reloads the Sankey appearance settings from the current [Kendo UI Theme]({% slug themesandstyles %}).
     *
     * Call this method after loading a different theme stylesheet.
     */
    reloadTheme() {
        if (!this.instance) {
            return;
        }
        this.themeService.reset();
        this.instance.destroy();
        this.instance = null;
    }
    onShowTooltip(e) {
        this.run(() => {
            this.tooltipInstance.show(e);
        }, true, true);
    }
    onHideTooltip() {
        if (this.tooltipInstance.active) {
            this.tooltipInstance.hide();
            this.detectChanges();
        }
    }
    trigger(name, e) {
        const emitter = this.activeEmitter(name);
        if (emitter) {
            const args = this.instanceEventService.create(name, e, this);
            this.run(() => {
                emitter.emit(args);
            });
            return args.isDefaultPrevented && args.isDefaultPrevented();
        }
    }
    requiresHandlers(names) {
        for (let idx = 0; idx < names.length; idx++) {
            if (this.activeEmitter(names[idx])) {
                return true;
            }
        }
        return false;
    }
    refresh() {
        clearTimeout(this.redrawTimeout);
        if (!this.instance) {
            this.init();
            return;
        }
        this.updateOptions();
    }
    updateOptions() {
        this.instance.setOptions(this.instanceOptions);
    }
    get canRender() {
        return isDocumentAvailable() && Boolean(this.instanceElement);
    }
    get instanceOptions() {
        return { ...this.options, rtl: this.rtl, disableKeyboardNavigation: !this.navigable };
    }
    activeEmitter(name) {
        const emitter = this[name];
        if (emitter && emitter.emit && hasObservers(emitter)) {
            return emitter;
        }
    }
    refreshWait() {
        this.ngZone.runOutsideAngular(() => {
            this.optionsChange = combineLatest([this.configurationService.onChange$, this.themeService.onChange$])
                .pipe(tap((result) => {
                this.options = result[0];
                this.theme = result[1];
            }), auditTime(THROTTLE_MS))
                .subscribe(() => {
                this.refresh();
            });
        });
    }
    run(callback, inZone = true, detectChanges) {
        if (inZone) {
            if (detectChanges) {
                this.changeDetector.markForCheck();
            }
            this.ngZone.run(callback);
        }
        else {
            callback();
            if (detectChanges) {
                this.detectChanges();
            }
        }
    }
    detectChanges() {
        if (!this.destroyed) {
            this.changeDetector.detectChanges();
        }
    }
    intlChange() {
        if (this.instance) {
            this.refresh();
        }
    }
    rtlChange() {
        if (this.instance && this.rtl !== this.isRTL) {
            this.refresh();
        }
    }
    setDirection() {
        this.rtl = this.isRTL;
        if (this.element) {
            this.renderer.setAttribute(this.element.nativeElement, 'dir', this.rtl ? 'rtl' : 'ltr');
        }
    }
    get isRTL() {
        return Boolean(this.localizationService.rtl);
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: SankeyComponent, deps: [{ token: i0.ElementRef }, { token: ConfigurationService }, { token: SankeyThemeService }, { token: i1$1.LocalizationService }, { token: InstanceEventService }, { token: i0.NgZone }, { token: i0.ChangeDetectorRef }, { token: i0.Renderer2 }, { token: i3.IntlService }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: SankeyComponent, isStandalone: true, selector: "kendo-sankey", inputs: { data: "data", links: "links", nodes: "nodes", labels: "labels", title: "title", legend: "legend", tooltip: "tooltip", disableAutoLayout: "disableAutoLayout", navigable: "navigable", popupSettings: "popupSettings" }, outputs: { nodeEnter: "nodeEnter", nodeLeave: "nodeLeave", nodeClick: "nodeClick", linkEnter: "linkEnter", linkLeave: "linkLeave", linkClick: "linkClick" }, providers: [
            ConfigurationService,
            LocalizationService,
            InstanceEventService,
            SankeyTooltipTemplateService,
            {
                provide: L10N_PREFIX,
                useValue: 'kendo.sankey',
            },
        ], viewQueries: [{ propertyName: "tooltipInstance", first: true, predicate: SankeyTooltipPopupComponent, descendants: true, static: true }, { propertyName: "instanceElement", first: true, predicate: ["instance"], descendants: true, static: true }], exportAs: ["kendoSankey"], usesOnChanges: true, ngImport: i0, template: `
        <ng-container
            kendoSankeyLocalizedMessages
            i18n-tooltipUnitFormat="kendo.sankey.tooltipUnitFormat|The format string to use when displaying node and link values in the tooltip"
            tooltipUnitFormat="({0} units)"
        ></ng-container>
        <div #instance class="k-chart-surface"></div>
        <kendo-sankey-tooltip-popup
            [popupSettings]="popupSettings"
            [tooltipUnitFormat]="messageFor('tooltipUnitFormat')"
        >
        </kendo-sankey-tooltip-popup>
        <div kendoWatermarkOverlay *ngIf="showLicenseWatermark"></div>
    `, isInline: true, dependencies: [{ kind: "directive", type: LocalizedMessagesDirective, selector: "[kendoSankeyLocalizedMessages]" }, { kind: "component", type: SankeyTooltipPopupComponent, selector: "kendo-sankey-tooltip-popup", inputs: ["animate", "wrapperClass", "tooltipUnitFormat", "offset"] }, { kind: "directive", type: NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: WatermarkOverlayComponent, selector: "div[kendoWatermarkOverlay]" }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: SankeyComponent, decorators: [{
            type: Component,
            args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    exportAs: 'kendoSankey',
                    providers: [
                        ConfigurationService,
                        LocalizationService,
                        InstanceEventService,
                        SankeyTooltipTemplateService,
                        {
                            provide: L10N_PREFIX,
                            useValue: 'kendo.sankey',
                        },
                    ],
                    selector: 'kendo-sankey',
                    template: `
        <ng-container
            kendoSankeyLocalizedMessages
            i18n-tooltipUnitFormat="kendo.sankey.tooltipUnitFormat|The format string to use when displaying node and link values in the tooltip"
            tooltipUnitFormat="({0} units)"
        ></ng-container>
        <div #instance class="k-chart-surface"></div>
        <kendo-sankey-tooltip-popup
            [popupSettings]="popupSettings"
            [tooltipUnitFormat]="messageFor('tooltipUnitFormat')"
        >
        </kendo-sankey-tooltip-popup>
        <div kendoWatermarkOverlay *ngIf="showLicenseWatermark"></div>
    `,
                    standalone: true,
                    imports: [LocalizedMessagesDirective, SankeyTooltipPopupComponent, NgIf, WatermarkOverlayComponent]
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: ConfigurationService }, { type: SankeyThemeService }, { type: i1$1.LocalizationService }, { type: InstanceEventService }, { type: i0.NgZone }, { type: i0.ChangeDetectorRef }, { type: i0.Renderer2 }, { type: i3.IntlService }]; }, propDecorators: { data: [{
                type: Input
            }], links: [{
                type: Input
            }], nodes: [{
                type: Input
            }], labels: [{
                type: Input
            }], title: [{
                type: Input
            }], legend: [{
                type: Input
            }], tooltip: [{
                type: Input
            }], disableAutoLayout: [{
                type: Input
            }], navigable: [{
                type: Input
            }], popupSettings: [{
                type: Input
            }], nodeEnter: [{
                type: Output
            }], nodeLeave: [{
                type: Output
            }], nodeClick: [{
                type: Output
            }], linkEnter: [{
                type: Output
            }], linkLeave: [{
                type: Output
            }], linkClick: [{
                type: Output
            }], tooltipInstance: [{
                type: ViewChild,
                args: [SankeyTooltipPopupComponent, { static: true }]
            }], instanceElement: [{
                type: ViewChild,
                args: ['instance', { static: true }]
            }] } });

/**
 * Represents the arguments for the `dataBound` event of the [`[kendoSankeyFlatBinding]`]({% slug api_charts_sankeyflatbindingdirective %}) directive.
 */
class SankeyFlatBindingDataBoundEvent {
    /**
     * Stores the original data passed to the directive.
     */
    originalData;
    /**
     * Contains the newly created [`SankeyData`]({% slug api_charts_sankeydata %}).
     *
     * The Sankey diagram receives changes to this object.
     */
    data;
    /**
     * @hidden
     */
    constructor(data) {
        this.data = data;
    }
}

/**
 * Represents a directive that encapsulates the retrieval of the nodes and links when flat data is provided.
 *
 * See [Data Binding - Binding to Flat Data]({% slug data_binding_sankey %}#toc-binding-to-flat-data).
 */
class SankeyFlatBindingDirective {
    sankey;
    /**
     * Specifies the data that the Sankey diagram displays.
     */
    data;
    /**
     * Sets the fields that identify the nodes.
     */
    dimensionFields = [];
    /**
     * Sets the unique field that represents the link value between nodes.
     */
    valueField;
    /**
     * Fires when the flat data has been converted to `SankeyData`.
     *
     * Modify the data to customize the created nodes and links.
     */
    dataBound = new EventEmitter();
    constructor(sankey) {
        this.sankey = sankey;
    }
    ngOnChanges(changes) {
        if (!isChanged('data', changes, false)) {
            return;
        }
        if (this.dimensionFields?.length === 0) {
            throw new Error('kendoSankeyFlatBinding: dimensionFields is required');
        }
        if (!this.valueField) {
            throw new Error('kendoSankeyFlatBinding: valueField is required');
        }
        const dimensions = this.dimensionFields.map(field => ({ value: getter(field) }));
        const measure = { value: getter(this.valueField) };
        const data = createSankeyData(this.data, dimensions, measure);
        this.dataBound.emit(new SankeyFlatBindingDataBoundEvent(data));
        this.sankey.notifyChanges({ data });
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: SankeyFlatBindingDirective, deps: [{ token: SankeyComponent }], target: i0.ɵɵFactoryTarget.Directive });
    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.2.12", type: SankeyFlatBindingDirective, isStandalone: true, selector: "[kendoSankeyFlatBinding]", inputs: { data: ["kendoSankeyFlatBinding", "data"], dimensionFields: "dimensionFields", valueField: "valueField" }, outputs: { dataBound: "dataBound" }, usesOnChanges: true, ngImport: i0 });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: SankeyFlatBindingDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[kendoSankeyFlatBinding]',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: SankeyComponent }]; }, propDecorators: { data: [{
                type: Input,
                args: ['kendoSankeyFlatBinding']
            }], dimensionFields: [{
                type: Input
            }], valueField: [{
                type: Input
            }], dataBound: [{
                type: Output
            }] } });

/**
 * Represents the configuration options of the Sankey labels
 * ([see example](slug:customization_sankey#toc-customizing-the-sankey-diagram-elements)).
 */
class SankeyLabelsComponent extends SettingsComponent {
    configurationService;
    visible;
    font;
    color;
    align;
    position;
    padding;
    margin;
    border;
    offset;
    stroke;
    constructor(configurationService) {
        super('labels', configurationService);
        this.configurationService = configurationService;
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: SankeyLabelsComponent, deps: [{ token: ConfigurationService }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: SankeyLabelsComponent, isStandalone: true, selector: "kendo-sankey-labels", inputs: { visible: "visible", font: "font", color: "color", align: "align", position: "position", padding: "padding", margin: "margin", border: "border", offset: "offset", stroke: "stroke" }, usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: SankeyLabelsComponent, decorators: [{
            type: Component,
            args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    selector: 'kendo-sankey-labels',
                    template: '',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: ConfigurationService }]; }, propDecorators: { visible: [{
                type: Input
            }], font: [{
                type: Input
            }], color: [{
                type: Input
            }], align: [{
                type: Input
            }], position: [{
                type: Input
            }], padding: [{
                type: Input
            }], margin: [{
                type: Input
            }], border: [{
                type: Input
            }], offset: [{
                type: Input
            }], stroke: [{
                type: Input
            }] } });

/**
 * Represents the configuration options of the Sankey legend
 * ([see example]({% slug legend_sankey %})).
 */
class SankeyLegendComponent extends SettingsComponent {
    configurationService;
    /**
     * Aligns the legend horizontally when [`legend.position`]({% slug api_charts_sankeylegend %}#toc-position) is set to `"top"` or `"bottom"`.
     * Aligns the legend vertically when [`legend.position`]({% slug api_charts_sankeylegend %}#toc-position) is set to `"left"` or `"right"`.
     * @default 'center'
     */
    align;
    /**
     * Sets the background color of the legend. Accepts a valid CSS color string, including hex and rgb.
     * @default 'white'
     */
    background;
    border;
    height;
    labels;
    /**
     * Sets the margin of the Sankey legend. A numeric value sets all paddings.
     * @default 5
     */
    margin;
    /**
     * Sets the X offset of the Sankey legend. The offset is relative to the default position of the legend.
     * For example, a value of `20` moves the legend 20 pixels to the right of its initial position.
     * Negative values move the legend to the left of its current position.
     * @default 0
     */
    offsetX;
    /**
     * Sets the Y offset of the Sankey legend. The offset is relative to the current position of the legend.
     * For example, a value of `20` moves the legend 20 pixels down from its initial position.
     * Negative values move the legend upwards from its current position.
     * @default 0
     */
    offsetY;
    /**
     * Sets the orientation of the legend items.
     * @default 'vertical'
     */
    orientation;
    /**
     * Sets the padding of the Sankey legend. A numeric value sets all paddings.
     * @default 5
     */
    padding;
    /**
     * Sets the position of the Sankey legend.
     * Setting the legend position to `custom` allows you to position the legend using the [`legend.offsetX`](slug:api_charts_sankeylegend#toc-offsetx) and [`legend.offsetY`](slug:api_charts_sankeylegend#toc-offsety) options.
     * @default 'right'
     */
    position;
    /**
     * Determines if the legend items are reversed.
     * @default false
     */
    reverse;
    /**
     * Determines if the Sankey displays the legend. By default, the Sankey legend is visible.
     * @default true
     */
    visible;
    width;
    markers;
    spacing;
    title;
    constructor(configurationService) {
        super('legend', configurationService);
        this.configurationService = configurationService;
        this.markAsVisible();
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: SankeyLegendComponent, deps: [{ token: ConfigurationService }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: SankeyLegendComponent, isStandalone: true, selector: "kendo-sankey-legend", inputs: { align: "align", background: "background", border: "border", height: "height", labels: "labels", margin: "margin", offsetX: "offsetX", offsetY: "offsetY", orientation: "orientation", padding: "padding", position: "position", reverse: "reverse", visible: "visible", width: "width", markers: "markers", spacing: "spacing", title: "title" }, usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: SankeyLegendComponent, decorators: [{
            type: Component,
            args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    selector: 'kendo-sankey-legend',
                    template: '',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: ConfigurationService }]; }, propDecorators: { align: [{
                type: Input
            }], background: [{
                type: Input
            }], border: [{
                type: Input
            }], height: [{
                type: Input
            }], labels: [{
                type: Input
            }], margin: [{
                type: Input
            }], offsetX: [{
                type: Input
            }], offsetY: [{
                type: Input
            }], orientation: [{
                type: Input
            }], padding: [{
                type: Input
            }], position: [{
                type: Input
            }], reverse: [{
                type: Input
            }], visible: [{
                type: Input
            }], width: [{
                type: Input
            }], markers: [{
                type: Input
            }], spacing: [{
                type: Input
            }], title: [{
                type: Input
            }] } });

/**
 * Represents the configuration options of the Sankey links
 * ([see example](slug:customization_sankey#toc-customizing-the-sankey-diagram-elements)).
 */
class SankeyLinksComponent extends SettingsComponent {
    configurationService;
    colorType;
    color;
    opacity;
    highlight;
    focusHighlight;
    constructor(configurationService) {
        super('links', configurationService);
        this.configurationService = configurationService;
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: SankeyLinksComponent, deps: [{ token: ConfigurationService }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: SankeyLinksComponent, isStandalone: true, selector: "kendo-sankey-links", inputs: { colorType: "colorType", color: "color", opacity: "opacity", highlight: "highlight", focusHighlight: "focusHighlight" }, usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: SankeyLinksComponent, decorators: [{
            type: Component,
            args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    selector: 'kendo-sankey-links',
                    template: '',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: ConfigurationService }]; }, propDecorators: { colorType: [{
                type: Input
            }], color: [{
                type: Input
            }], opacity: [{
                type: Input
            }], highlight: [{
                type: Input
            }], focusHighlight: [{
                type: Input
            }] } });

/**
 * Represents the custom messages component of the Sankey.
 *
 * Use this component to override default messages for the Sankey.
 *
 * @example
 * ```html
 * <kendo-sankey [data]="data">
 *     <kendo-sankey-messages tooltipUnitFormat='kelvin'></kendo-sankey-messages>
 * </kendo-sankey>
 * ```
 */
class SankeyCustomMessagesComponent extends Messages {
    service;
    constructor(service) {
        super();
        this.service = service;
    }
    get override() {
        return true;
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: SankeyCustomMessagesComponent, deps: [{ token: i1$1.LocalizationService }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: SankeyCustomMessagesComponent, isStandalone: true, selector: "kendo-sankey-messages", providers: [
            {
                provide: Messages,
                useExisting: forwardRef(() => SankeyCustomMessagesComponent)
            }
        ], usesInheritance: true, ngImport: i0, template: ``, isInline: true });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: SankeyCustomMessagesComponent, decorators: [{
            type: Component,
            args: [{
                    providers: [
                        {
                            provide: Messages,
                            useExisting: forwardRef(() => SankeyCustomMessagesComponent)
                        }
                    ],
                    selector: 'kendo-sankey-messages',
                    template: ``,
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: i1$1.LocalizationService }]; } });

/**
 * Represents the configuration options of the Sankey nodes
 * ([see example](slug:customization_sankey#toc-customizing-the-sankey-diagram-elements)).
 */
class SankeyNodesComponent extends SettingsComponent {
    configurationService;
    /**
     * Sets the color type of the link.
     * Use `static` for static link color determined by the link's `color` option.
     * Use `source` for link color that matches the source node color.
     * Use `target` for link color that matches the target node color.
     *
     * @default 'static'
     */
    colorType;
    color;
    opacity;
    offset;
    padding;
    width;
    align;
    focusHighlight;
    constructor(configurationService) {
        super('nodes', configurationService);
        this.configurationService = configurationService;
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: SankeyNodesComponent, deps: [{ token: ConfigurationService }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: SankeyNodesComponent, isStandalone: true, selector: "kendo-sankey-nodes", inputs: { colorType: "colorType", color: "color", opacity: "opacity", offset: "offset", padding: "padding", width: "width", align: "align", focusHighlight: "focusHighlight" }, usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: SankeyNodesComponent, decorators: [{
            type: Component,
            args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    selector: 'kendo-sankey-nodes',
                    template: '',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: ConfigurationService }]; }, propDecorators: { colorType: [{
                type: Input
            }], color: [{
                type: Input
            }], opacity: [{
                type: Input
            }], offset: [{
                type: Input
            }], padding: [{
                type: Input
            }], width: [{
                type: Input
            }], align: [{
                type: Input
            }], focusHighlight: [{
                type: Input
            }] } });

/**
 * Represents the configuration options of the Sankey title or text
 * ([see example]({% slug title_sankey %})).
 *
 * @example
 * ```html
 * <kendo-sankey [data]="data">
 *     <kendo-sankey-title text="Title Text" [padding]="{bottom: 20}"></kendo-sankey-title>
 *     ...
 * </kendo-sankey>
 * ```
 */
class SankeyTitleComponent extends SettingsComponent {
    configurationService;
    /**
     * Sets the alignment of the title.
     * Use `center` for middle alignment, `left` for left alignment, or `right` for right alignment.
     *
     * @default 'center'
     */
    align;
    /**
     * Sets the background color of the title. Accepts a valid CSS color string, including HEX and RGB.
     *
     * @default 'white'
     */
    background;
    border;
    color;
    /**
     * Sets the font of the title.
     *
     * @default '16px sans-serif'
     */
    font;
    margin;
    /**
     * Sets the padding of the title. A numeric value sets all paddings.
     *
     * @default 5
     */
    padding;
    /**
     * Sets the position of the title.
     * Use `bottom` to place the title at the bottom or `top` to place it at the top.
     *
     * @default 'top'
     */
    position;
    text;
    description;
    /**
     * Determines if the Sankey displays the title.
     *
     * @default true
     */
    visible;
    constructor(configurationService) {
        super('title', configurationService);
        this.configurationService = configurationService;
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: SankeyTitleComponent, deps: [{ token: ConfigurationService }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: SankeyTitleComponent, isStandalone: true, selector: "kendo-sankey-title", inputs: { align: "align", background: "background", border: "border", color: "color", font: "font", margin: "margin", padding: "padding", position: "position", text: "text", description: "description", visible: "visible" }, usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: SankeyTitleComponent, decorators: [{
            type: Component,
            args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    selector: 'kendo-sankey-title',
                    template: '',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: ConfigurationService }]; }, propDecorators: { align: [{
                type: Input
            }], background: [{
                type: Input
            }], border: [{
                type: Input
            }], color: [{
                type: Input
            }], font: [{
                type: Input
            }], margin: [{
                type: Input
            }], padding: [{
                type: Input
            }], position: [{
                type: Input
            }], text: [{
                type: Input
            }], description: [{
                type: Input
            }], visible: [{
                type: Input
            }] } });

/**
 * Represents the Sankey tooltip
 * ([see example]({% slug tooltip_sankey %})).
 */
class SankeyTooltipComponent extends SettingsComponent {
    configurationService;
    templateService;
    /**
     * Determines if the tooltip follows the mouse pointer.
     *
     * @default false
     */
    followPointer;
    /**
     * Sets the delay of the tooltip displaying.
     * The delay is measured in milliseconds.
     *
     * @default 100
     */
    delay;
    /**
     * Sets the distance between the tooltip and the mouse pointer in pixels.
     * @default 12
     */
    offset;
    /**
     * Determines if the Sankey displays the link and node tooltips.
     * @default false
     */
    visible;
    linkTooltipTemplate;
    nodeTooltipTemplate;
    constructor(configurationService, templateService) {
        super('tooltip', configurationService);
        this.configurationService = configurationService;
        this.templateService = templateService;
        this.markAsVisible();
    }
    ngAfterContentChecked() {
        this.templateService.linkTemplate = this.linkTooltipTemplate?.templateRef;
        this.templateService.nodeTemplate = this.nodeTooltipTemplate?.templateRef;
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: SankeyTooltipComponent, deps: [{ token: ConfigurationService }, { token: SankeyTooltipTemplateService }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: SankeyTooltipComponent, isStandalone: true, selector: "kendo-sankey-tooltip", inputs: { followPointer: "followPointer", delay: "delay", offset: "offset", visible: "visible" }, queries: [{ propertyName: "linkTooltipTemplate", first: true, predicate: SankeyLinkTooltipTemplateDirective, descendants: true }, { propertyName: "nodeTooltipTemplate", first: true, predicate: SankeyNodeTooltipTemplateDirective, descendants: true }], usesInheritance: true, ngImport: i0, template: '', isInline: true });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: SankeyTooltipComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'kendo-sankey-tooltip',
                    template: '',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: ConfigurationService }, { type: SankeyTooltipTemplateService }]; }, propDecorators: { followPointer: [{
                type: Input
            }], delay: [{
                type: Input
            }], offset: [{
                type: Input
            }], visible: [{
                type: Input
            }], linkTooltipTemplate: [{
                type: ContentChild,
                args: [SankeyLinkTooltipTemplateDirective, { static: false }]
            }], nodeTooltipTemplate: [{
                type: ContentChild,
                args: [SankeyNodeTooltipTemplateDirective, { static: false }]
            }] } });

/**
 * Utility array that contains all `Chart` related components and directives
 */
const KENDO_CHART = [
    ChartComponent,
    DonutCenterTemplateDirective,
    NoDataTemplateDirective,
    XAxisComponent,
    XAxisCrosshairComponent,
    XAxisCrosshairTooltipComponent,
    XAxisItemComponent,
    XAxisLabelsComponent,
    XAxisNotesComponent,
    XAxisNotesIconComponent,
    XAxisNotesLabelComponent,
    XAxisTitleComponent,
    YAxisComponent,
    YAxisCrosshairComponent,
    YAxisCrosshairTooltipComponent,
    YAxisItemComponent,
    YAxisLabelsComponent,
    YAxisNotesComponent,
    YAxisNotesIconComponent,
    YAxisNotesLabelComponent,
    YAxisTitleComponent,
    ZoomableComponent,
    TooltipPopupComponent,
    SeriesTooltipTemplateDirective,
    SharedTooltipTemplateDirective,
    CrosshairTooltipsContainerComponent,
    CrosshairTooltipComponent,
    AxisDefaultsComponent,
    AxisDefaultsCrosshairComponent,
    AxisDefaultsCrosshairTooltipComponent,
    AxisDefaultsLabelsComponent,
    AxisDefaultsTitleComponent,
    CategoryAxisComponent,
    CategoryAxisCrosshairComponent,
    CategoryAxisCrosshairTooltipComponent,
    CategoryAxisItemComponent,
    CategoryAxisLabelsComponent,
    CategoryAxisRangeLabelsComponent,
    CategoryAxisNotesComponent,
    CategoryAxisNotesIconComponent,
    CategoryAxisNotesLabelComponent,
    CategoryAxisSelectComponent,
    CategoryAxisTitleComponent,
    ChartAreaComponent,
    ChartBreadcrumbComponent,
    ChartCustomMessagesComponent,
    LocalizedChartMessagesDirective,
    LegendComponent,
    LegendInactiveItemsComponent,
    LegendItemComponent,
    PaneComponent,
    PaneDefaultsComponent,
    PaneDefaultsTitleComponent,
    PanesComponent,
    PanesTitleComponent,
    PlotAreaComponent,
    SeriesComponent,
    SeriesDefaultsComponent,
    SeriesDefaultsLabelsComponent,
    SeriesDefaultsLabelsFromComponent,
    SeriesDefaultsLabelsToComponent,
    SeriesDefaultsNotesComponent,
    SeriesDefaultsNotesIconComponent,
    SeriesDefaultsNotesLabelComponent,
    SeriesDefaultsTooltipComponent,
    SeriesDrilldownTemplateDirective,
    SeriesErrorBarsComponent,
    SeriesExtremesComponent,
    SeriesHighlightComponent,
    SeriesItemComponent,
    SeriesLabelsComponent,
    SeriesLabelsFromComponent,
    SeriesLabelsToComponent,
    SeriesMarkersComponent,
    SeriesNotesComponent,
    SeriesNotesIconComponent,
    SeriesNotesLabelComponent,
    SeriesOutliersComponent,
    SeriesTooltipComponent,
    SeriesTrendlineComponent,
    SeriesTrendlineForecastComponent,
    SubtitleComponent,
    TitleComponent,
    TooltipComponent,
    ValueAxisComponent,
    ValueAxisCrosshairComponent,
    ValueAxisCrosshairTooltipComponent,
    ValueAxisItemComponent,
    ValueAxisLabelsComponent,
    ValueAxisNotesComponent,
    ValueAxisNotesIconComponent,
    ValueAxisNotesLabelComponent,
    ValueAxisTitleComponent
];
/**
 * Utility array that contains all `SparkLine` related components and directives
 */
const KENDO_SPARKLINE = [
    SparklineComponent
];
/**
 * Utility array that contains all `StockChart` related components and directives
 */
const KENDO_STOCKCHART = [
    StockChartComponent,
    NavigatorComponent,
    NavigatorCategoryAxisComponent,
    NavigatorCategoryAxisCrosshairComponent,
    NavigatorCategoryAxisCrosshairTooltipComponent,
    NavigatorCategoryAxisLabelsComponent,
    NavigatorCategoryAxisNotesComponent,
    NavigatorCategoryAxisNotesIconComponent,
    NavigatorCategoryAxisNotesLabelComponent,
    NavigatorCategoryAxisSelectComponent,
    NavigatorCategoryAxisTitleComponent,
    NavigatorHintComponent,
    NavigatorPaneComponent,
    NavigatorPaneTitleComponent,
    NavigatorSelectComponent,
    NavigatorSeriesComponent,
    NavigatorSeriesItemComponent,
    NavigatorSeriesErrorBarsComponent,
    NavigatorSeriesExtremesComponent,
    NavigatorSeriesHighlightComponent,
    NavigatorSeriesLabelsComponent,
    NavigatorSeriesLabelsFromComponent,
    NavigatorSeriesLabelsToComponent,
    NavigatorSeriesMarkersComponent,
    NavigatorSeriesNotesComponent,
    NavigatorSeriesNotesIconComponent,
    NavigatorSeriesNotesLabelComponent,
    NavigatorSeriesOutliersComponent,
    NavigatorSeriesTooltipComponent,
    TooltipPopupComponent,
    SeriesTooltipTemplateDirective,
    SharedTooltipTemplateDirective,
    CrosshairTooltipsContainerComponent,
    CrosshairTooltipComponent,
    AxisDefaultsComponent,
    AxisDefaultsCrosshairComponent,
    AxisDefaultsCrosshairTooltipComponent,
    AxisDefaultsLabelsComponent,
    AxisDefaultsTitleComponent,
    CategoryAxisComponent,
    CategoryAxisCrosshairComponent,
    CategoryAxisCrosshairTooltipComponent,
    CategoryAxisItemComponent,
    CategoryAxisLabelsComponent,
    CategoryAxisRangeLabelsComponent,
    CategoryAxisNotesComponent,
    CategoryAxisNotesIconComponent,
    CategoryAxisNotesLabelComponent,
    CategoryAxisSelectComponent,
    CategoryAxisTitleComponent,
    ChartAreaComponent,
    ChartBreadcrumbComponent,
    LegendComponent,
    LegendInactiveItemsComponent,
    LegendItemComponent,
    PaneComponent,
    PaneDefaultsComponent,
    PaneDefaultsTitleComponent,
    PanesComponent,
    PanesTitleComponent,
    PlotAreaComponent,
    SeriesComponent,
    SeriesDefaultsComponent,
    SeriesDefaultsLabelsComponent,
    SeriesDefaultsLabelsFromComponent,
    SeriesDefaultsLabelsToComponent,
    SeriesDefaultsNotesComponent,
    SeriesDefaultsNotesIconComponent,
    SeriesDefaultsNotesLabelComponent,
    SeriesDefaultsTooltipComponent,
    SeriesDrilldownTemplateDirective,
    SeriesErrorBarsComponent,
    SeriesExtremesComponent,
    SeriesHighlightComponent,
    SeriesItemComponent,
    SeriesLabelsComponent,
    SeriesLabelsFromComponent,
    SeriesLabelsToComponent,
    SeriesMarkersComponent,
    SeriesNotesComponent,
    SeriesNotesIconComponent,
    SeriesNotesLabelComponent,
    SeriesOutliersComponent,
    SeriesTooltipComponent,
    SeriesTrendlineComponent,
    SeriesTrendlineForecastComponent,
    SubtitleComponent,
    TitleComponent,
    TooltipComponent,
    ValueAxisComponent,
    ValueAxisCrosshairComponent,
    ValueAxisCrosshairTooltipComponent,
    ValueAxisItemComponent,
    ValueAxisLabelsComponent,
    ValueAxisNotesComponent,
    ValueAxisNotesIconComponent,
    ValueAxisNotesLabelComponent,
    ValueAxisTitleComponent
];
/**
 * Utility array that contains all `Sankey` related components and directives
 */
const KENDO_SANKEY = [
    SankeyComponent,
    SankeyTooltipPopupComponent,
    SankeyLinkTooltipTemplateDirective,
    SankeyNodeTooltipTemplateDirective,
    SankeyCustomMessagesComponent,
    LocalizedMessagesDirective,
    SankeyTitleComponent,
    SankeyLegendComponent,
    SankeyTooltipComponent,
    SankeyLinksComponent,
    SankeyNodesComponent,
    SankeyLabelsComponent,
    SankeyFlatBindingDirective
];
/**
 * Utility array that contains all `@progress/kendo-angular-charts` related components and directives
 */
const KENDO_CHARTS = [
    ...KENDO_CHART,
    ...KENDO_SPARKLINE,
    ...KENDO_STOCKCHART,
    ...KENDO_SANKEY
];

//IMPORTANT: NgModule export kept for backwards compatibility
/**
 * Represents the Kendo UI for Angular Chart module that includes the Chart component and directives.
 *
 * Import the `ChartModule` into your application
 * [root module](link:site.data.urls.angular['ngmodules']#angular-modularity) or any other sub-module
 * that uses the Chart component.
 *
 * @example
 * ```ts
 * import { NgModule } from '@angular/core';
 * import { BrowserModule } from '@angular/platform-browser';
 * import { ChartModule } from '@progress/kendo-angular-charts';
 * import { AppComponent } from './app.component';
 *
 * @NgModule({
 *     bootstrap:    [AppComponent],
 *     declarations: [AppComponent],
 *     imports:      [BrowserModule, ChartModule]
 * })
 * export class AppModule {
 * }
 * ```
 */
class ChartModule {
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: ChartModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "16.2.12", ngImport: i0, type: ChartModule, imports: [ChartComponent, DonutCenterTemplateDirective, NoDataTemplateDirective, XAxisComponent, XAxisCrosshairComponent, XAxisCrosshairTooltipComponent, XAxisItemComponent, XAxisLabelsComponent, XAxisNotesComponent, XAxisNotesIconComponent, XAxisNotesLabelComponent, XAxisTitleComponent, YAxisComponent, YAxisCrosshairComponent, YAxisCrosshairTooltipComponent, YAxisItemComponent, YAxisLabelsComponent, YAxisNotesComponent, YAxisNotesIconComponent, YAxisNotesLabelComponent, YAxisTitleComponent, ZoomableComponent, TooltipPopupComponent, SeriesTooltipTemplateDirective, SharedTooltipTemplateDirective, CrosshairTooltipsContainerComponent, CrosshairTooltipComponent, AxisDefaultsComponent, AxisDefaultsCrosshairComponent, AxisDefaultsCrosshairTooltipComponent, AxisDefaultsLabelsComponent, AxisDefaultsTitleComponent, CategoryAxisComponent, CategoryAxisCrosshairComponent, CategoryAxisCrosshairTooltipComponent, CategoryAxisItemComponent, CategoryAxisLabelsComponent, CategoryAxisRangeLabelsComponent, CategoryAxisNotesComponent, CategoryAxisNotesIconComponent, CategoryAxisNotesLabelComponent, CategoryAxisSelectComponent, CategoryAxisTitleComponent, ChartAreaComponent, ChartBreadcrumbComponent, ChartCustomMessagesComponent, LocalizedChartMessagesDirective, LegendComponent, LegendInactiveItemsComponent, LegendItemComponent, PaneComponent, PaneDefaultsComponent, PaneDefaultsTitleComponent, PanesComponent, PanesTitleComponent, PlotAreaComponent, SeriesComponent, SeriesDefaultsComponent, SeriesDefaultsLabelsComponent, SeriesDefaultsLabelsFromComponent, SeriesDefaultsLabelsToComponent, SeriesDefaultsNotesComponent, SeriesDefaultsNotesIconComponent, SeriesDefaultsNotesLabelComponent, SeriesDefaultsTooltipComponent, SeriesDrilldownTemplateDirective, SeriesErrorBarsComponent, SeriesExtremesComponent, SeriesHighlightComponent, SeriesItemComponent, SeriesLabelsComponent, SeriesLabelsFromComponent, SeriesLabelsToComponent, SeriesMarkersComponent, SeriesNotesComponent, SeriesNotesIconComponent, SeriesNotesLabelComponent, SeriesOutliersComponent, SeriesTooltipComponent, SeriesTrendlineComponent, SeriesTrendlineForecastComponent, SubtitleComponent, TitleComponent, TooltipComponent, ValueAxisComponent, ValueAxisCrosshairComponent, ValueAxisCrosshairTooltipComponent, ValueAxisItemComponent, ValueAxisLabelsComponent, ValueAxisNotesComponent, ValueAxisNotesIconComponent, ValueAxisNotesLabelComponent, ValueAxisTitleComponent], exports: [ChartComponent, DonutCenterTemplateDirective, NoDataTemplateDirective, XAxisComponent, XAxisCrosshairComponent, XAxisCrosshairTooltipComponent, XAxisItemComponent, XAxisLabelsComponent, XAxisNotesComponent, XAxisNotesIconComponent, XAxisNotesLabelComponent, XAxisTitleComponent, YAxisComponent, YAxisCrosshairComponent, YAxisCrosshairTooltipComponent, YAxisItemComponent, YAxisLabelsComponent, YAxisNotesComponent, YAxisNotesIconComponent, YAxisNotesLabelComponent, YAxisTitleComponent, ZoomableComponent, TooltipPopupComponent, SeriesTooltipTemplateDirective, SharedTooltipTemplateDirective, CrosshairTooltipsContainerComponent, CrosshairTooltipComponent, AxisDefaultsComponent, AxisDefaultsCrosshairComponent, AxisDefaultsCrosshairTooltipComponent, AxisDefaultsLabelsComponent, AxisDefaultsTitleComponent, CategoryAxisComponent, CategoryAxisCrosshairComponent, CategoryAxisCrosshairTooltipComponent, CategoryAxisItemComponent, CategoryAxisLabelsComponent, CategoryAxisRangeLabelsComponent, CategoryAxisNotesComponent, CategoryAxisNotesIconComponent, CategoryAxisNotesLabelComponent, CategoryAxisSelectComponent, CategoryAxisTitleComponent, ChartAreaComponent, ChartBreadcrumbComponent, ChartCustomMessagesComponent, LocalizedChartMessagesDirective, LegendComponent, LegendInactiveItemsComponent, LegendItemComponent, PaneComponent, PaneDefaultsComponent, PaneDefaultsTitleComponent, PanesComponent, PanesTitleComponent, PlotAreaComponent, SeriesComponent, SeriesDefaultsComponent, SeriesDefaultsLabelsComponent, SeriesDefaultsLabelsFromComponent, SeriesDefaultsLabelsToComponent, SeriesDefaultsNotesComponent, SeriesDefaultsNotesIconComponent, SeriesDefaultsNotesLabelComponent, SeriesDefaultsTooltipComponent, SeriesDrilldownTemplateDirective, SeriesErrorBarsComponent, SeriesExtremesComponent, SeriesHighlightComponent, SeriesItemComponent, SeriesLabelsComponent, SeriesLabelsFromComponent, SeriesLabelsToComponent, SeriesMarkersComponent, SeriesNotesComponent, SeriesNotesIconComponent, SeriesNotesLabelComponent, SeriesOutliersComponent, SeriesTooltipComponent, SeriesTrendlineComponent, SeriesTrendlineForecastComponent, SubtitleComponent, TitleComponent, TooltipComponent, ValueAxisComponent, ValueAxisCrosshairComponent, ValueAxisCrosshairTooltipComponent, ValueAxisItemComponent, ValueAxisLabelsComponent, ValueAxisNotesComponent, ValueAxisNotesIconComponent, ValueAxisNotesLabelComponent, ValueAxisTitleComponent] });
    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: ChartModule, providers: [IconsService, ResizeBatchService, PopupService, ThemeService], imports: [ChartComponent, ChartBreadcrumbComponent] });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: ChartModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [...KENDO_CHART],
                    exports: [...KENDO_CHART],
                    providers: [IconsService, ResizeBatchService, PopupService, ThemeService]
                }]
        }] });

//IMPORTANT: NgModule export kept for backwards compatibility
/**
 * Represents the Kendo UI for Angular StockChart module that includes the StockChart component and directives.
 *
 * Import the `StockChartModule` into your application
 * [root module](link:site.data.urls.angular['ngmodules']#angular-modularity) or any other sub-module
 * that uses the StockChart component.
 *
 * @example
 * ```ts
 * import { NgModule } from '@angular/core';
 * import { BrowserModule } from '@angular/platform-browser';
 * import { StockChartModule } from '@progress/kendo-angular-charts';
 * import { AppComponent } from './app.component';
 *
 * @NgModule({
 *     bootstrap:    [AppComponent],
 *     declarations: [AppComponent],
 *     imports:      [BrowserModule, StockChartModule]
 * })
 * export class AppModule {
 * }
 * ```
 */
class StockChartModule {
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: StockChartModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "16.2.12", ngImport: i0, type: StockChartModule, imports: [StockChartComponent, NavigatorComponent, NavigatorCategoryAxisComponent, NavigatorCategoryAxisCrosshairComponent, NavigatorCategoryAxisCrosshairTooltipComponent, NavigatorCategoryAxisLabelsComponent, NavigatorCategoryAxisNotesComponent, NavigatorCategoryAxisNotesIconComponent, NavigatorCategoryAxisNotesLabelComponent, NavigatorCategoryAxisSelectComponent, NavigatorCategoryAxisTitleComponent, NavigatorHintComponent, NavigatorPaneComponent, NavigatorPaneTitleComponent, NavigatorSelectComponent, NavigatorSeriesComponent, NavigatorSeriesItemComponent, NavigatorSeriesErrorBarsComponent, NavigatorSeriesExtremesComponent, NavigatorSeriesHighlightComponent, NavigatorSeriesLabelsComponent, NavigatorSeriesLabelsFromComponent, NavigatorSeriesLabelsToComponent, NavigatorSeriesMarkersComponent, NavigatorSeriesNotesComponent, NavigatorSeriesNotesIconComponent, NavigatorSeriesNotesLabelComponent, NavigatorSeriesOutliersComponent, NavigatorSeriesTooltipComponent, TooltipPopupComponent, SeriesTooltipTemplateDirective, SharedTooltipTemplateDirective, CrosshairTooltipsContainerComponent, CrosshairTooltipComponent, AxisDefaultsComponent, AxisDefaultsCrosshairComponent, AxisDefaultsCrosshairTooltipComponent, AxisDefaultsLabelsComponent, AxisDefaultsTitleComponent, CategoryAxisComponent, CategoryAxisCrosshairComponent, CategoryAxisCrosshairTooltipComponent, CategoryAxisItemComponent, CategoryAxisLabelsComponent, CategoryAxisRangeLabelsComponent, CategoryAxisNotesComponent, CategoryAxisNotesIconComponent, CategoryAxisNotesLabelComponent, CategoryAxisSelectComponent, CategoryAxisTitleComponent, ChartAreaComponent, ChartBreadcrumbComponent, LegendComponent, LegendInactiveItemsComponent, LegendItemComponent, PaneComponent, PaneDefaultsComponent, PaneDefaultsTitleComponent, PanesComponent, PanesTitleComponent, PlotAreaComponent, SeriesComponent, SeriesDefaultsComponent, SeriesDefaultsLabelsComponent, SeriesDefaultsLabelsFromComponent, SeriesDefaultsLabelsToComponent, SeriesDefaultsNotesComponent, SeriesDefaultsNotesIconComponent, SeriesDefaultsNotesLabelComponent, SeriesDefaultsTooltipComponent, SeriesDrilldownTemplateDirective, SeriesErrorBarsComponent, SeriesExtremesComponent, SeriesHighlightComponent, SeriesItemComponent, SeriesLabelsComponent, SeriesLabelsFromComponent, SeriesLabelsToComponent, SeriesMarkersComponent, SeriesNotesComponent, SeriesNotesIconComponent, SeriesNotesLabelComponent, SeriesOutliersComponent, SeriesTooltipComponent, SeriesTrendlineComponent, SeriesTrendlineForecastComponent, SubtitleComponent, TitleComponent, TooltipComponent, ValueAxisComponent, ValueAxisCrosshairComponent, ValueAxisCrosshairTooltipComponent, ValueAxisItemComponent, ValueAxisLabelsComponent, ValueAxisNotesComponent, ValueAxisNotesIconComponent, ValueAxisNotesLabelComponent, ValueAxisTitleComponent, ChartComponent, DonutCenterTemplateDirective, NoDataTemplateDirective, XAxisComponent, XAxisCrosshairComponent, XAxisCrosshairTooltipComponent, XAxisItemComponent, XAxisLabelsComponent, XAxisNotesComponent, XAxisNotesIconComponent, XAxisNotesLabelComponent, XAxisTitleComponent, YAxisComponent, YAxisCrosshairComponent, YAxisCrosshairTooltipComponent, YAxisItemComponent, YAxisLabelsComponent, YAxisNotesComponent, YAxisNotesIconComponent, YAxisNotesLabelComponent, YAxisTitleComponent, ZoomableComponent, TooltipPopupComponent, SeriesTooltipTemplateDirective, SharedTooltipTemplateDirective, CrosshairTooltipsContainerComponent, CrosshairTooltipComponent, AxisDefaultsComponent, AxisDefaultsCrosshairComponent, AxisDefaultsCrosshairTooltipComponent, AxisDefaultsLabelsComponent, AxisDefaultsTitleComponent, CategoryAxisComponent, CategoryAxisCrosshairComponent, CategoryAxisCrosshairTooltipComponent, CategoryAxisItemComponent, CategoryAxisLabelsComponent, CategoryAxisRangeLabelsComponent, CategoryAxisNotesComponent, CategoryAxisNotesIconComponent, CategoryAxisNotesLabelComponent, CategoryAxisSelectComponent, CategoryAxisTitleComponent, ChartAreaComponent, ChartBreadcrumbComponent, ChartCustomMessagesComponent, LocalizedChartMessagesDirective, LegendComponent, LegendInactiveItemsComponent, LegendItemComponent, PaneComponent, PaneDefaultsComponent, PaneDefaultsTitleComponent, PanesComponent, PanesTitleComponent, PlotAreaComponent, SeriesComponent, SeriesDefaultsComponent, SeriesDefaultsLabelsComponent, SeriesDefaultsLabelsFromComponent, SeriesDefaultsLabelsToComponent, SeriesDefaultsNotesComponent, SeriesDefaultsNotesIconComponent, SeriesDefaultsNotesLabelComponent, SeriesDefaultsTooltipComponent, SeriesDrilldownTemplateDirective, SeriesErrorBarsComponent, SeriesExtremesComponent, SeriesHighlightComponent, SeriesItemComponent, SeriesLabelsComponent, SeriesLabelsFromComponent, SeriesLabelsToComponent, SeriesMarkersComponent, SeriesNotesComponent, SeriesNotesIconComponent, SeriesNotesLabelComponent, SeriesOutliersComponent, SeriesTooltipComponent, SeriesTrendlineComponent, SeriesTrendlineForecastComponent, SubtitleComponent, TitleComponent, TooltipComponent, ValueAxisComponent, ValueAxisCrosshairComponent, ValueAxisCrosshairTooltipComponent, ValueAxisItemComponent, ValueAxisLabelsComponent, ValueAxisNotesComponent, ValueAxisNotesIconComponent, ValueAxisNotesLabelComponent, ValueAxisTitleComponent], exports: [StockChartComponent, NavigatorComponent, NavigatorCategoryAxisComponent, NavigatorCategoryAxisCrosshairComponent, NavigatorCategoryAxisCrosshairTooltipComponent, NavigatorCategoryAxisLabelsComponent, NavigatorCategoryAxisNotesComponent, NavigatorCategoryAxisNotesIconComponent, NavigatorCategoryAxisNotesLabelComponent, NavigatorCategoryAxisSelectComponent, NavigatorCategoryAxisTitleComponent, NavigatorHintComponent, NavigatorPaneComponent, NavigatorPaneTitleComponent, NavigatorSelectComponent, NavigatorSeriesComponent, NavigatorSeriesItemComponent, NavigatorSeriesErrorBarsComponent, NavigatorSeriesExtremesComponent, NavigatorSeriesHighlightComponent, NavigatorSeriesLabelsComponent, NavigatorSeriesLabelsFromComponent, NavigatorSeriesLabelsToComponent, NavigatorSeriesMarkersComponent, NavigatorSeriesNotesComponent, NavigatorSeriesNotesIconComponent, NavigatorSeriesNotesLabelComponent, NavigatorSeriesOutliersComponent, NavigatorSeriesTooltipComponent, TooltipPopupComponent, SeriesTooltipTemplateDirective, SharedTooltipTemplateDirective, CrosshairTooltipsContainerComponent, CrosshairTooltipComponent, AxisDefaultsComponent, AxisDefaultsCrosshairComponent, AxisDefaultsCrosshairTooltipComponent, AxisDefaultsLabelsComponent, AxisDefaultsTitleComponent, CategoryAxisComponent, CategoryAxisCrosshairComponent, CategoryAxisCrosshairTooltipComponent, CategoryAxisItemComponent, CategoryAxisLabelsComponent, CategoryAxisRangeLabelsComponent, CategoryAxisNotesComponent, CategoryAxisNotesIconComponent, CategoryAxisNotesLabelComponent, CategoryAxisSelectComponent, CategoryAxisTitleComponent, ChartAreaComponent, ChartBreadcrumbComponent, LegendComponent, LegendInactiveItemsComponent, LegendItemComponent, PaneComponent, PaneDefaultsComponent, PaneDefaultsTitleComponent, PanesComponent, PanesTitleComponent, PlotAreaComponent, SeriesComponent, SeriesDefaultsComponent, SeriesDefaultsLabelsComponent, SeriesDefaultsLabelsFromComponent, SeriesDefaultsLabelsToComponent, SeriesDefaultsNotesComponent, SeriesDefaultsNotesIconComponent, SeriesDefaultsNotesLabelComponent, SeriesDefaultsTooltipComponent, SeriesDrilldownTemplateDirective, SeriesErrorBarsComponent, SeriesExtremesComponent, SeriesHighlightComponent, SeriesItemComponent, SeriesLabelsComponent, SeriesLabelsFromComponent, SeriesLabelsToComponent, SeriesMarkersComponent, SeriesNotesComponent, SeriesNotesIconComponent, SeriesNotesLabelComponent, SeriesOutliersComponent, SeriesTooltipComponent, SeriesTrendlineComponent, SeriesTrendlineForecastComponent, SubtitleComponent, TitleComponent, TooltipComponent, ValueAxisComponent, ValueAxisCrosshairComponent, ValueAxisCrosshairTooltipComponent, ValueAxisItemComponent, ValueAxisLabelsComponent, ValueAxisNotesComponent, ValueAxisNotesIconComponent, ValueAxisNotesLabelComponent, ValueAxisTitleComponent, ChartComponent, DonutCenterTemplateDirective, NoDataTemplateDirective, XAxisComponent, XAxisCrosshairComponent, XAxisCrosshairTooltipComponent, XAxisItemComponent, XAxisLabelsComponent, XAxisNotesComponent, XAxisNotesIconComponent, XAxisNotesLabelComponent, XAxisTitleComponent, YAxisComponent, YAxisCrosshairComponent, YAxisCrosshairTooltipComponent, YAxisItemComponent, YAxisLabelsComponent, YAxisNotesComponent, YAxisNotesIconComponent, YAxisNotesLabelComponent, YAxisTitleComponent, ZoomableComponent, TooltipPopupComponent, SeriesTooltipTemplateDirective, SharedTooltipTemplateDirective, CrosshairTooltipsContainerComponent, CrosshairTooltipComponent, AxisDefaultsComponent, AxisDefaultsCrosshairComponent, AxisDefaultsCrosshairTooltipComponent, AxisDefaultsLabelsComponent, AxisDefaultsTitleComponent, CategoryAxisComponent, CategoryAxisCrosshairComponent, CategoryAxisCrosshairTooltipComponent, CategoryAxisItemComponent, CategoryAxisLabelsComponent, CategoryAxisRangeLabelsComponent, CategoryAxisNotesComponent, CategoryAxisNotesIconComponent, CategoryAxisNotesLabelComponent, CategoryAxisSelectComponent, CategoryAxisTitleComponent, ChartAreaComponent, ChartBreadcrumbComponent, ChartCustomMessagesComponent, LocalizedChartMessagesDirective, LegendComponent, LegendInactiveItemsComponent, LegendItemComponent, PaneComponent, PaneDefaultsComponent, PaneDefaultsTitleComponent, PanesComponent, PanesTitleComponent, PlotAreaComponent, SeriesComponent, SeriesDefaultsComponent, SeriesDefaultsLabelsComponent, SeriesDefaultsLabelsFromComponent, SeriesDefaultsLabelsToComponent, SeriesDefaultsNotesComponent, SeriesDefaultsNotesIconComponent, SeriesDefaultsNotesLabelComponent, SeriesDefaultsTooltipComponent, SeriesDrilldownTemplateDirective, SeriesErrorBarsComponent, SeriesExtremesComponent, SeriesHighlightComponent, SeriesItemComponent, SeriesLabelsComponent, SeriesLabelsFromComponent, SeriesLabelsToComponent, SeriesMarkersComponent, SeriesNotesComponent, SeriesNotesIconComponent, SeriesNotesLabelComponent, SeriesOutliersComponent, SeriesTooltipComponent, SeriesTrendlineComponent, SeriesTrendlineForecastComponent, SubtitleComponent, TitleComponent, TooltipComponent, ValueAxisComponent, ValueAxisCrosshairComponent, ValueAxisCrosshairTooltipComponent, ValueAxisItemComponent, ValueAxisLabelsComponent, ValueAxisNotesComponent, ValueAxisNotesIconComponent, ValueAxisNotesLabelComponent, ValueAxisTitleComponent] });
    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: StockChartModule, providers: [ThemeService, IconsService, PopupService, ResizeBatchService], imports: [StockChartComponent, ChartBreadcrumbComponent, ChartComponent, ChartBreadcrumbComponent] });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: StockChartModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [...KENDO_STOCKCHART, ...KENDO_CHART],
                    exports: [...KENDO_STOCKCHART, ...KENDO_CHART],
                    providers: [ThemeService, IconsService, PopupService, ResizeBatchService]
                }]
        }] });

//IMPORTANT: NgModule export kept for backwards compatibility
/**
 * Represents the Kendo UI for Angular Sparkline module that includes the Sparkline component and directives.
 *
 * Import the `SparklineModule` into your application
 * [root module](link:site.data.urls.angular['ngmodules']#angular-modularity) or any other sub-module
 * that uses the Sparkline component.
 *
 * @example
 * ```ts
 * import { NgModule } from '@angular/core';
 * import { BrowserModule } from '@angular/platform-browser';
 * import { SparklineModule } from '@progress/kendo-angular-charts';
 * import { AppComponent } from './app.component';
 *
 * @NgModule({
 *     bootstrap:    [AppComponent],
 *     declarations: [AppComponent],
 *     imports:      [BrowserModule, SparklineModule]
 * })
 * export class AppModule {
 * }
 * ```
 */
class SparklineModule {
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: SparklineModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "16.2.12", ngImport: i0, type: SparklineModule, imports: [SparklineComponent, ChartComponent, DonutCenterTemplateDirective, NoDataTemplateDirective, XAxisComponent, XAxisCrosshairComponent, XAxisCrosshairTooltipComponent, XAxisItemComponent, XAxisLabelsComponent, XAxisNotesComponent, XAxisNotesIconComponent, XAxisNotesLabelComponent, XAxisTitleComponent, YAxisComponent, YAxisCrosshairComponent, YAxisCrosshairTooltipComponent, YAxisItemComponent, YAxisLabelsComponent, YAxisNotesComponent, YAxisNotesIconComponent, YAxisNotesLabelComponent, YAxisTitleComponent, ZoomableComponent, TooltipPopupComponent, SeriesTooltipTemplateDirective, SharedTooltipTemplateDirective, CrosshairTooltipsContainerComponent, CrosshairTooltipComponent, AxisDefaultsComponent, AxisDefaultsCrosshairComponent, AxisDefaultsCrosshairTooltipComponent, AxisDefaultsLabelsComponent, AxisDefaultsTitleComponent, CategoryAxisComponent, CategoryAxisCrosshairComponent, CategoryAxisCrosshairTooltipComponent, CategoryAxisItemComponent, CategoryAxisLabelsComponent, CategoryAxisRangeLabelsComponent, CategoryAxisNotesComponent, CategoryAxisNotesIconComponent, CategoryAxisNotesLabelComponent, CategoryAxisSelectComponent, CategoryAxisTitleComponent, ChartAreaComponent, ChartBreadcrumbComponent, ChartCustomMessagesComponent, LocalizedChartMessagesDirective, LegendComponent, LegendInactiveItemsComponent, LegendItemComponent, PaneComponent, PaneDefaultsComponent, PaneDefaultsTitleComponent, PanesComponent, PanesTitleComponent, PlotAreaComponent, SeriesComponent, SeriesDefaultsComponent, SeriesDefaultsLabelsComponent, SeriesDefaultsLabelsFromComponent, SeriesDefaultsLabelsToComponent, SeriesDefaultsNotesComponent, SeriesDefaultsNotesIconComponent, SeriesDefaultsNotesLabelComponent, SeriesDefaultsTooltipComponent, SeriesDrilldownTemplateDirective, SeriesErrorBarsComponent, SeriesExtremesComponent, SeriesHighlightComponent, SeriesItemComponent, SeriesLabelsComponent, SeriesLabelsFromComponent, SeriesLabelsToComponent, SeriesMarkersComponent, SeriesNotesComponent, SeriesNotesIconComponent, SeriesNotesLabelComponent, SeriesOutliersComponent, SeriesTooltipComponent, SeriesTrendlineComponent, SeriesTrendlineForecastComponent, SubtitleComponent, TitleComponent, TooltipComponent, ValueAxisComponent, ValueAxisCrosshairComponent, ValueAxisCrosshairTooltipComponent, ValueAxisItemComponent, ValueAxisLabelsComponent, ValueAxisNotesComponent, ValueAxisNotesIconComponent, ValueAxisNotesLabelComponent, ValueAxisTitleComponent], exports: [SparklineComponent, ChartComponent, DonutCenterTemplateDirective, NoDataTemplateDirective, XAxisComponent, XAxisCrosshairComponent, XAxisCrosshairTooltipComponent, XAxisItemComponent, XAxisLabelsComponent, XAxisNotesComponent, XAxisNotesIconComponent, XAxisNotesLabelComponent, XAxisTitleComponent, YAxisComponent, YAxisCrosshairComponent, YAxisCrosshairTooltipComponent, YAxisItemComponent, YAxisLabelsComponent, YAxisNotesComponent, YAxisNotesIconComponent, YAxisNotesLabelComponent, YAxisTitleComponent, ZoomableComponent, TooltipPopupComponent, SeriesTooltipTemplateDirective, SharedTooltipTemplateDirective, CrosshairTooltipsContainerComponent, CrosshairTooltipComponent, AxisDefaultsComponent, AxisDefaultsCrosshairComponent, AxisDefaultsCrosshairTooltipComponent, AxisDefaultsLabelsComponent, AxisDefaultsTitleComponent, CategoryAxisComponent, CategoryAxisCrosshairComponent, CategoryAxisCrosshairTooltipComponent, CategoryAxisItemComponent, CategoryAxisLabelsComponent, CategoryAxisRangeLabelsComponent, CategoryAxisNotesComponent, CategoryAxisNotesIconComponent, CategoryAxisNotesLabelComponent, CategoryAxisSelectComponent, CategoryAxisTitleComponent, ChartAreaComponent, ChartBreadcrumbComponent, ChartCustomMessagesComponent, LocalizedChartMessagesDirective, LegendComponent, LegendInactiveItemsComponent, LegendItemComponent, PaneComponent, PaneDefaultsComponent, PaneDefaultsTitleComponent, PanesComponent, PanesTitleComponent, PlotAreaComponent, SeriesComponent, SeriesDefaultsComponent, SeriesDefaultsLabelsComponent, SeriesDefaultsLabelsFromComponent, SeriesDefaultsLabelsToComponent, SeriesDefaultsNotesComponent, SeriesDefaultsNotesIconComponent, SeriesDefaultsNotesLabelComponent, SeriesDefaultsTooltipComponent, SeriesDrilldownTemplateDirective, SeriesErrorBarsComponent, SeriesExtremesComponent, SeriesHighlightComponent, SeriesItemComponent, SeriesLabelsComponent, SeriesLabelsFromComponent, SeriesLabelsToComponent, SeriesMarkersComponent, SeriesNotesComponent, SeriesNotesIconComponent, SeriesNotesLabelComponent, SeriesOutliersComponent, SeriesTooltipComponent, SeriesTrendlineComponent, SeriesTrendlineForecastComponent, SubtitleComponent, TitleComponent, TooltipComponent, ValueAxisComponent, ValueAxisCrosshairComponent, ValueAxisCrosshairTooltipComponent, ValueAxisItemComponent, ValueAxisLabelsComponent, ValueAxisNotesComponent, ValueAxisNotesIconComponent, ValueAxisNotesLabelComponent, ValueAxisTitleComponent] });
    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: SparklineModule, providers: [ThemeService, IconsService, PopupService, ResizeBatchService], imports: [KENDO_SPARKLINE, ChartComponent, ChartBreadcrumbComponent] });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: SparklineModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [...KENDO_SPARKLINE, ...KENDO_CHART],
                    exports: [...KENDO_SPARKLINE, ...KENDO_CHART],
                    providers: [ThemeService, IconsService, PopupService, ResizeBatchService]
                }]
        }] });

//IMPORTANT: NgModule export kept for backwards compatibility
/**
 * Represents the Kendo UI for Angular Charts module that includes all Chart components and directives.
 *
 * Import the `ChartsModule` into your application
 * [root module](link:site.data.urls.angular['ngmodules']#angular-modularity) or any other sub-module
 * that uses the Charts components.
 *
 * @example
 * ```ts
 * import { NgModule } from '@angular/core';
 * import { BrowserModule } from '@angular/platform-browser';
 * import { ChartsModule } from '@progress/kendo-angular-charts';
 * import { AppComponent } from './app.component';
 *
 * @NgModule({
 *     bootstrap:    [AppComponent],
 *     declarations: [AppComponent],
 *     imports:      [BrowserModule, ChartsModule]
 * })
 * export class AppModule {
 * }
 * ```
 */
class ChartsModule {
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: ChartsModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "16.2.12", ngImport: i0, type: ChartsModule, imports: [ChartComponent, DonutCenterTemplateDirective, NoDataTemplateDirective, XAxisComponent, XAxisCrosshairComponent, XAxisCrosshairTooltipComponent, XAxisItemComponent, XAxisLabelsComponent, XAxisNotesComponent, XAxisNotesIconComponent, XAxisNotesLabelComponent, XAxisTitleComponent, YAxisComponent, YAxisCrosshairComponent, YAxisCrosshairTooltipComponent, YAxisItemComponent, YAxisLabelsComponent, YAxisNotesComponent, YAxisNotesIconComponent, YAxisNotesLabelComponent, YAxisTitleComponent, ZoomableComponent, TooltipPopupComponent, SeriesTooltipTemplateDirective, SharedTooltipTemplateDirective, CrosshairTooltipsContainerComponent, CrosshairTooltipComponent, AxisDefaultsComponent, AxisDefaultsCrosshairComponent, AxisDefaultsCrosshairTooltipComponent, AxisDefaultsLabelsComponent, AxisDefaultsTitleComponent, CategoryAxisComponent, CategoryAxisCrosshairComponent, CategoryAxisCrosshairTooltipComponent, CategoryAxisItemComponent, CategoryAxisLabelsComponent, CategoryAxisRangeLabelsComponent, CategoryAxisNotesComponent, CategoryAxisNotesIconComponent, CategoryAxisNotesLabelComponent, CategoryAxisSelectComponent, CategoryAxisTitleComponent, ChartAreaComponent, ChartBreadcrumbComponent, ChartCustomMessagesComponent, LocalizedChartMessagesDirective, LegendComponent, LegendInactiveItemsComponent, LegendItemComponent, PaneComponent, PaneDefaultsComponent, PaneDefaultsTitleComponent, PanesComponent, PanesTitleComponent, PlotAreaComponent, SeriesComponent, SeriesDefaultsComponent, SeriesDefaultsLabelsComponent, SeriesDefaultsLabelsFromComponent, SeriesDefaultsLabelsToComponent, SeriesDefaultsNotesComponent, SeriesDefaultsNotesIconComponent, SeriesDefaultsNotesLabelComponent, SeriesDefaultsTooltipComponent, SeriesDrilldownTemplateDirective, SeriesErrorBarsComponent, SeriesExtremesComponent, SeriesHighlightComponent, SeriesItemComponent, SeriesLabelsComponent, SeriesLabelsFromComponent, SeriesLabelsToComponent, SeriesMarkersComponent, SeriesNotesComponent, SeriesNotesIconComponent, SeriesNotesLabelComponent, SeriesOutliersComponent, SeriesTooltipComponent, SeriesTrendlineComponent, SeriesTrendlineForecastComponent, SubtitleComponent, TitleComponent, TooltipComponent, ValueAxisComponent, ValueAxisCrosshairComponent, ValueAxisCrosshairTooltipComponent, ValueAxisItemComponent, ValueAxisLabelsComponent, ValueAxisNotesComponent, ValueAxisNotesIconComponent, ValueAxisNotesLabelComponent, ValueAxisTitleComponent, SparklineComponent, StockChartComponent, NavigatorComponent, NavigatorCategoryAxisComponent, NavigatorCategoryAxisCrosshairComponent, NavigatorCategoryAxisCrosshairTooltipComponent, NavigatorCategoryAxisLabelsComponent, NavigatorCategoryAxisNotesComponent, NavigatorCategoryAxisNotesIconComponent, NavigatorCategoryAxisNotesLabelComponent, NavigatorCategoryAxisSelectComponent, NavigatorCategoryAxisTitleComponent, NavigatorHintComponent, NavigatorPaneComponent, NavigatorPaneTitleComponent, NavigatorSelectComponent, NavigatorSeriesComponent, NavigatorSeriesItemComponent, NavigatorSeriesErrorBarsComponent, NavigatorSeriesExtremesComponent, NavigatorSeriesHighlightComponent, NavigatorSeriesLabelsComponent, NavigatorSeriesLabelsFromComponent, NavigatorSeriesLabelsToComponent, NavigatorSeriesMarkersComponent, NavigatorSeriesNotesComponent, NavigatorSeriesNotesIconComponent, NavigatorSeriesNotesLabelComponent, NavigatorSeriesOutliersComponent, NavigatorSeriesTooltipComponent, TooltipPopupComponent, SeriesTooltipTemplateDirective, SharedTooltipTemplateDirective, CrosshairTooltipsContainerComponent, CrosshairTooltipComponent, AxisDefaultsComponent, AxisDefaultsCrosshairComponent, AxisDefaultsCrosshairTooltipComponent, AxisDefaultsLabelsComponent, AxisDefaultsTitleComponent, CategoryAxisComponent, CategoryAxisCrosshairComponent, CategoryAxisCrosshairTooltipComponent, CategoryAxisItemComponent, CategoryAxisLabelsComponent, CategoryAxisRangeLabelsComponent, CategoryAxisNotesComponent, CategoryAxisNotesIconComponent, CategoryAxisNotesLabelComponent, CategoryAxisSelectComponent, CategoryAxisTitleComponent, ChartAreaComponent, ChartBreadcrumbComponent, LegendComponent, LegendInactiveItemsComponent, LegendItemComponent, PaneComponent, PaneDefaultsComponent, PaneDefaultsTitleComponent, PanesComponent, PanesTitleComponent, PlotAreaComponent, SeriesComponent, SeriesDefaultsComponent, SeriesDefaultsLabelsComponent, SeriesDefaultsLabelsFromComponent, SeriesDefaultsLabelsToComponent, SeriesDefaultsNotesComponent, SeriesDefaultsNotesIconComponent, SeriesDefaultsNotesLabelComponent, SeriesDefaultsTooltipComponent, SeriesDrilldownTemplateDirective, SeriesErrorBarsComponent, SeriesExtremesComponent, SeriesHighlightComponent, SeriesItemComponent, SeriesLabelsComponent, SeriesLabelsFromComponent, SeriesLabelsToComponent, SeriesMarkersComponent, SeriesNotesComponent, SeriesNotesIconComponent, SeriesNotesLabelComponent, SeriesOutliersComponent, SeriesTooltipComponent, SeriesTrendlineComponent, SeriesTrendlineForecastComponent, SubtitleComponent, TitleComponent, TooltipComponent, ValueAxisComponent, ValueAxisCrosshairComponent, ValueAxisCrosshairTooltipComponent, ValueAxisItemComponent, ValueAxisLabelsComponent, ValueAxisNotesComponent, ValueAxisNotesIconComponent, ValueAxisNotesLabelComponent, ValueAxisTitleComponent, SankeyComponent, SankeyTooltipPopupComponent, SankeyLinkTooltipTemplateDirective, SankeyNodeTooltipTemplateDirective, SankeyCustomMessagesComponent, LocalizedMessagesDirective, SankeyTitleComponent, SankeyLegendComponent, SankeyTooltipComponent, SankeyLinksComponent, SankeyNodesComponent, SankeyLabelsComponent, SankeyFlatBindingDirective], exports: [ChartComponent, DonutCenterTemplateDirective, NoDataTemplateDirective, XAxisComponent, XAxisCrosshairComponent, XAxisCrosshairTooltipComponent, XAxisItemComponent, XAxisLabelsComponent, XAxisNotesComponent, XAxisNotesIconComponent, XAxisNotesLabelComponent, XAxisTitleComponent, YAxisComponent, YAxisCrosshairComponent, YAxisCrosshairTooltipComponent, YAxisItemComponent, YAxisLabelsComponent, YAxisNotesComponent, YAxisNotesIconComponent, YAxisNotesLabelComponent, YAxisTitleComponent, ZoomableComponent, TooltipPopupComponent, SeriesTooltipTemplateDirective, SharedTooltipTemplateDirective, CrosshairTooltipsContainerComponent, CrosshairTooltipComponent, AxisDefaultsComponent, AxisDefaultsCrosshairComponent, AxisDefaultsCrosshairTooltipComponent, AxisDefaultsLabelsComponent, AxisDefaultsTitleComponent, CategoryAxisComponent, CategoryAxisCrosshairComponent, CategoryAxisCrosshairTooltipComponent, CategoryAxisItemComponent, CategoryAxisLabelsComponent, CategoryAxisRangeLabelsComponent, CategoryAxisNotesComponent, CategoryAxisNotesIconComponent, CategoryAxisNotesLabelComponent, CategoryAxisSelectComponent, CategoryAxisTitleComponent, ChartAreaComponent, ChartBreadcrumbComponent, ChartCustomMessagesComponent, LocalizedChartMessagesDirective, LegendComponent, LegendInactiveItemsComponent, LegendItemComponent, PaneComponent, PaneDefaultsComponent, PaneDefaultsTitleComponent, PanesComponent, PanesTitleComponent, PlotAreaComponent, SeriesComponent, SeriesDefaultsComponent, SeriesDefaultsLabelsComponent, SeriesDefaultsLabelsFromComponent, SeriesDefaultsLabelsToComponent, SeriesDefaultsNotesComponent, SeriesDefaultsNotesIconComponent, SeriesDefaultsNotesLabelComponent, SeriesDefaultsTooltipComponent, SeriesDrilldownTemplateDirective, SeriesErrorBarsComponent, SeriesExtremesComponent, SeriesHighlightComponent, SeriesItemComponent, SeriesLabelsComponent, SeriesLabelsFromComponent, SeriesLabelsToComponent, SeriesMarkersComponent, SeriesNotesComponent, SeriesNotesIconComponent, SeriesNotesLabelComponent, SeriesOutliersComponent, SeriesTooltipComponent, SeriesTrendlineComponent, SeriesTrendlineForecastComponent, SubtitleComponent, TitleComponent, TooltipComponent, ValueAxisComponent, ValueAxisCrosshairComponent, ValueAxisCrosshairTooltipComponent, ValueAxisItemComponent, ValueAxisLabelsComponent, ValueAxisNotesComponent, ValueAxisNotesIconComponent, ValueAxisNotesLabelComponent, ValueAxisTitleComponent, SparklineComponent, StockChartComponent, NavigatorComponent, NavigatorCategoryAxisComponent, NavigatorCategoryAxisCrosshairComponent, NavigatorCategoryAxisCrosshairTooltipComponent, NavigatorCategoryAxisLabelsComponent, NavigatorCategoryAxisNotesComponent, NavigatorCategoryAxisNotesIconComponent, NavigatorCategoryAxisNotesLabelComponent, NavigatorCategoryAxisSelectComponent, NavigatorCategoryAxisTitleComponent, NavigatorHintComponent, NavigatorPaneComponent, NavigatorPaneTitleComponent, NavigatorSelectComponent, NavigatorSeriesComponent, NavigatorSeriesItemComponent, NavigatorSeriesErrorBarsComponent, NavigatorSeriesExtremesComponent, NavigatorSeriesHighlightComponent, NavigatorSeriesLabelsComponent, NavigatorSeriesLabelsFromComponent, NavigatorSeriesLabelsToComponent, NavigatorSeriesMarkersComponent, NavigatorSeriesNotesComponent, NavigatorSeriesNotesIconComponent, NavigatorSeriesNotesLabelComponent, NavigatorSeriesOutliersComponent, NavigatorSeriesTooltipComponent, TooltipPopupComponent, SeriesTooltipTemplateDirective, SharedTooltipTemplateDirective, CrosshairTooltipsContainerComponent, CrosshairTooltipComponent, AxisDefaultsComponent, AxisDefaultsCrosshairComponent, AxisDefaultsCrosshairTooltipComponent, AxisDefaultsLabelsComponent, AxisDefaultsTitleComponent, CategoryAxisComponent, CategoryAxisCrosshairComponent, CategoryAxisCrosshairTooltipComponent, CategoryAxisItemComponent, CategoryAxisLabelsComponent, CategoryAxisRangeLabelsComponent, CategoryAxisNotesComponent, CategoryAxisNotesIconComponent, CategoryAxisNotesLabelComponent, CategoryAxisSelectComponent, CategoryAxisTitleComponent, ChartAreaComponent, ChartBreadcrumbComponent, LegendComponent, LegendInactiveItemsComponent, LegendItemComponent, PaneComponent, PaneDefaultsComponent, PaneDefaultsTitleComponent, PanesComponent, PanesTitleComponent, PlotAreaComponent, SeriesComponent, SeriesDefaultsComponent, SeriesDefaultsLabelsComponent, SeriesDefaultsLabelsFromComponent, SeriesDefaultsLabelsToComponent, SeriesDefaultsNotesComponent, SeriesDefaultsNotesIconComponent, SeriesDefaultsNotesLabelComponent, SeriesDefaultsTooltipComponent, SeriesDrilldownTemplateDirective, SeriesErrorBarsComponent, SeriesExtremesComponent, SeriesHighlightComponent, SeriesItemComponent, SeriesLabelsComponent, SeriesLabelsFromComponent, SeriesLabelsToComponent, SeriesMarkersComponent, SeriesNotesComponent, SeriesNotesIconComponent, SeriesNotesLabelComponent, SeriesOutliersComponent, SeriesTooltipComponent, SeriesTrendlineComponent, SeriesTrendlineForecastComponent, SubtitleComponent, TitleComponent, TooltipComponent, ValueAxisComponent, ValueAxisCrosshairComponent, ValueAxisCrosshairTooltipComponent, ValueAxisItemComponent, ValueAxisLabelsComponent, ValueAxisNotesComponent, ValueAxisNotesIconComponent, ValueAxisNotesLabelComponent, ValueAxisTitleComponent, SankeyComponent, SankeyTooltipPopupComponent, SankeyLinkTooltipTemplateDirective, SankeyNodeTooltipTemplateDirective, SankeyCustomMessagesComponent, LocalizedMessagesDirective, SankeyTitleComponent, SankeyLegendComponent, SankeyTooltipComponent, SankeyLinksComponent, SankeyNodesComponent, SankeyLabelsComponent, SankeyFlatBindingDirective] });
    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: ChartsModule, providers: [IconsService, ResizeBatchService, PopupService, ThemeService], imports: [ChartComponent, ChartBreadcrumbComponent, SparklineComponent, StockChartComponent, ChartBreadcrumbComponent, SankeyComponent, SankeyTooltipPopupComponent] });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: ChartsModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [...KENDO_CHARTS],
                    exports: [...KENDO_CHARTS],
                    providers: [IconsService, ResizeBatchService, PopupService, ThemeService]
                }]
        }] });

//IMPORTANT: NgModule export kept for backwards compatibility
/**
 * Represents the Kendo UI for Angular Sankey module that includes the Sankey component and directives.
 *
 * Import the `SankeyModule` into your application
 * [root module](link:site.data.urls.angular['ngmodules']#angular-modularity) or any other sub-module
 * that uses the Sankey component.
 *
 * @example
 * ```ts
 * import { NgModule } from '@angular/core';
 * import { BrowserModule } from '@angular/platform-browser';
 * import { SankeyModule } from '@progress/kendo-angular-charts';
 * import { AppComponent } from './app.component';
 *
 * @NgModule({
 *     bootstrap:    [AppComponent],
 *     declarations: [AppComponent],
 *     imports:      [BrowserModule, SankeyModule]
 * })
 * export class AppModule {
 * }
 * ```
 */
class SankeyModule {
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: SankeyModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "16.2.12", ngImport: i0, type: SankeyModule, imports: [SankeyComponent, SankeyTooltipPopupComponent, SankeyLinkTooltipTemplateDirective, SankeyNodeTooltipTemplateDirective, SankeyCustomMessagesComponent, LocalizedMessagesDirective, SankeyTitleComponent, SankeyLegendComponent, SankeyTooltipComponent, SankeyLinksComponent, SankeyNodesComponent, SankeyLabelsComponent, SankeyFlatBindingDirective], exports: [SankeyComponent, SankeyTooltipPopupComponent, SankeyLinkTooltipTemplateDirective, SankeyNodeTooltipTemplateDirective, SankeyCustomMessagesComponent, LocalizedMessagesDirective, SankeyTitleComponent, SankeyLegendComponent, SankeyTooltipComponent, SankeyLinksComponent, SankeyNodesComponent, SankeyLabelsComponent, SankeyFlatBindingDirective] });
    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: SankeyModule, providers: [IconsService, ResizeBatchService, PopupService, ThemeService], imports: [SankeyComponent, SankeyTooltipPopupComponent] });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: SankeyModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [...KENDO_SANKEY],
                    exports: [...KENDO_SANKEY],
                    providers: [IconsService, ResizeBatchService, PopupService, ThemeService]
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { AxisDefaultsComponent, AxisDefaultsCrosshairComponent, AxisDefaultsCrosshairTooltipComponent, AxisDefaultsLabelsComponent, AxisDefaultsTitleComponent, AxisLabelClickEvent, CategoryAxisComponent, CategoryAxisCrosshairComponent, CategoryAxisCrosshairTooltipComponent, CategoryAxisItemComponent, CategoryAxisLabelsComponent, CategoryAxisNotesComponent, CategoryAxisNotesIconComponent, CategoryAxisNotesLabelComponent, CategoryAxisRangeLabelsComponent, CategoryAxisSelectComponent, CategoryAxisTitleComponent, ChartAreaComponent, ChartBreadcrumbComponent, ChartComponent, ChartCustomMessagesComponent, ChartModule, ChartsModule, CollectionService, ConfigurationService, CrosshairTooltipComponent, CrosshairTooltipsContainerComponent, DonutCenterTemplateDirective, DragEndEvent, DragEvent, DragStartEvent, DrilldownEvent, InstanceEventService, KENDO_CHART, KENDO_CHARTS, KENDO_SANKEY, KENDO_SPARKLINE, KENDO_STOCKCHART, LegendComponent, LegendInactiveItemsComponent, LegendItemClickEvent, LegendItemComponent, LegendItemHoverEvent, LegendItemLeaveEvent, LocalizedChartMessagesDirective, LocalizedMessagesDirective, NavigatorCategoryAxisComponent, NavigatorCategoryAxisCrosshairComponent, NavigatorCategoryAxisCrosshairTooltipComponent, NavigatorCategoryAxisLabelsComponent, NavigatorCategoryAxisNotesComponent, NavigatorCategoryAxisNotesIconComponent, NavigatorCategoryAxisNotesLabelComponent, NavigatorCategoryAxisSelectComponent, NavigatorCategoryAxisTitleComponent, NavigatorComponent, NavigatorFilterEvent, NavigatorHintComponent, NavigatorPaneComponent, NavigatorPaneTitleComponent, NavigatorSelectComponent, NavigatorSeriesComponent, NavigatorSeriesErrorBarsComponent, NavigatorSeriesExtremesComponent, NavigatorSeriesHighlightComponent, NavigatorSeriesItemComponent, NavigatorSeriesLabelsComponent, NavigatorSeriesLabelsFromComponent, NavigatorSeriesLabelsToComponent, NavigatorSeriesMarkersComponent, NavigatorSeriesNotesComponent, NavigatorSeriesNotesIconComponent, NavigatorSeriesNotesLabelComponent, NavigatorSeriesOutliersComponent, NavigatorSeriesTooltipComponent, NoDataTemplateDirective, NoteClickEvent, NoteHoverEvent, PaneComponent, PaneDefaultsComponent, PaneDefaultsTitleComponent, PaneRenderEvent, PanesComponent, PanesTitleComponent, PlotAreaClickEvent, PlotAreaComponent, PlotAreaHoverEvent, RenderEvent, SankeyBaseEvent, SankeyComponent, SankeyCustomMessagesComponent, SankeyFlatBindingDataBoundEvent, SankeyFlatBindingDirective, SankeyLabelsComponent, SankeyLegendComponent, SankeyLinkEvent, SankeyLinkTooltipTemplateDirective, SankeyLinksComponent, SankeyModule, SankeyNodeEvent, SankeyNodeTooltipTemplateDirective, SankeyNodesComponent, SankeyTitleComponent, SankeyTooltipComponent, SankeyTooltipPopupComponent, SelectEndEvent, SelectEvent, SelectStartEvent, SeriesClickEvent, SeriesComponent, SeriesDefaultsComponent, SeriesDefaultsLabelsComponent, SeriesDefaultsLabelsFromComponent, SeriesDefaultsLabelsToComponent, SeriesDefaultsNotesComponent, SeriesDefaultsNotesIconComponent, SeriesDefaultsNotesLabelComponent, SeriesDefaultsTooltipComponent, SeriesDrilldownTemplateDirective, SeriesErrorBarsComponent, SeriesExtremesComponent, SeriesHighlightComponent, SeriesHoverEvent, SeriesItemComponent, SeriesLabelsComponent, SeriesLabelsFromComponent, SeriesLabelsToComponent, SeriesMarkersComponent, SeriesNotesComponent, SeriesNotesIconComponent, SeriesNotesLabelComponent, SeriesOutliersComponent, SeriesTooltipComponent, SeriesTooltipTemplateDirective, SeriesTrendlineComponent, SeriesTrendlineForecastComponent, SharedTooltipTemplateDirective, SparklineComponent, SparklineModule, StockChartComponent, StockChartModule, SubtitleComponent, ThemeService, TitleComponent, TooltipComponent, TooltipPopupComponent, TooltipTemplateService, ValueAxisComponent, ValueAxisCrosshairComponent, ValueAxisCrosshairTooltipComponent, ValueAxisItemComponent, ValueAxisLabelsComponent, ValueAxisNotesComponent, ValueAxisNotesIconComponent, ValueAxisNotesLabelComponent, ValueAxisTitleComponent, WeekStartDay, XAxisComponent, XAxisCrosshairComponent, XAxisCrosshairTooltipComponent, XAxisItemComponent, XAxisLabelsComponent, XAxisNotesComponent, XAxisNotesIconComponent, XAxisNotesLabelComponent, XAxisTitleComponent, YAxisComponent, YAxisCrosshairComponent, YAxisCrosshairTooltipComponent, YAxisItemComponent, YAxisLabelsComponent, YAxisNotesComponent, YAxisNotesIconComponent, YAxisNotesLabelComponent, YAxisTitleComponent, ZoomEndEvent, ZoomEvent, ZoomStartEvent, ZoomableComponent };

