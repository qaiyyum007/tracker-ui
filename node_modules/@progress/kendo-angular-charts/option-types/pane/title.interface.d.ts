/**-----------------------------------------------------------------------------------------
* Copyright Â© 2025 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { drawing } from '@progress/kendo-drawing';
import { Border, Margin } from '../../common/property-types';
/**
 * Represents the `panes.title` options.
 */
export interface PanesTitle {
    /**
     * Specifies the background color of the title. Accepts a valid CSS color string, including HEX and RGB.
     */
    background?: string;
    /**
     * Specifies the border of the title.
     */
    border?: Border;
    /**
     * Specifies the text color of the title. Accepts a valid CSS color string, including HEX and RGB.
     */
    color?: string;
    /**
     * Specifies the font style of the title.
     */
    font?: string;
    /**
     * Specifies the margin of the title. A numeric value sets all margins.
     */
    margin?: Margin | number;
    /**
     * Specifies the position of the title.
     *
     * You can set the positioning to `left` for left positioning, `right` for right positioning (both applicable to the horizontal axis), or `center` for positioning in the center.
     */
    position?: 'left' | 'right' | 'center';
    /**
     * Specifies the text of the title.
     * You can split the text into multiple lines by using line feed characters (`"\n"`).
     */
    text?: string;
    /**
     * Determines whether the Chart displays the pane title.
     * When set to `true`, the title is visible. By default, the pane title is visible.
     */
    visible?: boolean;
    /**
     * Specifies a function that can be used to create a custom visual for the title.
     *
     * The available argument fields are:
     *
     * - `text`&mdash;The label text.
     * - `rect`&mdash;The [geometry Rect]({% slug api_kendo-drawing_geometry_rect %}) that defines where the visual has to be rendered.
     * - `sender`&mdash;The Chart instance (might be `undefined`).
     * - `options`&mdash;The label options.
     * - `createVisual`&mdash;A function that can be used to get the default visual.
     */
    visual?: (e: any) => drawing.Element;
}
