/**-----------------------------------------------------------------------------------------
* Copyright Â© 2025 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { drawing } from '@progress/kendo-drawing';
import { AxisLabelContentArgs, AxisLabelsPosition, AxisLabelVisualArgs, Border, LabelRotation, Margin } from '../../common/property-types';
import { Padding } from '../../common/property-types';
/**
 * Represents the configuration options of the value axis labels.
 */
export interface ValueAxisLabels {
    /**
     * Specifies the background color of the labels. Accepts a valid CSS color string, including HEX and RGB.
     */
    background?: string;
    /**
     * Specifies the border of the labels.
     */
    border?: Border;
    /**
     * Specifies the text color of the labels. Accepts a valid CSS color string, including HEX and RGB.
     */
    color?: string;
    /**
     * Specifies a function which returns the label content.
     * Specifies the function argument contains a `value` field which defines the label value.
     * You can split the text into multiple lines by using the line feed characters (`"\n"`).
     */
    content?: (e: AxisLabelContentArgs) => string;
    /**
     * Specifies the font style of the labels.
     */
    font?: string;
    /**
     * Specifies the format for displaying the labels. Uses the [`format`]({% slug api_intl_intlservice %}#toc-format) method of IntlService.
     * Contains one placeholder (`"{0}"`) which represents the category value.
     */
    format?: string;
    /**
     * Specifies the margin of the labels. A numeric value sets all margins.
     */
    margin?: Margin | number;
    /**
     * If set to `true`, the Chart mirrors the axis labels and ticks. If the labels are normally on the
     * left side of the axis, the mirroring of the axis renders them to the right.
     */
    mirror?: boolean;
    /**
     * Specifies the padding of the labels. A numeric value sets all margins.
     */
    padding?: Padding | number;
    /**
     * Specifies the position of the axis labels. By default, labels are positioned next to the axis.
     * When `position` is set to `end`, the labels are placed at the end of the crossing axis, usually at the top or right end of the Chart unless the crossing axis has been reversed.
     * Alternatively, when the `position` property is set to `start`, the axis labels will be positioned at the beginning of the crossing axis, typically located at the left or bottom end of the Chart, unless the crossing axis has been reversed.
     */
    position?: AxisLabelsPosition;
    /**
     * Specifies the rotation angle (in degrees) of the labels. By default, the labels are not rotated. Angles
     * increase clockwise and zero is to the left. Negative values are acceptable. Can be set to `"auto"` if
     * the axis is horizontal. In this case, labels will be rotated only if the slot size is not
     * sufficient for the entire labels.
     */
    rotation?: LabelRotation | number | 'auto';
    /**
     * Specifies the number of labels to skip. By default, no labels are skipped.
     */
    skip?: number;
    /**
     * Specifies the label rendering step.
     * Every n<sup>th</sup> label is rendered where `n` is the step.
     */
    step?: number;
    /**
     * If set to `true`, the Chart displays the value axis labels.
     * By default, the category axis labels are visible.
     */
    visible?: boolean;
    /**
     * Specifies a function for creating custom visuals for the labels.
     */
    visual?: (e: AxisLabelVisualArgs) => drawing.Element;
}
