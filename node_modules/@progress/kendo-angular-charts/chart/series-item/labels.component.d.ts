/**-----------------------------------------------------------------------------------------
* Copyright © 2025 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { drawing } from '@progress/kendo-drawing';
import { ConfigurationService } from '../../common/configuration.service';
import { Border, Margin, Padding, SeriesLabelsAlignment, SeriesLabelsContentArgs, SeriesLabelsVisualArgs } from '../../common/property-types';
import { SeriesLabels, SeriesLabelsFrom, SeriesLabelsPosition, SeriesLabelsTo } from '../../common/property-types';
import { SettingsComponent } from '../../common/settings.component';
import * as i0 from "@angular/core";
/**
 * Represents the configuration of the Chart series labels
 * ([see example]({% slug labels_chart_charts %})).
 *
 * @example
 * ```html
 * <kendo-chart>
 *  <kendo-chart-series>
 *   <kendo-chart-series-item [data]="[1, 2, 3] type="line">
 *    <kendo-chart-series-item-labels format="c">
 *    </kendo-chart-series-item-labels>
 *  </kendo-chart-series-item>
 *  </kendo-chart-series>
 * </kendo-chart>
 * ```
 *
 * @remarks
 * Supported children components are: {@link SeriesLabelsFromComponent} and {@link SeriesLabelsToComponent}.
 */
export declare class SeriesLabelsComponent extends SettingsComponent implements SeriesLabels {
    configurationService: ConfigurationService;
    /**
     * Specifies the alignment of the labels.
     */
    align: SeriesLabelsAlignment;
    /**
     * Specifies the background color of the labels.
     */
    background: string;
    /**
     * Specifies the border configuration of the labels.
     */
    border: Border;
    /**
     * Specifies the text color of the labels.
     */
    color: string;
    /**
     * Specifies a function that returns the content of the labels.
     */
    content: (e: SeriesLabelsContentArgs) => string;
    /**
     * Specifies a function that returns the ARIA content of the labels.
     */
    ariaContent: (e: SeriesLabelsContentArgs) => string;
    /**
     * Specifies the distance between the labels when [`series.type`]({% slug api_charts_series %}#toc-type) is set to `"donut"` or `"pie"`.
     * @default 35
     */
    distance: number;
    /**
     * Specifies the font style of the labels.
     * @default '12px sans-serif'
     */
    font: string;
    /**
     * Specifies the format of the labels. Uses the [`format`]({% slug api_intl_intlservice %}#toc-format) method of the `IntlService`.
     * @default '{0}'
     */
    format: string;
    /**
     * Specifies the margin of the labels. A numeric value sets all margins.
     * @default 5
     */
    margin: Margin | number;
    /**
     * Specifies the padding of the labels. A numeric value sets all paddings.
     * Bar and Column series always apply full padding and ignore this setting.
     * @default 0
     */
    padding: Padding | number;
    /**
     * Specifies the position of the labels.
     */
    position: SeriesLabelsPosition;
    /**
     * Specifies the rotation angle of the labels.
     */
    rotation: number;
    /**
     * Determines whether the Chart displays the series labels.
     * @default false
     */
    visible: boolean;
    /**
     * Specifies a function that creates a custom visual for the labels.
     */
    visual: (e: SeriesLabelsVisualArgs) => drawing.Element;
    /**
     * Specifies the `from` labels configuration.
     */
    from: SeriesLabelsFrom;
    /**
     * Specifies the `to` labels configuration.
     */
    to: SeriesLabelsTo;
    constructor(configurationService: ConfigurationService);
    static ɵfac: i0.ɵɵFactoryDeclaration<SeriesLabelsComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<SeriesLabelsComponent, "kendo-chart-series-item-labels", never, { "align": { "alias": "align"; "required": false; }; "background": { "alias": "background"; "required": false; }; "border": { "alias": "border"; "required": false; }; "color": { "alias": "color"; "required": false; }; "content": { "alias": "content"; "required": false; }; "ariaContent": { "alias": "ariaContent"; "required": false; }; "distance": { "alias": "distance"; "required": false; }; "font": { "alias": "font"; "required": false; }; "format": { "alias": "format"; "required": false; }; "margin": { "alias": "margin"; "required": false; }; "padding": { "alias": "padding"; "required": false; }; "position": { "alias": "position"; "required": false; }; "rotation": { "alias": "rotation"; "required": false; }; "visible": { "alias": "visible"; "required": false; }; "visual": { "alias": "visual"; "required": false; }; "from": { "alias": "from"; "required": false; }; "to": { "alias": "to"; "required": false; }; }, {}, never, never, true, never>;
}
