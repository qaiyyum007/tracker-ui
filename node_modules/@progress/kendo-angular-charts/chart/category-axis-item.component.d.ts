/**-----------------------------------------------------------------------------------------
* Copyright © 2025 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { OnDestroy } from '@angular/core';
import { IntlService } from '@progress/kendo-angular-intl';
import { CollectionItemComponent } from '../common/collection-item.component';
import { CollectionService } from '../common/collection.service';
import { ConfigurationService } from '../common/configuration.service';
import { CategoryAxisRangeLabels } from '../common/property-types';
import { AutoBaseUnitSteps, AxisLine, AxisTicks, CategoryBaseUnit, GridLines, PlotBand, WeekStartDay } from '../common/property-types';
import { CategoryAxis, CategoryAxisCrosshair, CategoryAxisLabels, CategoryAxisNotes, CategoryAxisSelect, CategoryAxisTitle } from '../common/property-types';
import * as i0 from "@angular/core";
/**
 * Represents the configuration component for a category axis ([see example]({% slug axes_chart_charts %})).
 *
 * @remarks
 * Supported children components are: {@link CategoryAxisCrosshairComponent}, {@link CategoryAxisLabelsComponent},
 * {@link CategoryAxisNotesComponent}, {@link CategoryAxisSelectComponent}, {@link CategoryAxisTitleComponent}, and {@link CategoryAxisRangeLabelsComponent}.
 */
export declare class CategoryAxisItemComponent extends CollectionItemComponent implements CategoryAxis, OnDestroy {
    protected configurationService: ConfigurationService;
    protected collectionService: CollectionService;
    private intl;
    /**
     * Specifies the automatic base unit steps configuration.
     */
    autoBaseUnitSteps: AutoBaseUnitSteps;
    /**
     * Specifies the axis crossing value or values.
     */
    axisCrossingValue: any | any[];
    /**
     * Specifies the background color of the axis.
     */
    background: string;
    /**
     * Specifies the base unit of the axis.
     */
    baseUnit: CategoryBaseUnit;
    /**
     * Specifies the base unit step of the axis.
     */
    baseUnitStep: number | 'auto';
    /**
     * Specifies the categories for the axis.
     */
    categories: any[];
    /**
     * Specifies the color of the axis.
     */
    color: string;
    /**
     * Determines whether the axis is justified.
     */
    justified: boolean;
    /**
     * Specifies the line configuration of the axis.
     */
    line: AxisLine;
    /**
     * Specifies the major grid lines configuration of the axis.
     */
    majorGridLines: GridLines;
    /**
     * Specifies the major ticks configuration of the axis.
     */
    majorTicks: AxisTicks;
    /**
     * Specifies the maximum value of the axis.
     */
    max: any;
    /**
     * Specifies the maximum number of groups (categories) to display when
     * [`categoryAxis.baseUnit`]({% slug api_charts_categoryaxis %}#toc-baseunit) is set to `"fit"` or
     * [`categoryAxis.baseUnitStep`]({% slug api_charts_categoryaxis %}#toc-baseunitstep) is set to `"auto"`.
     * @default 10
     */
    maxDateGroups: number;
    /**
     * Specifies the maximum divisions of the axis.
     */
    maxDivisions: number;
    /**
     * Specifies the minimum value of the axis.
     */
    min: any;
    /**
     * Specifies the minor grid lines configuration of the axis.
     */
    minorGridLines: GridLines;
    /**
     * Specifies the minor ticks configuration of the axis.
     */
    minorTicks: AxisTicks;
    /**
     * Specifies the unique axis name. Use it to associate a series with a category axis,
     * which utilizes the [`series.categoryAxis`]({% slug api_charts_series %}#toc-categoryaxis) option.
     * @default 'primary'
     */
    name: string;
    /**
     * Specifies the pane of the axis.
     */
    pane: string;
    /**
     * Specifies the plot bands configuration of the axis.
     */
    plotBands: PlotBand[];
    /**
     * Determines whether the category axis direction is reversed.
     * Categories are listed from left to right and from bottom to top by default.
     * @default false
     */
    reverse: boolean;
    /**
     * Determines whether the Chart rounds the first and last date to the nearest base unit.
     * @default true
     */
    roundToBaseUnit: boolean;
    /**
     * Specifies the angle (degrees) of the first category on the axis.
     * Use positive values to increase the angle clockwise with zero to the left. Negative values are acceptable.
     * @default 90
     */
    startAngle: number;
    /**
     * Specifies the category axis type.
     * Use `category` for a discrete category axis and `date` for a specialized axis for displaying chronological data.
     * @default 'category'
     */
    type: 'category' | 'date';
    /**
     * Determines whether the Chart displays the category axis. The category axis is visible by default.
     * @default true
     */
    visible: boolean;
    /**
     * Specifies the week start day when the `baseUnit` is set to `"weeks"`.
     * @default 'Sunday'
     */
    weekStartDay: WeekStartDay;
    /**
     * Specifies the crosshair configuration of the axis.
     */
    crosshair: CategoryAxisCrosshair;
    /**
     * Specifies the labels configuration of the axis.
     */
    labels: CategoryAxisLabels;
    /**
     * Specifies the notes configuration of the axis.
     */
    notes: CategoryAxisNotes;
    /**
     * Specifies the selection configuration of the axis.
     */
    select: CategoryAxisSelect;
    /**
     * Specifies the title configuration of the axis.
     */
    title: CategoryAxisTitle;
    /**
     * Specifies the range labels configuration of the axis.
     */
    rangeLabels: CategoryAxisRangeLabels;
    private intlSubscription;
    constructor(configurationService: ConfigurationService, collectionService: CollectionService, intl: IntlService, localeId: string);
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<CategoryAxisItemComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<CategoryAxisItemComponent, "kendo-chart-category-axis-item", never, { "autoBaseUnitSteps": { "alias": "autoBaseUnitSteps"; "required": false; }; "axisCrossingValue": { "alias": "axisCrossingValue"; "required": false; }; "background": { "alias": "background"; "required": false; }; "baseUnit": { "alias": "baseUnit"; "required": false; }; "baseUnitStep": { "alias": "baseUnitStep"; "required": false; }; "categories": { "alias": "categories"; "required": false; }; "color": { "alias": "color"; "required": false; }; "justified": { "alias": "justified"; "required": false; }; "line": { "alias": "line"; "required": false; }; "majorGridLines": { "alias": "majorGridLines"; "required": false; }; "majorTicks": { "alias": "majorTicks"; "required": false; }; "max": { "alias": "max"; "required": false; }; "maxDateGroups": { "alias": "maxDateGroups"; "required": false; }; "maxDivisions": { "alias": "maxDivisions"; "required": false; }; "min": { "alias": "min"; "required": false; }; "minorGridLines": { "alias": "minorGridLines"; "required": false; }; "minorTicks": { "alias": "minorTicks"; "required": false; }; "name": { "alias": "name"; "required": false; }; "pane": { "alias": "pane"; "required": false; }; "plotBands": { "alias": "plotBands"; "required": false; }; "reverse": { "alias": "reverse"; "required": false; }; "roundToBaseUnit": { "alias": "roundToBaseUnit"; "required": false; }; "startAngle": { "alias": "startAngle"; "required": false; }; "type": { "alias": "type"; "required": false; }; "visible": { "alias": "visible"; "required": false; }; "weekStartDay": { "alias": "weekStartDay"; "required": false; }; "crosshair": { "alias": "crosshair"; "required": false; }; "labels": { "alias": "labels"; "required": false; }; "notes": { "alias": "notes"; "required": false; }; "select": { "alias": "select"; "required": false; }; "title": { "alias": "title"; "required": false; }; "rangeLabels": { "alias": "rangeLabels"; "required": false; }; }, {}, never, never, true, never>;
}
