/**-----------------------------------------------------------------------------------------
* Copyright Â© 2025 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { TemplateRef } from '@angular/core';
import { drawing } from '@progress/kendo-drawing';
import { CollectionItemComponent } from '../common/collection-item.component';
import { CollectionService } from '../common/collection.service';
import { ConfigurationService } from '../common/configuration.service';
import { Border, BulletTarget, DashType, LabelConnectors, LegendItem, LineStyle, Margin, NegativeBubbleValues, Overlay, Series, SeriesErrorBars, SeriesExtremes, SeriesHighlight, SeriesLabels, SeriesLine, SeriesMarkers, SeriesMean, SeriesMedian, SeriesNotes, SeriesOutliers, SeriesPattern, SeriesStack, SeriesTooltip, SeriesTrendline, SeriesType, SeriesVisualArgs, SeriesWhiskers } from '../common/property-types';
import { SeriesTooltipComponent } from './series-item/tooltip.component';
import { SeriesDrilldownTemplateDirective } from './series-drilldown-template.directive';
import * as i0 from "@angular/core";
/**
 * Represents the Kendo UI for Angular Chart Series Item component.
 *
 * @example
 * ```html
 * <kendo-chart ...>
 *   <kendo-chart-series>
 *     <kendo-chart-series-item type="line" ...> </kendo-chart-series-item>
 *   </kendo-chart-series>
 * </kendo-chart>
 * ```
 *
 * @remarks
 * Supported children components are: {@link SeriesErrorBarsComponent}, {@link SeriesExtremesComponent},
 * {@link SeriesHighlightComponent}, {@link SeriesLabelsComponent}, {@link SeriesMarkersComponent},
 * {@link SeriesNotesComponent}, {@link SeriesOutliersComponent}, {@link SeriesTooltipComponent}, and {@link SeriesTrendlineComponent}.
 */
export declare class SeriesItemComponent extends CollectionItemComponent implements Series {
    protected configurationService: ConfigurationService;
    protected collectionService: CollectionService;
    /**
     * Specifies the aggregate function for the date series.
     * Use this function when a category (year, month, or other) contains two or more points.
     * The Chart displays the return value of the function instead of the individual points.
     * Use the `aggregate` option with categorical chart axis only.
     *
     * The supported values are:
     * - `"avg"`&mdash;The average of all values for the date period.
     * - `"count"`&mdash;The number of values for the date period.
     * - `"max"`&mdash;The highest value for the date period.
     * - `"min"`&mdash;The lowest value for the date period.
     * - `"sum"`&mdash;The sum of all values for the date period. Defaults to `0` if no data points are defined.
     * - `"sumOrNull"`&mdash;The sum of all values for the date period. Defaults to `null` if no data points are defined.
     * - `"first"`&mdash;The first value.
     * - function (values, series, dataItems, category)&mdash;A user-defined aggregate function. Returns a single value or a data item.
     * - object (compound aggregate)&mdash;Applicable to the Candlestick, Box Plot, and OHLC series. Specifies the aggregate for each data item field.
     *
     * @default 'max'
     */
    aggregate: any;
    /**
     * Determines whether the Chart automatically scales down to fit the content area.
     * Applicable for the Pie and Donut series. ([See example](slug:donut_seriestypes_charts#displaying-labels-in-angular-donut-chart)).
     * @default false
     */
    autoFit: boolean;
    /**
     * Specifies the name of the value axis.
     * Use this option for Scatter plots. For more information on Scatter plots, refer to
     * [`xAxis`]({% slug api_charts_xaxis %}) and [`yAxis`]({% slug api_charts_yaxis %}).
     * @default 'primary'
     */
    axis: string;
    /**
     * Specifies the border configuration of the series.
     */
    border: Border;
    /**
     * Specifies the name of the category axis.
     */
    categoryAxis: string;
    /**
     * Specifies the data item field which contains the category name or date.
     * If the category is a date, the points are rendered in chronological order.
     * @default 'category'
     */
    categoryField: string;
    /**
     * Specifies the data field that contains the `close` value.
     * Use the `closeField` option when [`series.type`]({% slug api_charts_series %}#toc-type) is set to `"candlestick"` or `"ohlc"`.
     * @default 'close'
     */
    closeField: string;
    /**
     * Specifies the color of the series.
     */
    color: any;
    /**
    * Specifies the data item field which contains the series color.
    * Use the `colorField` option when [`series.type`]({% slug api_charts_series %}#toc-type)
    * is set to `"bar"`, `"column"`, `"rangeBar"`, `"rangeColumn"`, `"bubble"`, `"donut"`, `"pie"`, `"candlestick"`,
    * `"ohlc"`, or `"waterfall"`.
    * @default 'color'
    */
    colorField: string;
    /**
     * Specifies the connectors configuration for the labels.
     */
    connectors: LabelConnectors;
    /**
     * Specifies the data item field which contains the current value.
     * Use the `currentField` option when [`series.type`]({% slug api_charts_series %}#toc-type) is set to `"bullet"` or `"verticalBullet"`.
     * @default 'current'
     */
    currentField: string;
    /**
     * Specifies the dash type of line Chart.
     * Use the `dashType` option only if the [`series.type`]({% slug api_charts_series %}#toc-type) option is set to `"line"`.
     * @default 'solid'
     */
    dashType: DashType;
    /**
     * Specifies the data source for the series.
     */
    data: any[];
    /**
     * Specifies the color that is applied when the `close` value is less than the `open` value.
     */
    downColor: string;
    /**
     * Specifies the data field which contains the color that is applied when the `open` value is greater than the `close` value.
     * Use the `downColorField` option when [`series.type`]({% slug api_charts_series %}#toc-type) is set to `"candlestick"`.
     * @default 'downColor'
     */
    downColorField: string;
    /**
     * Specifies the field for the drilldown functionality.
     */
    drilldownField: string;
    /**
     * Use the `dynamicHeight` option when [`series.type`]({% slug api_charts_series %}#toc-type) is set to `"funnel"` or `"pyramid"`.
     * Determines whether all segments become with the same height.
     * When set to `false`, all segments have the same height. Otherwise, the height of each segment is based on its value.
     * @default true
     */
    dynamicHeight: boolean;
    /**
     * Use this option when [`series.type`]({% slug api_charts_series %}#toc-type) is set to `"funnel"`.
     * Determines whether the ratio of the bases of each segment is calculated based on the ratio of
     * `currentDataItem.value`/`nextDataItem.value`.
     * The last element is always created like a rectangle since there is no following element.
     * @default false
     */
    dynamicSlope: boolean;
    /**
     * Specifies the data item field which contains the [`series.errorBars`]({% slug api_charts_series %}#toc-errorbars) `high` value.
     * Use the `errorHighField` option when [`series.type`]({% slug api_charts_series %}#toc-type) is set to `"bar"`, `"column"`, `"line"`, or `"area"`.
     * @default 'errorHigh'
     */
    errorHighField: string;
    /**
     * Specifies the data item field which contains the [`series.errorBars`]({% slug api_charts_series %}#toc-errorbars) `low` value.
     * Use the `errorLowField` option when [`series.type`]({% slug api_charts_series %}#toc-type) is set to `"bar"`, `"column"`, `"line"`, or `"area"`.
     * @default 'errorLow'
     */
    errorLowField: string;
    /**
     * Specifies the data item field which contains a Boolean value indicating whether the sector is exploded.
     * Use the `explodeField` option when [`series.type`]({% slug api_charts_series %}#toc-type) is set to `"donut"` or `"pie"`.
     * @default 'explode'
     */
    explodeField: string;
    /**
     * Specifies the data item field which contains the series value.
     * @default 'value'
     */
    field: string;
    /**
     * Specifies the data item field which contains the series `from` value.
     * @default 'min'
     */
    fromField: string;
    /**
     * Specifies the distance between the categories expressed as a percentage of the bar width.
     * See the related `spacing` setting.
     * Use the `gap` option when [`series.type`]({% slug api_charts_series %}#toc-type) is set to `"bar"`, `"column"`, `"candlestick"`, `"ohlc"`,
     * `"radarColumn"`, or `"waterfall"`.
     * @default 1.5
     */
    gap: number;
    /**
     * Specifies the data field which contains the `high` value.
     * Use the `highField` option when [`series.type`]({% slug api_charts_series %}#toc-type) is set to `"candlestick"` or `"ohlc"`.
     * @default 'high'
     */
    highField: string;
    /**
     * Specifies the size of the hole in donut charts.
     */
    holeSize: number;
    /**
     * Specifies the line configuration of the series.
     */
    line: SeriesLine;
    /**
     * Specifies the data field containing the `low` value.
     * Use the `lowField` option when [`series.type`]({% slug api_charts_series %}#toc-type) is set to `"candlestick"` or `"ohlc"`.
     * @default 'low'
     */
    lowField: string;
    /**
     * Specifies the data item field which contains the series `lower` value.
     * Use the `lowerField` option when [`series.type`]({% slug api_charts_series %}#toc-type) is set to `"boxPlot"`.
     * @default 'lower'
     */
    lowerField: string;
    /**
     * Specifies the margin around each donut series (ring). A numeric value sets all margins.
     * @default 1
     */
    margin: Margin | number;
    /**
     * Specifies the maximum size of the Chart bubble series marker.
     * @default 100
     */
    maxSize: number;
    /**
     * Specifies the mean configuration of the series.
     */
    mean: SeriesMean;
    /**
     * Specifies the data item field which contains the series `mean` value.
     * Use the `meanField` option when [`series.type`]({% slug api_charts_series %}#toc-type) is set to `"boxPlot"`.
     * @default 'mean'
     */
    meanField: string;
    /**
     * Specifies the median configuration of the series.
     */
    median: SeriesMedian;
    /**
     * Specifies the data item field which contains the series `median` value.
     * Use the `medianField` option when [`series.type`]({% slug api_charts_series %}#toc-type) is set to `"boxPlot"`.
     * @default 'median'
     */
    medianField: string;
    /**
     * Specifies the minimum size of the Chart bubble series marker.
    * @default 5
     */
    minSize: number;
    /**
     * Specifies how to handle missing values in the series.
     */
    missingValues: 'gap' | 'interpolate' | 'zero';
    /**
     * Specifies the name of the series.
     */
    name: string;
    /**
     * Specifies the top-base/bottom-base ratio of the whole Funnel Chart. If the `neckRatio` is set to `3`,
     * it means the top base is three times smaller than the bottom base.
     * Use the `neckRatio` option when [`series.type`]({% slug api_charts_series %}#toc-type) is set to `"funnel"` and `dynamicSlope` is set to `false`.
     * @default 0.3
     */
    neckRatio: number;
    /**
     * Specifies the color for negative values.
     */
    negativeColor: string;
    /**
     * Specifies the configuration for negative bubble values.
     */
    negativeValues: NegativeBubbleValues;
    /**
     * Specifies the data item field which contains the series note text.
     * @default 'noteText'
     */
    noteTextField: string;
    /**
     * Specifies the opacity of the series. By default, the series are opaque.
     * @default 1
     */
    opacity: number;
    /**
     * Specifies the data field that contains the `open` value.
     */
    openField: string;
    /**
     * Specifies the data item field which contains the series `outliers` value.
     * Use the `outliersField` option when [`series.type`]({% slug api_charts_series %}#toc-type) is set to `"boxPlot"`.
     * @default 'outliers'
     */
    outliersField: string;
    /**
     * Specifies the overlay configuration of the series.
     */
    overlay: Overlay;
    /**
     * Specifies the padding of the series.
     */
    padding: number;
    /**
     * Specifies the data item field which contains the series `q1` value.
     * Use the `q1Field` option when [`series.type`]({% slug api_charts_series %}#toc-type) is set to `"boxPlot"`.
     * @default 'q1'
     */
    q1Field: string;
    /**
     * Specifies the data item field which contains the series `q3` value.
     * Use the `q3Field` option when [`series.type`]({% slug api_charts_series %}#toc-type) is set to `"boxPlot"`.
     * @default 'q3'
     */
    q3Field: string;
    /**
     * Specifies the space in pixels between the different segments of the Funnel or Pyramid Chart.
     * Use the `segmentSpacing` option when [`series.type`]({% slug api_charts_series %}#toc-type) is set to `"funnel"` or `"pyramid"`.
     * @default 0
     */
    segmentSpacing: number;
    /**
     * Specifies the size of the series.
     */
    size: number;
    /**
     * Specifies the data field which contains the bubble size value.
     * @default 'size'
     */
    sizeField: string;
    /**
     * Specifies the distance between series points within a category. Expressed as a percentage of the bar width.
     * See the related `gap` setting.
     * Use the `spacing` option when [`series.type`]({% slug api_charts_series %}#toc-type) is set to `"bar"`, `"column"`, `"candlestick"`, `"ohlc"`, or
     * `"radarColumn"`.
     * @default 0.4
     */
    spacing: number;
    /**
     * Determines whether the series have to be stacked.
     * A string value is interpreted as [`series.stack.group`]({% slug api_charts_seriesstack %}#toc-group).
     *
     * Use the `stack` option when [`series.type`]({% slug api_charts_series %}#toc-type) is set to `"bar"`, `"column"`, `"line"`, `"area"`,
     * `"verticalLine"`, `"verticalArea"`, `"radarLine"`, `"radarArea"`, and `"radarColumn"`.
     * If not overridden, the stack settings of the first series are inherited as a default value by the rest of the series.
     * @default false
     */
    stack: boolean | string | SeriesStack;
    /**
     * Specifies the start angle (in degrees) of the first Donut or Pie segment.
     * Use positive values to increase angles clockwise with zero to the left. Negative values are acceptable.
     * @default 90
     */
    startAngle: number;
    /**
     * Specifies the line style configuration of the series.
     * Use the `style` option when [`series.type`]({% slug api_charts_series %}#toc-type) is set to
     * `"line"`, `"scatterLine"`, `"radarLine"`, or `"polarLine"`.
     * @default 'normal'
     */
    style: LineStyle;
    /**
     * Specifies the data item field which contains the summary type for the Waterfall series.
     * The value (if any) of a data item marked as a summary point will be discarded.
     *
     * Summary columns are optional and can be one of two types:
     *
     * `"runningTotal"`&mdash;Displays the sum of all items since the last `"runningTotal"` point.
     * `"total"`&mdash;Displays the sum of all previous items.
     * @default 'summary'
     */
    summaryField: string;
    /**
     * Specifies the bullet target configuration.
     */
    target: BulletTarget;
    /**
     * Specifies the data item field which contains the series `to` value.
     * @default 'max'
     */
    toField: string;
    /**
     * Specifies the type of the series.
     * @default 'column'
     */
    type: SeriesType;
    /**
     * Specifies the data item field which contains the series `upper` value.
     * Use the `upperField` option when [`series.type`]({% slug api_charts_series %}#toc-type) is set to `"boxPlot"`.
     * @default 'upper'
     */
    upperField: string;
    /**
     * Determines whether the Chart series is visible.
     * @default true
     */
    visible: boolean;
    /**
     * Determines whether to show the point category (for Funnel, Pyramid, Donut, and Pie series)
     * or the series name (for other available series types) in the legend.
     * @default true
     */
    visibleInLegend: boolean;
    /**
     * Specifies the data item field which contains the visibility state in the legend.
     */
    visibleInLegendField: string;
    /**
     * Specifies a function that returns a custom visual for the series.
     */
    visual: (e: SeriesVisualArgs) => drawing.Element;
    /**
     * Specifies the width of the series.
     */
    width: number;
    /**
     * Specifies the whiskers configuration of the series.
     */
    whiskers: SeriesWhiskers;
    /**
     * Specifies the name of the X axis.
     * Use the [`xAxis`]({% slug api_charts_xaxis %}) option when [`series.type`]({% slug api_charts_series %}#toc-type) is set to `"bubble"`, `"scatter"`, `"scatterLine"`, or `"polar"` series.
     * For the Polar series, the [`xAxis`]({% slug api_charts_xaxis %}) range is expressed in degrees.
     * @default 'primary'
     */
    xAxis: string;
    /**
     * Specifies the data item field which contains the [`series.errorBars`]({% slug api_charts_series %}#toc-errorbars) xAxis `high` value.
     * Use the `xErrorHighField` option when [`series.type`]({% slug api_charts_series %}#toc-type) is set to `"scatter"`, `"scatterLine"`, or
     * `"bubble"`.
     * @default 'xErrorHigh'
     */
    xErrorHighField: string;
    /**
     * Specifies the data item field which contains the [`series.errorBars`]({% slug api_charts_series %}#toc-errorbars) xAxis `low` value.
     * Use the `xErrorLowField` option when [`series.type`]({% slug api_charts_series %}#toc-type) is set to `"scatter"`, `"scatterLine"`, or
     * `"bubble"`.
     * @default 'xErrorLow'
     */
    xErrorLowField: string;
    /**
     * Specifies the data item field containing the `x` value.
     * Use the `xField` option when [`series.type`]({% slug api_charts_series %}#toc-type) is set to `"bubble"`, `"scatter"`, `"scatterLine"`, or
     * `"polar"` series.
     * @default 'x'
     */
    xField: string;
    /**
     * Specifies the name of the Y axis to use.
     * Available for the Bubble, Scatter, Scatter Line, and Polar series.
     * @default 'primary'
     */
    yAxis: string;
    /**
      * Specifies the data item field that contains the [`series.errorBars`]({% slug api_charts_series %}#toc-errorbars) yAxis `high` value.
      * The `yErrorHighField` option is supported when [`series.type`]({% slug api_charts_series %}#toc-type) is set to `"scatter"`, `"scatterLine"`, or
      * `"bubble"`.
      * @default 'yErrorHigh'
      */
    yErrorHighField: string;
    /**
     * Specifies the data item field that contains the [`series.errorBars`]({% slug api_charts_series %}#toc-errorbars) yAxis `low` value.
     * The `yErrorLowField` option is supported when [`series.type`]({% slug api_charts_series %}#toc-type) is set to `"scatter"`, `"scatterLine"`, or
     * `"bubble"`.
     * @default 'yErrorLow'
     */
    yErrorLowField: string;
    /**
     * Specifies the data item field that contains the `y` value.
     * The `yField` option is supported when [`series.type`]({% slug api_charts_series %}#toc-type) is set to `"bubble"`, `"scatter"`, or `"scatterLine"`.
     * @default 'y'
     */
    yField: string;
    /**
     * Specifies the z-index of the series.
     */
    zIndex: number;
    /**
     * Specifies the configuration options of the trendline series.
     *
     * The `trendline` option is supported  when [`series.type`]({% slug api_charts_series %}#toc-type) is set to
     * "`linearTrendline`", "`exponentialTrendline`", "`logarithmicTrendline`", "`powerTrendline`", "`polynomialTrendline`" or "`movingAverageTrendline`".
     */
    trendline: SeriesTrendline;
    /**
     * Specifies the name of the series for which the current series serves as a trendline.
     */
    for: string;
    /**
     * Specifies the configuration options of the series legend item.
     */
    legendItem: LegendItem;
    /**
     * Specifies the configuration options of the series pattern.
     */
    pattern?: SeriesPattern | ((point: any) => SeriesPattern);
    /**
     * Specifies the data item field that contains the series pattern.
     * The `patternField` option is supported when [`series.type`]({% slug api_charts_series %}#toc-type) is set to `"pie"`, `"donut"`, `"funnel"`, `"heatmap"`, or `"pyramid"`.
     */
    patternField?: string;
    /**
     * Specifies the configuration options of the series error bars.
     */
    errorBars: SeriesErrorBars;
    /**
     * Specifies the configuration options of the series extremes.
     */
    extremes: SeriesExtremes;
    /**
     * Specifies the configuration options of the series highlight.
     */
    highlight: SeriesHighlight;
    /**
     * Specifies the configuration options of the series labels.
     */
    labels: SeriesLabels;
    /**
     * Specifies the configuration options of the series markers.
     */
    markers: SeriesMarkers;
    /**
     * Specifies the configuration options of the series notes.
     */
    notes: SeriesNotes;
    /**
     * Specifies the configuration options of the series outliers.
     */
    outliers: SeriesOutliers;
    /**
     * Specifies the configuration options of the series tooltip.
     */
    tooltip: SeriesTooltip;
    seriesTooltip: SeriesTooltipComponent;
    drilldownTemplate: SeriesDrilldownTemplateDirective;
    constructor(configurationService: ConfigurationService, collectionService: CollectionService);
    /**
     * Toggles the series visibility and updates the parent Chart without animated transitions.
     */
    toggleVisibility(): void;
    /**
     * Toggles the visibility of a point with the given index.
     * Applicable for the Pie, Donut, Funnel and Pyramid series.
     *
     * @param pointIndex - The zero-based index of the point to toggle.
     */
    togglePointVisibility(pointIndex: number): void;
    get seriesTooltipTemplateRef(): TemplateRef<any>;
    static Éµfac: i0.ÉµÉµFactoryDeclaration<SeriesItemComponent, never>;
    static Éµcmp: i0.ÉµÉµComponentDeclaration<SeriesItemComponent, "kendo-chart-series-item", never, { "aggregate": { "alias": "aggregate"; "required": false; }; "autoFit": { "alias": "autoFit"; "required": false; }; "axis": { "alias": "axis"; "required": false; }; "border": { "alias": "border"; "required": false; }; "categoryAxis": { "alias": "categoryAxis"; "required": false; }; "categoryField": { "alias": "categoryField"; "required": false; }; "closeField": { "alias": "closeField"; "required": false; }; "color": { "alias": "color"; "required": false; }; "colorField": { "alias": "colorField"; "required": false; }; "connectors": { "alias": "connectors"; "required": false; }; "currentField": { "alias": "currentField"; "required": false; }; "dashType": { "alias": "dashType"; "required": false; }; "data": { "alias": "data"; "required": false; }; "downColor": { "alias": "downColor"; "required": false; }; "downColorField": { "alias": "downColorField"; "required": false; }; "drilldownField": { "alias": "drilldownField"; "required": false; }; "dynamicHeight": { "alias": "dynamicHeight"; "required": false; }; "dynamicSlope": { "alias": "dynamicSlope"; "required": false; }; "errorHighField": { "alias": "errorHighField"; "required": false; }; "errorLowField": { "alias": "errorLowField"; "required": false; }; "explodeField": { "alias": "explodeField"; "required": false; }; "field": { "alias": "field"; "required": false; }; "fromField": { "alias": "fromField"; "required": false; }; "gap": { "alias": "gap"; "required": false; }; "highField": { "alias": "highField"; "required": false; }; "holeSize": { "alias": "holeSize"; "required": false; }; "line": { "alias": "line"; "required": false; }; "lowField": { "alias": "lowField"; "required": false; }; "lowerField": { "alias": "lowerField"; "required": false; }; "margin": { "alias": "margin"; "required": false; }; "maxSize": { "alias": "maxSize"; "required": false; }; "mean": { "alias": "mean"; "required": false; }; "meanField": { "alias": "meanField"; "required": false; }; "median": { "alias": "median"; "required": false; }; "medianField": { "alias": "medianField"; "required": false; }; "minSize": { "alias": "minSize"; "required": false; }; "missingValues": { "alias": "missingValues"; "required": false; }; "name": { "alias": "name"; "required": false; }; "neckRatio": { "alias": "neckRatio"; "required": false; }; "negativeColor": { "alias": "negativeColor"; "required": false; }; "negativeValues": { "alias": "negativeValues"; "required": false; }; "noteTextField": { "alias": "noteTextField"; "required": false; }; "opacity": { "alias": "opacity"; "required": false; }; "openField": { "alias": "openField"; "required": false; }; "outliersField": { "alias": "outliersField"; "required": false; }; "overlay": { "alias": "overlay"; "required": false; }; "padding": { "alias": "padding"; "required": false; }; "q1Field": { "alias": "q1Field"; "required": false; }; "q3Field": { "alias": "q3Field"; "required": false; }; "segmentSpacing": { "alias": "segmentSpacing"; "required": false; }; "size": { "alias": "size"; "required": false; }; "sizeField": { "alias": "sizeField"; "required": false; }; "spacing": { "alias": "spacing"; "required": false; }; "stack": { "alias": "stack"; "required": false; }; "startAngle": { "alias": "startAngle"; "required": false; }; "style": { "alias": "style"; "required": false; }; "summaryField": { "alias": "summaryField"; "required": false; }; "target": { "alias": "target"; "required": false; }; "toField": { "alias": "toField"; "required": false; }; "type": { "alias": "type"; "required": false; }; "upperField": { "alias": "upperField"; "required": false; }; "visible": { "alias": "visible"; "required": false; }; "visibleInLegend": { "alias": "visibleInLegend"; "required": false; }; "visibleInLegendField": { "alias": "visibleInLegendField"; "required": false; }; "visual": { "alias": "visual"; "required": false; }; "width": { "alias": "width"; "required": false; }; "whiskers": { "alias": "whiskers"; "required": false; }; "xAxis": { "alias": "xAxis"; "required": false; }; "xErrorHighField": { "alias": "xErrorHighField"; "required": false; }; "xErrorLowField": { "alias": "xErrorLowField"; "required": false; }; "xField": { "alias": "xField"; "required": false; }; "yAxis": { "alias": "yAxis"; "required": false; }; "yErrorHighField": { "alias": "yErrorHighField"; "required": false; }; "yErrorLowField": { "alias": "yErrorLowField"; "required": false; }; "yField": { "alias": "yField"; "required": false; }; "zIndex": { "alias": "zIndex"; "required": false; }; "trendline": { "alias": "trendline"; "required": false; }; "for": { "alias": "for"; "required": false; }; "legendItem": { "alias": "legendItem"; "required": false; }; "pattern": { "alias": "pattern"; "required": false; }; "patternField": { "alias": "patternField"; "required": false; }; "errorBars": { "alias": "errorBars"; "required": false; }; "extremes": { "alias": "extremes"; "required": false; }; "highlight": { "alias": "highlight"; "required": false; }; "labels": { "alias": "labels"; "required": false; }; "markers": { "alias": "markers"; "required": false; }; "notes": { "alias": "notes"; "required": false; }; "outliers": { "alias": "outliers"; "required": false; }; "tooltip": { "alias": "tooltip"; "required": false; }; }, {}, ["seriesTooltip", "drilldownTemplate"], never, true, never>;
}
